(function()
{
"use strict";
window.flash={};
flash.classes={};
flash.descriptions={};
flash.getPixelRatio=function(context)
{
return window.devicePixelRatio||1;
};
flash.minimize=function()
{
window.scrollTo(0,0);
};
flash.correctTopLevel=function()
{
if(!window.console)
{
window.console={};
window.console.log=function()
{
};
window.console.error=function()
{
};
}
window.SecurityError=function()
{
};
}
flash.correctTypedArrays=function()
{
try
{
var a=new Uint8Array(1);
return;
}
catch(e)
{
}
function subarray(start,end)
{
return this.slice(start,end);
}
function set_(array,offset)
{
if(arguments.length<2)offset=0;
for(var i=0,n=array.length;i<n;++i,++offset)
{
this[offset]=array[i]&0xFF;
}
}
function TypedArray(arg1)
{
var result;
if(arg1!=undefined)
{
if(typeof arg1==="number")
{
result=new Array(arg1);
for(var i=0;i<arg1;++i)
{
result[i]=0;
}
}
else
{
result=Array.prototype.slice.call(arg1,0);
}
}
else
{
result=new Array();
}
result.subarray=subarray;
result.buffer=result;
result.byteLength=result.length;
result.set=set_;
if(typeof arg1==="object"&&arg1.buffer)
{
result.buffer=arg1.buffer;
}
return result;
}
window.ArrayBuffer=TypedArray;
window.Uint8Array=TypedArray;
window.Uint32Array=TypedArray;
window.Int32Array=TypedArray;
window.Float32Array=TypedArray;
window.Float64Array=TypedArray;
};
flash.correctArray=function()
{
Array.CASEINSENSITIVE=1;
Array.DESCENDING=2;
Array.NUMERIC=16;
Array.RETURNINDEXEDARRAY=8;
Array.UNIQUESORT=4;
if(!Array.prototype.indexOf)
{
var indexOf=function(find,i)
{
if(i===undefined)i=0;
if(i<0)i+=this.length;
if(i<0)i=0;
for(var n=this.length;i<n;i++)
{
if(i in this&&this[i]===find)
{
return i;
}
}
return-1;
};
flash.defineProperty(Array.prototype,"indexOf",function()
{
return indexOf;
},null,false);
}
if(!Array.prototype.sortOn)
{
var sortOnMethod=function(ar,propName,options)
{
var sortFunction=function(o1,o2)
{
var v1=(o1[propName]!=undefined)?o1[propName].valueOf():"";
var v2=(o2[propName]!=undefined)?o2[propName].valueOf():"";
function noCase()
{
if(typeof(v1)=="string"||v1 instanceof String)
{
v1=v1.toLowerCase();
}
if(typeof(v2)=="string"||v2 instanceof String)
{
v2=v2.toLowerCase();
}
}
function numeric()
{
v1=Number(v1);
v2=Number(v2);
v1=isNaN(v1)?0:v1;
v2=isNaN(v2)?0:v2;
}
function reverse()
{
var tmp=v1;
v1=v2;
v2=tmp;
}
switch(options)
{
case Array.CASEINSENSITIVE:
case Array.CASEINSENSITIVE|Array.RETURNINDEXEDARRAY:
{
noCase();
break;
}
case Array.NUMERIC:
case Array.NUMERIC|Array.RETURNINDEXEDARRAY:
{
numeric();
break;
}
case Array.DESCENDING:
case Array.DESCENDING|Array.RETURNINDEXEDARRAY:
{
reverse();
break;
}
case Array.CASEINSENSITIVE|Array.DESCENDING:
case Array.CASEINSENSITIVE|Array.DESCENDING|Array.RETURNINDEXEDARRAY:
{
noCase();
reverse();
break;
}
case Array.NUMERIC|Array.DESCENDING:
case Array.NUMERIC|Array.DESCENDING|Array.RETURNINDEXEDARRAY:
{
numeric();
reverse();
break;
}
case Array.UNIQUESORT:
{
if(v1==v2)
return;
break
}
}
if(v1<v2)
{
return-1;
}
else if(v1>v2)
{
return 1;
}
else
{
return 0;
}
}
switch(options)
{
case Array.RETURNINDEXEDARRAY:
case Array.RETURNINDEXEDARRAY|Array.NUMERIC:
case Array.RETURNINDEXEDARRAY|Array.CASEINSENSITIVE:
case Array.RETURNINDEXEDARRAY|Array.NUMERIC|Array.DESCENDING:
case Array.RETURNINDEXEDARRAY|Array.CASEINSENSITIVE|Array.DESCENDING:
{
var tmp=[].concat(ar);
tmp.sort(sortFunction);
var result=[];
var l=ar.length;
for(var i=0;i<l;i++)
{
var index=tmp.indexOf(ar[i]);
result.push(index);
}
return result;
}
default:
{
return ar.sort(sortFunction);
}
}
};
var sortOn=function(name,parameters)
{
sortOnMethod(this,name,parameters);
};
flash.defineProperty(Array.prototype,"sortOn",function()
{
return sortOn;
},null,false);
}
};
flash.int=function(value)
{
if(value==undefined)return 0;
if(isNaN(value))return 0;
return parseInt(value);
}
flash.uint=function(value)
{
if(value==undefined)return 0;
if(isNaN(value))return 0;
return parseInt(value);
}
flash.getInternetExplorerVersion=function()
{
var rv=-1;
if(navigator.appName=='Microsoft Internet Explorer')
{
var ua=navigator.userAgent;
var re=new RegExp("MSIE ([0-9]{1,}[\.0-9]{0,})");
if(re.exec(ua)!=null)
rv=parseFloat(RegExp.$1);
}
return rv;
}
flash.toString=function()
{
return"[package flash]";
}
flash.trace=function()
{
if(window.console)
{
window.console.log(Array.prototype.join.call(arguments," "));
}
};
flash.createPackage=function(packageName,object,parentName)
{
if(object==undefined)object=window;
if(packageName&&packageName.length)
{
var path=packageName.split(".");
var name=path.shift();
var fullName=(parentName?parentName+".":"")+name;
if(!object[name])
{
object[name]={};
object[name].toString=function()
{
return"[package "+fullName+"]";
}
}
flash.createPackage(path.join("."),object[name],fullName);
}
};
flash.getNamespace=function(packageName,object)
{
if(object==undefined)object=window;
if(packageName&&packageName.length)
{
var path=packageName.split(".");
var name=path.shift();
if(object[name])
{
return flash.getNamespace(path.join("."),object[name]);
}
else
{
return null;
}
}
else
{
return object;
}
};
flash.bindFunction=function(instance,method)
{
if(!method)
{
return null;
}
if(!instance)
{
return method;
}
if(method.__method__)
{
return method;
}
var result;
if(method.bind!=undefined)
{
result=method.bind(instance);
}
else
{
result=function()
{
return method.apply(instance,arguments);
}
}
result.__instance__=instance;
result.__method__=method;
return result;
};
flash.equalsFunction=function(method1,method2)
{
if(method1==method2)return true;
return method1==method2||
method1.__method__==method2||
method1==method2.__method__||
method1.__method__==method2.__method__;
};
flash.extendsClass=function(ChildClass,ParentClass)
{
var PrototypeClass=function()
{
};
PrototypeClass.prototype=ParentClass.prototype;
ChildClass.prototype=new PrototypeClass();
};
flash.defineProperties=function(object)
{
var getter=null;
var setter=null;
var name=null;
var property=null;
for(property in object)
{
var begin=property.substring(0,4);
if(begin=="get_")
{
name=property.substring(4);
getter=object["get_"+name];
if(object["set_"+name]!=undefined)
{
setter=object["set_"+name];
}
}
else if(begin=="set_")
{
name=property.substring(4);
if(!object["get_"+name]!=undefined)
{
setter=object["set_"+name];
}
}
if(getter||setter)
{
flash.defineProperty(object,name,getter,setter);
}
}
}
flash.defineProperty=function(object,name,getter,setter,enumerable)
{
if(Object.defineProperty!=undefined)
{
var attributes={enumerable:enumerable!=undefined?enumerable:true,configurable:true};
if(getter)attributes.get=getter;
if(setter)attributes.set=setter;
Object.defineProperty(object,name,attributes);
}
else
{
if(getter&&object.__defineGetter__!=undefined)
{
object.__defineGetter__(name,getter);
}
if(setter&&object.__defineSetter__!=undefined)
{
object.__defineSetter__(name,setter);
}
}
}
flash.createClass=function(fullClassName,description,base,statical,implementation,embed)
{
var nameParts=fullClassName.split(".");
var className=nameParts.pop();
var packageName=nameParts.join(".");
flash.createPackage(packageName);
var constructor;
if(description)
{
constructor=description[className];
if(!embed&&!description.hasOwnProperty("toString"))
{
description.toString=function()
{
return"[object "+className+"]";
};
}
;
}
;
if(!constructor)
{
constructor=function()
{
if(constructor.__base__)
{
constructor.__base__.apply(this,arguments);
}
};
}
;
constructor.toString=function()
{
return"[class "+className+"]";
};
if(base)
{
flash.extendsClass(constructor,base);
constructor.__base__=base;
}
constructor.prototype.__class__=constructor;
constructor.__name__=fullClassName;
if(constructor.prototype.getProperty==undefined)
{
constructor.prototype.getProperty=function(name)
{
if(this[name]==undefined)
{
return this["get_"+name]();
}
else
{
return this[name];
}
}
}
if(implementation)
{
constructor.__implements__=implementation;
}
if(description)
{
flash.copyProperties(description,constructor.prototype);
}
if(statical)
{
flash.copyProperties(statical,constructor);
}
flash.defineProperties(constructor.prototype);
flash.defineProperties(constructor);
var packageObject=flash.getNamespace(packageName);
packageObject[className]=constructor;
flash.classes[fullClassName]=constructor;
return constructor;
};
flash.addDescription=function(fullClassName,description,base,statical,implementation,requiredClasses)
{
flash.descriptions[fullClassName]={
fullClassName:fullClassName,
description:description,
base:base,
statical:statical,
implementation:implementation,
requiredClasses:requiredClasses
}
};
flash.initDescription=function(fullClassName)
{
if(!fullClassName||flash.classes[fullClassName]||window[fullClassName])return;
var description=flash.descriptions[fullClassName];
if(description)
{
flash.initDescription(description.base);
var base=flash.classes[description.base]||window[description.base];
var implementation=null;
if(description.implementation)
{
implementation=[];
for(var i in description.implementation)
{
var interfaceName=description.implementation[i];
if(!(interfaceName instanceof Function))
{
flash.initDescription(interfaceName);
implementation.push(flash.classes[interfaceName]||window[description.base]);
}
}
}
flash.createClass(
fullClassName,
description.description,
base,
description.statical,
implementation
)
}
else
{
if(!window[fullClassName])
{
throw new Error("Class description not found: "+fullClassName);
}
}
};
flash.initDescriptions=function()
{
for(var i in flash.descriptions)
{
flash.initDescription(i);
}
};
flash.initStatics=function()
{
for(var i in flash.classes)
{
flash.initStatic(i);
}
}
flash.initStatic=function(fullClassName,tab)
{
if(tab==undefined)tab="";
var description=flash.classes[fullClassName];
if(!description)
{
if(window[fullClassName])
{
return;
}
else
{
throw new Error("Description '"+fullClassName+"' not found");
}
}
if(description.__inited)return;
description.__inited=true;
var requiredClasses=flash.descriptions[fullClassName].requiredClasses;
if(requiredClasses)
{
for(var i in requiredClasses)
{
var requiredClass=requiredClasses[i];
if(!(requiredClass instanceof Function))
{
flash.initStatic(requiredClass,"    ");
}
}
}
if(description.__base__)
{
flash.copyProperties(description.__base__,description,["__init__","__embed__"],false);
}
if(description.__init__ instanceof Function)
{
description.__init__();
}
}
flash.init=function()
{
flash.initDescriptions();
flash.initStatics();
};
flash.embed=function()
{
for(var i in flash.classes)
{
var description=flash.classes[i];
if(description.__embed__ instanceof Function)
{
description.__embed__();
}
}
};
flash.copyProperties=function(source,target,ignored,override)
{
if(override==undefined)override=true;
for(var i in source)
{
if(!ignored||ignored.indexOf(i)==-1)
{
if(override||target[i]==undefined)
{
target[i]=source[i];
}
}
}
;
};
flash.numberToColor=function(n)
{
var r=(n>>16)&0xff;
var g=(n>>8)&0xff;
var b=n&0xff;
return"rgb("+r+", "+g+", "+b+")";
};
flash.numberToHex=function(n)
{
var hex=n.toString(16);
while(hex.length<6)
{
hex="0"+hex;
}
if(hex.length>6)
{
hex=hex.substring(hex.length-6);
}
return"#"+hex;
};
flash.getTextureSize=function(value)
{
for(var i=5;i<8;i++)
{
var size=Math.pow(2,i);
if(value<=size)
{
return size;
}
}
return Math.ceil(value/256)*256;
};
flash.createExtendsClass=function(fullClassName,base)
{
var nameParts=fullClassName.split(".");
var className=nameParts.pop();
var packageName=nameParts.join(".");
if(base)
{
var description={};
description.__superConstructor__=base;
description[className]=function()
{
this.__superConstructor__();
};
}
return flash.createClass(fullClassName,description,base,null,null,true);
};
flash.createEmbedClass=function(fullClassName,resourcePath,fontName)
{
if(fontName)
{
flash.text.TextFormat._embedFonts[fontName]=resourcePath;
}
var ClassObject=flash.classes[fullClassName];
if(!ClassObject)
{
var className=fullClassName.split(".").pop();
var domain=flash.system.ApplicationDomain.get_currentDomain();
var defineId=domain._getLinkageId(fullClassName);
if(!defineId&&resourcePath)
{
var imageId=resourcePath.split("_")[1].split(".")[0];
defineId=domain._getLinkageId(imageId,true);
}
if(defineId)
{
var define=domain._getDefine(defineId);
if(define)
{
if(define.baseClass)
{
var description={};
description.__superConstructor__=define.baseClass;
description[className]=function()
{
this.__superConstructor__();
};
ClassObject=flash.createClass(fullClassName,description,define.baseClass,null,null,true);
ClassObject.__linkageId=defineId;
if(define instanceof flash.swf.DefineBits&&resourcePath)
{
define.atlas=resourcePath;
define.setImages(domain);
}
}
else
{
throw new Error("Undefined base class for embed class '"+fullClassName+"'");
}
}
else
{
throw new Error("Define not found for class '"+fullClassName+"' by id '"+defineId+"'");
}
}
}
return ClassObject;
};
flash.linkage=function(object,ignore1,ignore2)
{
var ClassObject=object.__class__;
if(ClassObject&&
(!ignore1||ignore1!=ClassObject)&&
(!ignore2||ignore2!=ClassObject))
{
if(ClassObject.__linkageId)
{
var define=flash.system.ApplicationDomain.get_currentDomain()._getDefine(ClassObject.__linkageId);
if(define)
{
define.linkage(object);
}
else
{
throw new Error("Define '"+ClassObject.__linkageId+"' not founded");
}
}
}
};
flash._base64key="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
flash.encode64=function(input)
{
var output="";
var chr1,chr2,chr3="";
var enc1,enc2,enc3,enc4="";
var i=0;
var keyStr=flash._base64key;
do
{
chr1=input[i++];
chr2=input[i++];
chr3=input[i++];
enc1=chr1>>2;
enc2=((chr1&3)<<4)|(chr2>>4);
enc3=((chr2&15)<<2)|(chr3>>6);
enc4=chr3&63;
if(isNaN(chr2))
{
enc3=enc4=64;
}
else if(isNaN(chr3))
{
enc4=64;
}
output=output+
keyStr.charAt(enc1)+
keyStr.charAt(enc2)+
keyStr.charAt(enc3)+
keyStr.charAt(enc4);
chr1=chr2=chr3="";
enc1=enc2=enc3=enc4="";
}
while(i<input.length);
return output;
}
flash.decode64=function(input)
{
var output=[];
var chr1,chr2,chr3="";
var enc1,enc2,enc3,enc4="";
var i=0;
var keyStr=flash._base64key;
var base64test=/[^A-Za-z0-9\+\/\=]/g;
if(base64test.exec(input))
{
throw new Error("There were invalid base64 characters in the input text");
}
input=input.replace(/[^A-Za-z0-9\+\/\=]/g,"");
do
{
enc1=keyStr.indexOf(input.charAt(i++));
enc2=keyStr.indexOf(input.charAt(i++));
enc3=keyStr.indexOf(input.charAt(i++));
enc4=keyStr.indexOf(input.charAt(i++));
chr1=(enc1<<2)|(enc2>>4);
chr2=((enc2&15)<<4)|(enc3>>2);
chr3=((enc3&3)<<6)|enc4;
output.push(chr1);
if(enc3!=64)
{
output.push(chr2);
}
if(enc4!=64)
{
output.push(chr3);
}
chr1=chr2=chr3="";
enc1=enc2=enc3=enc4="";
}
while(i<input.length);
return output;
}
flash.is=function(instance,ClassObject)
{
if(instance!=null)
{
var type=typeof instance;
switch(type)
{
case"boolean":
return Boolean==ClassObject;
case"number":
return Number==ClassObject;
case"string":
return String==ClassObject;
case"function":
return Function==ClassObject;
case"object":
return instance instanceof ClassObject;
}
}
return false;
};
flash.getProperty=function(object,name)
{
var accessor="get_"+name;
if(object[accessor]!=undefined)
{
return object[accessor]();
}
else
{
return object[name];
}
}
flash.setProperty=function(object,name,value)
{
var accessor="set_"+name;
if(object[accessor]!=undefined)
{
return object[accessor](value);
}
else
{
return object[name]=value;
}
}
flash.correctTopLevel();
flash.correctTypedArrays();
flash.correctArray();
})();;
(function()
{
"use strict";
var d={};
d.get_alphas=function()
{
};
d.set_alphas=function(value)
{
};
d.get_angle=function()
{
};
d.set_angle=function(value)
{
};
d.get_blurX=function()
{
};
d.set_blurX=function(value)
{
};
d.get_blurY=function()
{
};
d.set_blurY=function(value)
{
};
d.get_colors=function()
{
};
d.set_colors=function(value)
{
};
d.get_distance=function()
{
};
d.set_distance=function(value)
{
};
d.get_knockout=function()
{
};
d.set_knockout=function(value)
{
};
d.get_quality=function()
{
};
d.set_quality=function(value)
{
};
d.get_ratios=function()
{
};
d.set_ratios=function(value)
{
};
d.get_strength=function()
{
};
d.set_strength=function(value)
{
};
d.get_type=function()
{
};
d.set_type=function(value)
{
};
d.GradientBevelFilter=function(distance,angle,colors,alphas,ratios,blurX,blurY,strength,quality,type,knockout)
{
this.BitmapFilter_constructor();
if(distance==undefined)distance=4;
if(angle==undefined)angle=45;
if(colors==undefined)colors=null;
if(alphas==undefined)alphas=null;
if(ratios==undefined)ratios=null;
if(blurX==undefined)blurX=4;
if(blurY==undefined)blurY=4;
if(strength==undefined)strength=1;
if(quality==undefined)quality=1;
quality=Math.floor(quality);
if(type==undefined)type="inner";
if(knockout==undefined)knockout=false;
this.set_distance(distance);
this.set_angle(angle);
if(colors!=null)
{
this.set_colors(colors);
}
if(alphas!=null)
{
this.set_alphas(alphas);
}
if(ratios!=null)
{
this.set_ratios(ratios);
}
this.set_blurX(blurX);
this.set_blurY(blurY);
this.set_quality(quality);
this.set_strength(strength);
this.set_type(type);
this.set_knockout(knockout);
return;
};
d.clone=function()
{
return new flash.filters.GradientBevelFilter(this.get_distance(),this.get_angle(),this.get_colors(),this.get_alphas(),this.get_ratios(),this.get_blurX(),this.get_blurY(),this.get_strength(),this.get_quality(),this.get_type(),this.get_knockout());
};
var s={};
s.__init__=function()
{
this.prototype.BitmapFilter_constructor=this.__base__;
};
flash.addDescription("flash.filters.GradientBevelFilter",d,"flash.filters.BitmapFilter",s,null);
}
());;
(function()
{
"use strict";
var d={};
d.get_matrix=function()
{
};
d.set_matrix=function(value)
{
};
d.ColorMatrixFilter=function(matrix)
{
this.BitmapFilter_constructor();
if(matrix==undefined)matrix=null;
if(matrix!=null)
{
this.set_matrix(matrix);
}
return;
};
d.clone=function()
{
return new flash.filters.ColorMatrixFilter(this.get_matrix());
};
var s={};
s.__init__=function()
{
this.prototype.BitmapFilter_constructor=this.__base__;
};
flash.addDescription("flash.filters.ColorMatrixFilter",d,"flash.filters.BitmapFilter",s,null);
}
());;
(function()
{
"use strict";
var s={};
s.__init__=function()
{
this.HIGH=3;
this.LOW=1;
this.MEDIUM=2;
};
flash.addDescription("flash.filters.BitmapFilterQuality",null,null,s,null);
}
());;
(function()
{
"use strict";
var d={};
d.get_angle=function()
{
};
d.set_angle=function(value)
{
};
d.get_blurX=function()
{
};
d.set_blurX=function(value)
{
};
d.get_blurY=function()
{
};
d.set_blurY=function(value)
{
};
d.get_distance=function()
{
};
d.set_distance=function(value)
{
};
d.get_highlightAlpha=function()
{
};
d.set_highlightAlpha=function(value)
{
};
d.get_highlightColor=function()
{
};
d.set_highlightColor=function(value)
{
};
d.get_knockout=function()
{
};
d.set_knockout=function(value)
{
};
d.get_quality=function()
{
};
d.set_quality=function(value)
{
};
d.get_shadowAlpha=function()
{
};
d.set_shadowAlpha=function(value)
{
};
d.get_shadowColor=function()
{
};
d.set_shadowColor=function(value)
{
};
d.get_strength=function()
{
};
d.set_strength=function(value)
{
};
d.get_type=function()
{
};
d.set_type=function(value)
{
};
d.BevelFilter=function(distance,angle,highlightColor,highlightAlpha,shadowColor,shadowAlpha,blurX,blurY,strength,quality,type,knockout)
{
this.BitmapFilter_constructor();
if(distance==undefined)distance=4;
if(angle==undefined)angle=45;
if(highlightColor==undefined)highlightColor=16777215;
highlightColor=Math.floor(highlightColor);
if(highlightAlpha==undefined)highlightAlpha=1;
if(shadowColor==undefined)shadowColor=0;
shadowColor=Math.floor(shadowColor);
if(shadowAlpha==undefined)shadowAlpha=1;
if(blurX==undefined)blurX=4;
if(blurY==undefined)blurY=4;
if(strength==undefined)strength=1;
if(quality==undefined)quality=1;
quality=Math.floor(quality);
if(type==undefined)type="inner";
if(knockout==undefined)knockout=false;
this.set_distance(distance);
this.set_angle(angle);
this.set_highlightColor(highlightColor);
this.set_highlightAlpha(highlightAlpha);
this.set_shadowColor(shadowColor);
this.set_shadowAlpha(shadowAlpha);
this.set_blurX(blurX);
this.set_blurY(blurY);
this.set_quality(quality);
this.set_strength(strength);
this.set_type(type);
this.set_knockout(knockout);
return;
};
d.clone=function()
{
return new flash.filters.BevelFilter(this.get_distance(),this.get_angle(),this.get_highlightColor(),this.get_highlightAlpha(),this.get_shadowColor(),this.get_shadowAlpha(),this.get_blurX(),this.get_blurY(),this.get_strength(),this.get_quality(),this.get_type(),this.get_knockout());
};
var s={};
s.__init__=function()
{
this.prototype.BitmapFilter_constructor=this.__base__;
};
flash.addDescription("flash.filters.BevelFilter",d,"flash.filters.BitmapFilter",s,null);
}
());;
(function()
{
"use strict";
var s={};
s.__init__=function()
{
this.FULL="full";
this.INNER="inner";
this.OUTER="outer";
};
flash.addDescription("flash.filters.BitmapFilterType",null,null,s,null);
}
());;
(function()
{
"use strict";
var d={};
d.get_alpha=function()
{
};
d.set_alpha=function(value)
{
};
d.get_bias=function()
{
};
d.set_bias=function(value)
{
};
d.get_clamp=function()
{
};
d.set_clamp=function(value)
{
};
d.get_color=function()
{
};
d.set_color=function(value)
{
};
d.get_divisor=function()
{
};
d.set_divisor=function(value)
{
};
d.get_matrix=function()
{
};
d.set_matrix=function(value)
{
};
d.get_matrixX=function()
{
};
d.set_matrixX=function(value)
{
};
d.get_matrixY=function()
{
};
d.set_matrixY=function(value)
{
};
d.get_preserveAlpha=function()
{
};
d.set_preserveAlpha=function(value)
{
};
d.ConvolutionFilter=function(matrixX,matrixY,matrix,divisor,bias,preserveAlpha,clamp,color,alpha)
{
this.BitmapFilter_constructor();
if(matrixX==undefined)matrixX=0;
if(matrixY==undefined)matrixY=0;
if(matrix==undefined)matrix=null;
if(divisor==undefined)divisor=1;
if(bias==undefined)bias=0;
if(preserveAlpha==undefined)preserveAlpha=true;
if(clamp==undefined)clamp=true;
if(color==undefined)color=0;
color=Math.floor(color);
if(alpha==undefined)alpha=0;
this.set_matrixX(matrixX);
this.set_matrixY(matrixY);
if(matrix!=null)
{
this.set_matrix(matrix);
}
this.set_divisor(divisor);
this.set_bias(bias);
this.set_preserveAlpha(preserveAlpha);
this.set_clamp(clamp);
this.set_color(color);
this.set_alpha(alpha);
return;
};
d.clone=function()
{
return new flash.filters.ConvolutionFilter(this.get_matrixX(),this.get_matrixY(),this.get_matrix(),this.get_divisor(),this.get_bias(),this.get_preserveAlpha(),this.get_clamp(),this.get_color(),this.get_alpha());
};
var s={};
s.__init__=function()
{
this.prototype.BitmapFilter_constructor=this.__base__;
};
flash.addDescription("flash.filters.ConvolutionFilter",d,"flash.filters.BitmapFilter",s,null);
}
());;
(function()
{
"use strict";
var d={};
d.BitmapFilter=function()
{
};
d.clone=function()
{
return new flash.filters.BitmapFilter();
};
d._toValue=function()
{
return"";
};
d._apply=function(d,w,h)
{
};
d._convolute=function(s,t,w,h,sw,sh,weights,useColor)
{
var hsw=Math.floor(sw/2);
var hsh=Math.floor(sh/2);
var i=0;
var j=0;
var r=0;
var g=0;
var b=0;
var a=0;
var scx=0;
var scy=0;
var x=0;
var y=0;
var cx=0;
var cy=0;
var scx=0;
var scy=0;
var wt=0;
if(useColor)
{
for(y=0;y<h;y++)
{
for(x=0;x<w;x++)
{
i=(y*w+x)*4;
r=g=b=a=0;
for(cy=0;cy<sh;cy++)
{
for(cx=0;cx<sw;cx++)
{
scx=x+cx-hsw;
scy=y+cy-hsh;
if(scy>=0&&scy<h&&scx>=0&&scx<w)
{
j=(scy*w+scx)*4;
wt=weights[cy*sw+cx];
r+=s[j]*wt;
g+=s[j+1]*wt;
b+=s[j+2]*wt;
a+=s[j+3]*wt;
}
}
}
t[i]=r;
t[i+1]=g;
t[i+2]=b;
t[i+3]=a;
}
}
}
else
{
for(y=0;y<h;y++)
{
for(x=0;x<w;x++)
{
i=(y*w+x)*4;
r=g=b=a=0;
for(cy=0;cy<sh;cy++)
{
for(cx=0;cx<sw;cx++)
{
scx=x+cx-hsw;
scy=y+cy-hsh;
if(scy>=0&&scy<h&&scx>=0&&scx<w)
{
j=(scy*w+scx)*4;
wt=weights[cy*sw+cx];
a+=s[j+3]*wt;
}
}
}
t[i+3]=a;
}
}
}
};
d._fastShadow=function(s,width,height,radius,iterations,cr,cg,cb,strength)
{
var rsum,gsum,bsum,asum,x,y,i,p,p1,p2,yp,yi,yw,idx,pa;
var wm=width-1;
var hm=height-1;
var wh=width*height;
var rad1=radius+1;
var mul_sum=flash.filters.BitmapFilter._mul_table[radius];
var shg_sum=flash.filters.BitmapFilter._shg_table[radius];
var r=[];
var g=[];
var b=[];
var a=[];
var vmin=[];
var vmax=[];
var tr=0;
var tg=0;
var tb=0;
var ta=0;
var tm=0;
yw=yi=0;
for(y=0;y<height;y++)
{
asum=s[yw+3]*rad1;
for(i=1;i<=radius;i++)
{
p=yw+(((i>wm?wm:i))<<2)+3;
asum+=s[p];
}
for(x=0;x<width;x++)
{
a[yi]=asum;
if(y==0)
{
vmin[x]=((p=x+rad1)<wm?p:wm)<<2;
vmax[x]=((p=x-radius)>0?p<<2:0);
}
p1=yw+vmin[x]+3;
p2=yw+vmax[x]+3;
asum+=s[p1]-s[p2];
yi++;
}
yw+=(width<<2);
}
for(x=0;x<width;x++)
{
yp=x;
asum=a[yp]*rad1;
for(i=1;i<=radius;i++)
{
yp+=(i>hm?0:width);
asum+=a[yp];
}
yi=x<<2;
for(y=0;y<height;y++)
{
pa=(asum*mul_sum)>>>shg_sum;
if(pa>0)
{
tr=s[yi];
tg=s[yi+1];
tb=s[yi+2];
ta=s[yi+3];
tm=ta/255;
pa=pa*strength;
s[yi]=(tr-cr)*tm+cr;
s[yi+1]=(tg-cg)*tm+cg;
s[yi+2]=(tb-cb)*tm+cb;
s[yi+3]=(ta-pa)*tm+pa;
}
else
{
s[yi]=s[yi+1]=s[yi+2]=s[yi+3]=0;
}
if(x==0)
{
vmin[y]=((p=y+rad1)<hm?p:hm)*width;
vmax[y]=((p=y-radius)>0?p*width:0);
}
p1=x+vmin[y];
p2=x+vmax[y];
asum+=a[p1]-a[p2];
yi+=width<<2;
}
}
}
d._fastBlur=function(s,width,height,radius,iterations)
{
var rsum,gsum,bsum,asum,x,y,i,p,p1,p2,yp,yi,yw,idx,pa;
var wm=width-1;
var hm=height-1;
var wh=width*height;
var rad1=radius+1;
var mul_sum=flash.filters.BitmapFilter._mul_table[radius];
var shg_sum=flash.filters.BitmapFilter._shg_table[radius];
var r=[];
var g=[];
var b=[];
var a=[];
var vmin=[];
var vmax=[];
yw=yi=0;
for(y=0;y<height;y++)
{
rsum=s[yw]*rad1;
gsum=s[yw+1]*rad1;
bsum=s[yw+2]*rad1;
asum=s[yw+3]*rad1;
for(i=1;i<=radius;i++)
{
p=yw+(((i>wm?wm:i))<<2);
rsum+=s[p++];
gsum+=s[p++];
bsum+=s[p++];
asum+=s[p]
}
for(x=0;x<width;x++)
{
r[yi]=rsum;
g[yi]=gsum;
b[yi]=bsum;
a[yi]=asum;
if(y==0)
{
vmin[x]=((p=x+rad1)<wm?p:wm)<<2;
vmax[x]=((p=x-radius)>0?p<<2:0);
}
p1=yw+vmin[x];
p2=yw+vmax[x];
rsum+=s[p1++]-s[p2++];
gsum+=s[p1++]-s[p2++];
bsum+=s[p1++]-s[p2++];
asum+=s[p1]-s[p2];
yi++;
}
yw+=(width<<2);
}
for(x=0;x<width;x++)
{
yp=x;
rsum=r[yp]*rad1;
gsum=g[yp]*rad1;
bsum=b[yp]*rad1;
asum=a[yp]*rad1;
for(i=1;i<=radius;i++)
{
yp+=(i>hm?0:width);
rsum+=r[yp];
gsum+=g[yp];
bsum+=b[yp];
asum+=a[yp];
}
yi=x<<2;
for(y=0;y<height;y++)
{
s[yi+3]=pa=(asum*mul_sum)>>>shg_sum;
if(pa>0)
{
pa=255/pa;
s[yi]=((rsum*mul_sum)>>>shg_sum)*pa;
s[yi+1]=((gsum*mul_sum)>>>shg_sum)*pa;
s[yi+2]=((bsum*mul_sum)>>>shg_sum)*pa;
}
else
{
s[yi]=s[yi+1]=s[yi+2]=0;
}
if(x==0)
{
vmin[y]=((p=y+rad1)<hm?p:hm)*width;
vmax[y]=((p=y-radius)>0?p*width:0);
}
p1=x+vmin[y];
p2=x+vmax[y];
rsum+=r[p1]-r[p2];
gsum+=g[p1]-g[p2];
bsum+=b[p1]-b[p2];
asum+=a[p1]-a[p2];
yi+=width<<2;
}
}
};
d.__getHTMLColor=function()
{
var r=(this._color>>16)&0xff;
var g=(this._color>>8)&0xff;
var b=this._color&0xff;
var a=this._alpha*this._strength;
return'rgba('+r+', '+g+', '+b+', '+a+')';
};
var s={};
s.__init__=function()
{
this._mul_table=[1,57,41,21,203,34,97,73,227,91,149,62,105,45,39,137,241,107,3,173,39,71,65,238,219,101,187,87,81,151,141,133,249,117,221,209,197,187,177,169,5,153,73,139,133,127,243,233,223,107,103,99,191,23,177,171,165,159,77,149,9,139,135,131,253,245,119,231,224,109,211,103,25,195,189,23,45,175,171,83,81,79,155,151,147,9,141,137,67,131,129,251,123,30,235,115,113,221,217,53,13,51,50,49,193,189,185,91,179,175,43,169,83,163,5,79,155,19,75,147,145,143,35,69,17,67,33,65,255,251,247,243,239,59,29,229,113,111,219,27,213,105,207,51,201,199,49,193,191,47,93,183,181,179,11,87,43,85,167,165,163,161,159,157,155,77,19,75,37,73,145,143,141,35,138,137,135,67,33,131,129,255,63,250,247,61,121,239,237,117,29,229,227,225,111,55,109,216,213,211,209,207,205,203,201,199,197,195,193,48,190,47,93,185,183,181,179,178,176,175,173,171,85,21,167,165,41,163,161,5,79,157,78,154,153,19,75,149,74,147,73,144,143,71,141,140,139,137,17,135,134,133,66,131,65,129,1];
this._shg_table=[0,9,10,10,14,12,14,14,16,15,16,15,16,15,15,17,18,17,12,18,16,17,17,19,19,18,19,18,18,19,19,19,20,19,20,20,20,20,20,20,15,20,19,20,20,20,21,21,21,20,20,20,21,18,21,21,21,21,20,21,17,21,21,21,22,22,21,22,22,21,22,21,19,22,22,19,20,22,22,21,21,21,22,22,22,18,22,22,21,22,22,23,22,20,23,22,22,23,23,21,19,21,21,21,23,23,23,22,23,23,21,23,22,23,18,22,23,20,22,23,23,23,21,22,20,22,21,22,24,24,24,24,24,22,21,24,23,23,24,21,24,23,24,22,24,24,22,24,24,22,23,24,24,24,20,23,22,23,24,24,24,24,24,24,24,23,21,23,22,23,24,24,24,22,24,24,24,23,22,24,24,25,23,25,25,23,24,25,25,24,22,25,25,25,24,23,24,25,25,25,25,25,25,25,25,25,25,25,25,23,25,23,24,25,25,25,25,25,25,25,25,25,24,22,25,25,23,25,25,20,24,25,24,25,25,22,24,25,24,25,24,25,25,24,25,25,25,25,22,25,25,25,24,25,24,25,18];
};
flash.addDescription("flash.filters.BitmapFilter",d,null,s,null);
}
());;
(function()
{
"use strict";
var d={};
d._alpha=0;
d._blurX=0;
d._blurY=0;
d._color=0;
d._inner=false;
d._knockout=false;
d._quality=1;
d._strength=1;
d.get_alpha=function()
{
return this._alpha;
};
d.set_alpha=function(value)
{
this._alpha=value;
};
d.get_blurX=function()
{
return this._blurX;
};
d.set_blurX=function(value)
{
this._blurX=value;
};
d.get_blurY=function()
{
return this._blurY;
};
d.set_blurY=function(value)
{
this._blurY=value;
};
d.get_color=function()
{
return this._color;
};
d.set_color=function(value)
{
this._color=value;
};
d.get_inner=function()
{
return this._inner;
};
d.set_inner=function(value)
{
this._inner=value;
};
d.get_knockout=function()
{
return this._knockout;
};
d.set_knockout=function(value)
{
this._knockout=value;
};
d.get_quality=function()
{
return this._quality;
};
d.set_quality=function(value)
{
this._quality=value;
};
d.get_strength=function()
{
return this._strength;
};
d.set_strength=function(value)
{
this._strength=value;
};
d.GlowFilter=function(color,alpha,blurX,blurY,strength,quality,inner,knockout)
{
this.BitmapFilter_constructor();
if(color==undefined)color=16711680;
color=Math.floor(color);
if(alpha==undefined)alpha=1;
if(blurX==undefined)blurX=6;
if(blurY==undefined)blurY=6;
if(strength==undefined)strength=2;
if(quality==undefined)quality=1;
quality=Math.floor(quality);
if(inner==undefined)inner=false;
if(knockout==undefined)knockout=false;
this._color=color;
this._alpha=alpha;
this._blurX=blurX;
this._blurY=blurY;
this._quality=quality;
this._strength=strength;
this._inner=inner;
this._knockout=knockout;
};
d.clone=function()
{
return new flash.filters.GlowFilter(
this._color,
this._alpha,
this._blurX,
this._blurY,
this._strength,
this._quality,
this._inner,
this._knockout
);
};
d._toValue=function()
{
return this._color+"_"+this._alpha+"_"+this._blurX+"_"+this._blurY+"_"+this._strength+"_"+this._quality+"_"+this._inner+"_"+this._knockout;
};
d._apply=function(d,w,h)
{
};
var s={};
s.__init__=function()
{
this.prototype.BitmapFilter_constructor=this.__base__;
};
flash.addDescription("flash.filters.GlowFilter",d,"flash.filters.BitmapFilter",s,null);
}
());;
(function()
{
"use strict";
var s={};
s.__init__=function()
{
this.CLAMP="clamp";
this.COLOR="color";
this.IGNORE="ignore";
this.WRAP="wrap";
};
flash.addDescription("flash.filters.DisplacementMapFilterMode",null,null,s,null);
}
());;
(function()
{
"use strict";
var d={};
d._blurX=0;
d._blurY=0;
d._quality=1;
d.get_blurX=function()
{
return this._blurX;
};
d.set_blurX=function(value)
{
this._blurX=value;
};
d.get_blurY=function()
{
return this._blurY;
};
d.set_blurY=function(value)
{
this._blurY=value;
};
d.get_quality=function()
{
return this._quality;
};
d.set_quality=function(value)
{
this._quality=value;
};
d.BlurFilter=function(blurX,blurY,quality)
{
this.BitmapFilter_constructor();
if(blurX==undefined)blurX=4;
if(blurY==undefined)blurY=4;
if(quality==undefined)quality=1;
quality=Math.floor(quality);
this._blurX=blurX;
this._blurY=blurY;
this._quality=quality;
};
d.clone=function()
{
return new flash.filters.BlurFilter(this._blurX,this._blurY,this._quality);
};
d._toValue=function()
{
return this._blurX+"_"+this._blurY+"_"+this._quality;
};
d._apply=function(d,w,h)
{
if(this._blurX<2||this._blurY<2)return;
this._fastBlur(d,w,h,this._blurX/2,this._quality);
};
var s={};
s.__init__=function()
{
this.prototype.BitmapFilter_constructor=this.__base__;
};
flash.addDescription("flash.filters.BlurFilter",d,"flash.filters.BitmapFilter",s,null);
}
());;
(function()
{
"use strict";
var d={};
d.get_alphas=function()
{
};
d.set_alphas=function(value)
{
};
d.get_angle=function()
{
};
d.set_angle=function(value)
{
};
d.get_blurX=function()
{
};
d.set_blurX=function(value)
{
};
d.get_blurY=function()
{
};
d.set_blurY=function(value)
{
};
d.get_colors=function()
{
};
d.set_colors=function(value)
{
};
d.get_distance=function()
{
};
d.set_distance=function(value)
{
};
d.get_knockout=function()
{
};
d.set_knockout=function(value)
{
};
d.get_quality=function()
{
};
d.set_quality=function(value)
{
};
d.get_ratios=function()
{
};
d.set_ratios=function(value)
{
};
d.get_strength=function()
{
};
d.set_strength=function(value)
{
};
d.get_type=function()
{
};
d.set_type=function(value)
{
};
d.GradientGlowFilter=function(distance,angle,colors,alphas,ratios,blurX,blurY,strength,quality,type,knockout)
{
this.BitmapFilter_constructor();
if(distance==undefined)distance=4;
if(angle==undefined)angle=45;
if(colors==undefined)colors=null;
if(alphas==undefined)alphas=null;
if(ratios==undefined)ratios=null;
if(blurX==undefined)blurX=4;
if(blurY==undefined)blurY=4;
if(strength==undefined)strength=1;
if(quality==undefined)quality=1;
quality=Math.floor(quality);
if(type==undefined)type="inner";
if(knockout==undefined)knockout=false;
this.set_distance(distance);
this.set_angle(angle);
if(colors!=null)
{
this.set_colors(colors);
}
if(alphas!=null)
{
this.set_alphas(alphas);
}
if(ratios!=null)
{
this.set_ratios(ratios);
}
this.set_blurX(blurX);
this.set_blurY(blurY);
this.set_quality(quality);
this.set_strength(strength);
this.set_type(type);
this.set_knockout(knockout);
return;
};
d.clone=function()
{
return new flash.filters.GradientGlowFilter(this.get_distance(),this.get_angle(),this.get_colors(),this.get_alphas(),this.get_ratios(),this.get_blurX(),this.get_blurY(),this.get_strength(),this.get_quality(),this.get_type(),this.get_knockout());
};
var s={};
s.__init__=function()
{
this.prototype.BitmapFilter_constructor=this.__base__;
};
flash.addDescription("flash.filters.GradientGlowFilter",d,"flash.filters.BitmapFilter",s,null);
}
());;
(function()
{
"use strict";
var d={};
d.get_alpha=function()
{
};
d.set_alpha=function(value)
{
};
d.get_color=function()
{
};
d.set_color=function(value)
{
};
d.get_componentX=function()
{
};
d.set_componentX=function(value)
{
};
d.get_componentY=function()
{
};
d.set_componentY=function(value)
{
};
d.get_mapBitmap=function()
{
};
d.set_mapBitmap=function(value)
{
};
d.get_mapPoint=function()
{
};
d.set_mapPoint=function(value)
{
};
d.get_mode=function()
{
};
d.set_mode=function(value)
{
};
d.get_scaleX=function()
{
};
d.set_scaleX=function(value)
{
};
d.get_scaleY=function()
{
};
d.set_scaleY=function(value)
{
};
d.DisplacementMapFilter=function(mapBitmap,mapPoint,componentX,componentY,scaleX,scaleY,mode,color,alpha)
{
this.BitmapFilter_constructor();
if(mapBitmap==undefined)mapBitmap=null;
if(mapPoint==undefined)mapPoint=null;
if(componentX==undefined)componentX=0;
componentX=Math.floor(componentX);
if(componentY==undefined)componentY=0;
componentY=Math.floor(componentY);
if(scaleX==undefined)scaleX=0;
if(scaleY==undefined)scaleY=0;
if(mode==undefined)mode="wrap";
if(color==undefined)color=0;
color=Math.floor(color);
if(alpha==undefined)alpha=0;
if(mapBitmap!=null)
{
this.set_mapBitmap(mapBitmap);
}
if(mapPoint!=null)
{
this.set_mapPoint(mapPoint);
}
this.set_componentX(componentX);
this.set_componentY(componentY);
this.set_scaleX(scaleX);
this.set_scaleY(scaleY);
this.set_mode(mode);
this.set_color(color);
this.set_alpha(alpha);
return;
};
d.clone=function()
{
return new flash.filters.DisplacementMapFilter(this.get_mapBitmap(),this.get_mapPoint(),this.get_componentX(),this.get_componentY(),this.get_scaleX(),this.get_scaleY(),this.get_mode(),this.get_color(),this.get_alpha());
};
var s={};
s.__init__=function()
{
this.prototype.BitmapFilter_constructor=this.__base__;
};
flash.addDescription("flash.filters.DisplacementMapFilter",d,"flash.filters.BitmapFilter",s,null);
}
());;
(function()
{
"use strict";
var d={};
d._alpha=0;
d._angle=0;
d._blurX=0;
d._blurY=0;
d._color=0;
d._inner=false;
d._knockout=false;
d._hideObject=false;
d._quality=1;
d._strength=1;
d._distance=0;
d.get_alpha=function()
{
return this._alpha;
};
d.set_alpha=function(value)
{
this._alpha=value;
};
d.get_angle=function()
{
return this._angle;
};
d.set_angle=function(value)
{
this._angle=value;
};
d.get_blurX=function()
{
return this._blurX;
};
d.set_blurX=function(value)
{
this._blurX=value;
};
d.get_blurY=function()
{
return this._blurY;
};
d.set_blurY=function(value)
{
this._blurY=value;
};
d.get_color=function()
{
return this._color;
};
d.set_color=function(value)
{
this._color=value;
};
d.get_distance=function()
{
return this._distance;
};
d.set_distance=function(value)
{
this._distance=value;
};
d.get_hideObject=function()
{
return this._hideObject;
};
d.set_hideObject=function(value)
{
this._hideObject=value;
};
d.get_inner=function()
{
return this._inner;
};
d.set_inner=function(value)
{
this._inner=value;
};
d.get_knockout=function()
{
return this._knockout;
};
d.set_knockout=function(value)
{
this._knockout=value;
};
d.get_quality=function()
{
return this._quality;
};
d.set_quality=function(value)
{
this._quality=value;
};
d.get_strength=function()
{
return this._strength;
};
d.set_strength=function(value)
{
this._strength=value;
};
d.DropShadowFilter=function(distance,angle,color,alpha,blurX,blurY,strength,quality,inner,knockout,hideObject)
{
this.BitmapFilter_constructor();
if(distance==undefined)distance=4;
if(angle==undefined)angle=45;
if(color==undefined)color=0;
color=Math.floor(color);
if(alpha==undefined)alpha=1;
if(blurX==undefined)blurX=4;
if(blurY==undefined)blurY=4;
if(strength==undefined)strength=1;
if(quality==undefined)quality=1;
quality=Math.floor(quality);
if(inner==undefined)inner=false;
if(knockout==undefined)knockout=false;
if(hideObject==undefined)hideObject=false;
this._distance=distance;
this._angle=angle;
this._color=color;
this._alpha=alpha;
this._blurX=blurX;
this._blurY=blurY;
this._quality=quality;
this._strength=strength;
this._inner=inner;
this._knockout=knockout;
this._hideObject=hideObject;
};
d.clone=function()
{
return new flash.filters.DropShadowFilter(
this._distance,
this._angle,
this._color,
this._alpha,
this._blurX,
this._blurY,
this._strength,
this._quality,
this._inner,
this._knockout,
this._hideObject
);
};
var s={};
s.__init__=function()
{
this.prototype.BitmapFilter_constructor=this.__base__;
};
flash.addDescription("flash.filters.DropShadowFilter",d,"flash.filters.BitmapFilter",s,null);
}
());;
(function()
{
"use strict";
var d={};
d.get_caption=function()
{
};
d.set_caption=function(value)
{
};
d.get_enabled=function()
{
};
d.set_enabled=function(value)
{
};
d.get_separatorBefore=function()
{
};
d.set_separatorBefore=function(value)
{
};
d.get_visible=function()
{
};
d.set_visible=function(value)
{
};
d.ContextMenuItem=function(caption,separatorBefore,enabled,visible)
{
this.EventDispatcher_constructor();
if(separatorBefore==undefined)separatorBefore=false;
if(enabled==undefined)enabled=true;
if(visible==undefined)visible=true;
this.set_caption(caption);
this.set_separatorBefore(separatorBefore);
this.set_enabled(enabled);
this.set_visible(visible);
return;
};
d.clone=function()
{
return new flash.ui.ContextMenuItem(this.get_caption(),this.get_separatorBefore(),this.get_enabled(),this.get_visible());
};
var s={};
s.__init__=function()
{
this.prototype.EventDispatcher_constructor=this.__base__;
};
flash.addDescription("flash.ui.ContextMenuItem",d,"flash.events.EventDispatcher",s,null);
}
());;
(function()
{
"use strict";
var s={};
s.__init__=function()
{
this.LEFT=1;
this.NUM_PAD=3;
this.RIGHT=2;
this.STANDARD=0;
};
flash.addDescription("flash.ui.KeyLocation",null,null,s,null);
}
());;
(function()
{
"use strict";
var d={};
d.forwardAndBack=true;
d.loop=true;
d.play=true;
d.print=true;
d.quality=true;
d.rewind=true;
d.save=true;
d.zoom=true;
d.ContextMenuBuiltInItems=function()
{
this.save=true;
this.zoom=true;
this.quality=true;
this.play=true;
this.loop=true;
this.rewind=true;
this.forwardAndBack=true;
this.print=true;
return;
};
d.clone=function()
{
var _loc_1=null;
_loc_1=new flash.ui.ContextMenuBuiltInItems();
_loc_1.save=this.save;
_loc_1.zoom=this.zoom;
_loc_1.quality=this.quality;
_loc_1.play=this.play;
_loc_1.loop=this.loop;
_loc_1.rewind=this.rewind;
_loc_1.forwardAndBack=this.forwardAndBack;
_loc_1.print=this.print;
return _loc_1;
};
flash.addDescription("flash.ui.ContextMenuBuiltInItems",d,null,null,null);
}
());;
(function()
{
"use strict";
var d={};
d.get_builtInItems=function()
{
return null;
};
d.set_builtInItems=function(value)
{
};
d.get_customItems=function()
{
return null;
};
d.set_customItems=function(value)
{
};
d.ContextMenu=function()
{
this.EventDispatcher_constructor();
this.set_builtInItems(new flash.ui.ContextMenuBuiltInItems());
this.set_customItems(new Array());
};
d.clone=function()
{
return null;
};
d.hideBuiltInItems=function()
{
this.get_builtInItems().save=false;
this.get_builtInItems().zoom=false;
this.get_builtInItems().quality=false;
this.get_builtInItems().play=false;
this.get_builtInItems().loop=false;
this.get_builtInItems().rewind=false;
this.get_builtInItems().forwardAndBack=false;
this.get_builtInItems().print=false;
};
var s={};
s.__init__=function()
{
this.prototype.EventDispatcher_constructor=this.__base__;
};
flash.addDescription("flash.ui.ContextMenu",d,"flash.events.EventDispatcher",s,null);
}
());;
(function()
{
"use strict";
var s={};
s.__init__=function()
{
this.BACKSPACE=8;
this.CAPS_LOCK=20;
this.CONTROL=17;
this.DELETE=46;
this.DOWN=40;
this.END=35;
this.ENTER=13;
this.ESCAPE=27;
this.F1=112;
this.F10=121;
this.F11=122;
this.F12=123;
this.F13=124;
this.F14=125;
this.F15=126;
this.F2=113;
this.F3=114;
this.F4=115;
this.F5=116;
this.F6=117;
this.F7=118;
this.F8=119;
this.F9=120;
this.HOME=36;
this.INSERT=45;
this.LEFT=37;
this.NUMPAD_0=96;
this.NUMPAD_1=97;
this.NUMPAD_2=98;
this.NUMPAD_3=99;
this.NUMPAD_4=100;
this.NUMPAD_5=101;
this.NUMPAD_6=102;
this.NUMPAD_7=103;
this.NUMPAD_8=104;
this.NUMPAD_9=105;
this.NUMPAD_ADD=107;
this.NUMPAD_DECIMAL=110;
this.NUMPAD_DIVIDE=111;
this.NUMPAD_ENTER=108;
this.NUMPAD_MULTIPLY=106;
this.NUMPAD_SUBTRACT=109;
this.PAGE_DOWN=34;
this.PAGE_UP=33;
this.RIGHT=39;
this.SHIFT=16;
this.SPACE=32;
this.TAB=9;
this.UP=38;
};
s.get_capsLock=function()
{
};
s.get_numLock=function()
{
};
s.isAccessible=function()
{
};
flash.addDescription("flash.ui.Keyboard",null,null,s,null);
}
());;
(function()
{
"use strict";
var s={};
s.hide=function()
{
};
s.show=function()
{
};
flash.addDescription("flash.ui.Mouse",null,null,s,null);
}
());;(function()
{
"use strict";
flash.createPackage("flash.net");
flash.net.navigateToURL=function(request,type)
{
if(request)
{
switch(type)
{
case"_self":
window.location.href=request.get_url();
break;
case"_blank":
case"_parent":
case"_top":
default:
window.open(request.get_url());
break;
}
}
else
{
throw new Error("Request must not be null.");
}
};
}
());;
(function()
{
"use strict";
var d={};
d.get_bytesAvailable=function()
{
};
d.get_connected=function()
{
};
d.get_endian=function()
{
};
d.set_endian=function(type)
{
};
d.get_objectEncoding=function()
{
};
d.set_objectEncoding=function(version)
{
};
d.URLStream=function()
{
this.EventDispatcher_constructor();
return;
};
d.close=function()
{
};
d.load=function(request)
{
};
d.readBoolean=function()
{
};
d.readByte=function()
{
};
d.readBytes=function(bytes,offset,length)
{
};
d.readDouble=function()
{
};
d.readFloat=function()
{
};
d.readInt=function()
{
};
d.readMultiByte=function(length,charSet)
{
};
d.readObject=function()
{
};
d.readShort=function()
{
};
d.readUTF=function()
{
};
d.readUTFBytes=function(length)
{
};
d.readUnsignedByte=function()
{
};
d.readUnsignedInt=function()
{
};
d.readUnsignedShort=function()
{
};
var s={};
s.__init__=function()
{
this.prototype.EventDispatcher_constructor=this.__base__;
}
flash.addDescription("flash.net.URLStream",d,"flash.events.EventDispatcher",s,["flash.utils.IDataInput"]);
}
());;
(function()
{
"use strict";
var d={};
d.get_creationDate=function()
{
};
d.get_creator=function()
{
};
d.get_modificationDate=function()
{
};
d.get_name=function()
{
};
d.get_size=function()
{
};
d.get_type=function()
{
};
d.FileReference=function()
{
this.EventDispatcher_constructor();
return;
};
d.browse=function(typeFilter)
{
};
d.cancel=function()
{
};
d.download=function(request,defaultFileName)
{
};
d.upload=function(request,uploadDataFieldName,testUpload)
{
};
var s={};
s.__init__=function()
{
this.prototype.EventDispatcher_constructor=this.__base__;
}
flash.addDescription("flash.net.FileReference",d,"flash.events.EventDispatcher",s,null);
}
());;
(function()
{
"use strict";
var d={};
d._contentType='application/x-www-form-urlencoded';
d._data=null;
d._method="get";
d._headers=null;
d._url=null;
d.get_contentType=function()
{
return this._contentType;
};
d.set_contentType=function(value)
{
this._contentType=value;
return value;
};
d.get_data=function()
{
return this._data;
};
d.set_data=function(value)
{
this._data=value;
return value;
};
d.get_digest=function()
{
return null;
};
d.set_digest=function(value)
{
};
d.get_method=function()
{
return this._method;
};
d.set_method=function(value)
{
this._method=value;
return value;
};
d.get_requestHeaders=function()
{
return this._headers;
};
d.set_requestHeaders=function(value)
{
this._headers=value;
return value;
};
d.get_url=function()
{
return this._url;
};
d.set_url=function(value)
{
this._url=value;
return value;
};
d.get_name=function()
{
if(!this._url)return null;
var base=this._url.split("?");
var parts=base[0].split("/");
var name=parts[parts.length-1];
return name.split(".")[0];
};
d.get_extension=function()
{
if(!this._url)return null;
var base=this._url.split("?");
var parts=base[0].split(".");
var name=parts[parts.length-1].split(".");
return name[0];
};
d.set_extension=function(value)
{
if(!this._url)return;
var base=this._url.split("?");
var parts=base[0].split(".");
parts[parts.length-1]=value;
this._url=parts.join(".")+(base.length>1?"?"+base[1]:"");
};
d.URLRequest=function(url)
{
this._data=null;
this._headers=[];
if(url)
{
this.set_url(url);
}
};
flash.addDescription("flash.net.URLRequest",d,null,null,null);
}
());;
(function()
{
"use strict";
var d={};
d.name=null;
d.value=null;
d.URLRequestHeader=function(name,value)
{
this.name=name==undefined?"":name;
this.value=value==undefined?"":value;
};
flash.addDescription("flash.net.URLRequestHeader",d,null,null,null);
}
());;
(function()
{
"use strict";
var d={};
d.get_client=function()
{
};
d.set_client=function(client)
{
};
d.get_domain=function()
{
};
d.LocalConnection=function()
{
this.EventDispatcher_constructor();
return;
};
d.allowDomain=function()
{
};
d.allowInsecureDomain=function()
{
};
d.close=function()
{
};
d.connect=function(connectionName)
{
};
d.send=function(connectionName,methodName)
{
};
var s={};
s.__init__=function()
{
this.prototype.EventDispatcher_constructor=this.__base__;
}
flash.addDescription("flash.net.LocalConnection",d,"flash.events.EventDispatcher",s,null);
}
());;
(function()
{
"use strict";
var d={};
d.get_client=function()
{
};
d.set_client=function(object)
{
};
d.get_connected=function()
{
};
d.get_connectedProxyType=function()
{
};
d.get_objectEncoding=function()
{
};
d.set_objectEncoding=function(version)
{
};
d.get_proxyType=function()
{
};
d.set_proxyType=function(ptype)
{
};
d.get_uri=function()
{
};
d.get_usingTLS=function()
{
};
d.NetConnection=function()
{
this.EventDispatcher_constructor();
};
d.addHeader=function(operation,mustUnderstand,param)
{
if(mustUnderstand==undefined)mustUnderstand=false;
if(param==undefined)param=null;
};
d.call=function(command,responder)
{
var args=Array.prototype.slice.call(arguments,2);
};
d.close=function()
{
};
d.connect=function(command)
{
};
d.invoke=function(index)
{
};
d.invokeWithArgsArray=function(index,args)
{
};
var s={};
s.__init__=function()
{
this.prototype.EventDispatcher_constructor=this.__base__;
this.kAddHeader=3;
this.kCall=2;
this.kClose=1;
this.kConnect=0;
this.kGetConnectedProxyType=4;
this.kGetUsingTLS=5;
};
s.get_defaultObjectEncoding=function()
{
};
s.set_defaultObjectEncoding=function(version)
{
};
flash.addDescription("flash.net.NetConnection",d,"flash.events.EventDispatcher",s,null);
}
());;
(function()
{
"use strict";
var d={};
d._data={};
d.get_client=function()
{
};
d.set_client=function(object)
{
};
d.get_data=function()
{
return this._data;
};
d.set_fps=function(updatesPerSecond)
{
this.invoke(flash.net.SharedObject.kSetFps,updatesPerSecond);
};
d.get_objectEncoding=function()
{
};
d.set_objectEncoding=function(version)
{
};
d.get_size=function()
{
return Math.floor(this.invoke(flash.net.SharedObject.kGetSize));
};
d.SharedObject=function()
{
this.EventDispatcher_constructor();
};
d.clear=function()
{
this.invoke(flash.net.SharedObject.kClear);
};
d.close=function()
{
this.invoke(flash.net.SharedObject.kClose);
};
d.connect=function(myConnection,params)
{
if(params==undefined)params=null;
if(!Boolean(this.invoke(flash.net.SharedObject.kConnect,myConnection,params)))
{
throw new Error(2139);
}
};
d.flush=function(minDiskSpace)
{
};
d.invoke=function(index)
{
};
d.invokeWithArgsArray=function(index,args)
{
};
d.send=function()
{
var args=Array.prototype.slice.call(arguments,0);
this.invokeWithArgsArray(flash.net.SharedObject.kSend,args);
};
d.setDirty=function(propertyName)
{
};
d.setProperty=function(propertyName,value)
{
if(value==undefined)value=null;
if(this.get_data()[propertyName]!=value)
{
this.get_data()[propertyName]=value;
this.setDirty(propertyName);
}
};
var s={};
s.__init__=function()
{
this.prototype.EventDispatcher_constructor=this.__base__;
this.kClear=6;
this.kClose=3;
this.kConnect=0;
this.kFlush=2;
this.kGetSize=4;
this.kSend=1;
this.kSetFps=5;
};
s.get_defaultObjectEncoding=function()
{
};
s.set_defaultObjectEncoding=function(version)
{
};
s.deleteAll=function(url)
{
};
s.getDiskUsage=function(url)
{
};
s.getLocal=function(name,localPath,secure)
{
return new flash.net.SharedObject();
};
s.getRemote=function(name,remotePath,persistence,secure)
{
};
flash.addDescription("flash.net.SharedObject",d,"flash.events.EventDispatcher",s,null);
}
());;
(function()
{
"use strict";
var d={};
d.get_bytesAvailable=function()
{
};
d.get_connected=function()
{
};
d.get_endian=function()
{
};
d.set_endian=function(type)
{
};
d.get_objectEncoding=function()
{
};
d.set_objectEncoding=function(version)
{
};
d.Socket=function(host,port)
{
this.EventDispatcher_constructor();
if(host==undefined)host=null;
if(port==undefined)port=0;
port=Math.floor(port);
if(host!=null)
{
this.connect(host,port);
}
return;
};
d.close=function()
{
};
d.connect=function(host,port)
{
};
d.flush=function()
{
};
d.readBoolean=function()
{
};
d.readByte=function()
{
};
d.readBytes=function(bytes,offset,length)
{
};
d.readDouble=function()
{
};
d.readFloat=function()
{
};
d.readInt=function()
{
};
d.readMultiByte=function(length,charSet)
{
};
d.readObject=function()
{
};
d.readShort=function()
{
};
d.readUTF=function()
{
};
d.readUTFBytes=function(length)
{
};
d.readUnsignedByte=function()
{
};
d.readUnsignedInt=function()
{
};
d.readUnsignedShort=function()
{
};
d.writeBoolean=function(value)
{
};
d.writeByte=function(value)
{
};
d.writeBytes=function(bytes,offset,length)
{
};
d.writeDouble=function(value)
{
};
d.writeFloat=function(value)
{
};
d.writeInt=function(value)
{
};
d.writeMultiByte=function(value,charSet)
{
};
d.writeObject=function(object)
{
};
d.writeShort=function(value)
{
};
d.writeUTF=function(value)
{
};
d.writeUTFBytes=function(value)
{
};
d.writeUnsignedInt=function(value)
{
};
var s={};
s.__init__=function()
{
this.prototype.EventDispatcher_constructor=this.__base__;
}
flash.addDescription("flash.net.Socket",d,"flash.events.EventDispatcher",null,["flash.utils.IDataInput","flash.utils.IDataOutput"]);
}
());;
(function()
{
"use strict";
var d={};
d.get_fileList=function()
{
};
d.FileReferenceList=function()
{
this.EventDispatcher_constructor();
return;
};
d.browse=function(typeFilter)
{
};
var s={};
s.__init__=function()
{
this.prototype.EventDispatcher_constructor=this.__base__;
}
flash.addDescription("flash.net.FileReferenceList",d,"flash.events.EventDispatcher",s,null);
}
());;
(function()
{
"use strict";
var d={};
d.get_description=function()
{
};
d.set_description=function(value)
{
};
d.get_extension=function()
{
};
d.set_extension=function(value)
{
};
d.get_macType=function()
{
};
d.set_macType=function(value)
{
};
d.FileFilter=function(description,extension,macType)
{
if(macType==undefined)macType=null;
this.set_description(description);
this.set_extension(extension);
this.set_macType(macType);
return;
};
flash.addDescription("flash.net.FileFilter",d,null,null,null);
}
());;
(function()
{
"use strict";
var d={};
d.Responder=function(result,status)
{
};
flash.addDescription("flash.net.Responder",d,null,null,null);
}
());;
(function()
{
"use strict";
var s={};
s.__init__=function()
{
this.GET="GET";
this.POST="POST";
};
flash.addDescription("flash.net.URLRequestMethod",null,null,s,null);
}
());;
(function()
{
"use strict";
var s={};
s.__init__=function()
{
this.AMF0=0;
this.AMF3=3;
this.DEFAULT=3;
};
s.get_dynamicPropertyWriter=function()
{
};
s.set_dynamicPropertyWriter=function(object)
{
};
flash.addDescription("flash.net.ObjectEncoding",null,null,s,null);
}
());;
(function()
{
"use strict";
var d={};
d.get_connected=function()
{
};
d.XMLSocket=function(host,port)
{
this.EventDispatcher_constructor();
if(host==undefined)host=null;
if(port==undefined)port=0;
port=Math.floor(port);
if(host!=null)
{
this.connect(host,port);
}
return;
};
d.close=function()
{
};
d.connect=function(host,port)
{
};
d.send=function(object)
{
};
var s={};
s.__init__=function()
{
this.prototype.EventDispatcher_constructor=this.__base__;
}
flash.addDescription("flash.net.XMLSocket",d,"flash.events.EventDispatcher",s,null);
}
());;
(function()
{
"use strict";
var d={};
d.bytesLoaded=0;
d.bytesTotal=0;
d.data=null;
d.dataFormat="text";
d._jsRequest=null;
d._request=null;
d.URLLoader=function(request)
{
this.EventDispatcher_constructor();
if(request==undefined)request=null;
if(request!=null)
{
this.load(request);
}
};
d.close=function()
{
if(this._jsRequest)
{
this._jsRequest.abort();
}
};
d.load=function(request)
{
this._request=request;
this._jsRequest=new XMLHttpRequest();
this.dispatchEvent(new flash.events.Event(flash.events.Event.OPEN));
this._jsRequest.addEventListener('readystatechange',flash.bindFunction(this,this._statusChange),false);
this._jsRequest.addEventListener("progress",flash.bindFunction(this,this._updateProgress),false);
this._jsRequest.addEventListener("load",flash.bindFunction(this,this._complete),false);
var url=request.get_url();
if(!url)
{
this.dispatchEvent(new flash.events.IOErrorEvent(flash.events.IOErrorEvent.IO_ERROR));
return;
}
var data=request.get_data()?request.get_data().toString():null;
if(request.get_method()==flash.net.URLRequestMethod.GET&&data)
{
url+="?"+data;
}
this._jsRequest.open(request.get_method(),url,true);
if(this.dataFormat==flash.net.URLLoaderDataFormat.TEXT||
this.dataFormat==flash.net.URLLoaderDataFormat.VARIABLES)
{
this._jsRequest.responseType="text";
}
else if(this.dataFormat==flash.net.URLLoaderDataFormat.BINARY)
{
this._jsRequest.responseType="arraybuffer";
}
this._jsRequest.setRequestHeader("Content-Type",request.get_contentType());
this._setHeaders();
if(request.get_method()==flash.net.URLRequestMethod.GET)
{
this._jsRequest.send(null);
}
else
{
this._jsRequest.send(data);
}
};
d._updateProgress=function(e)
{
this.bytesLoaded=e.loaded;
this.bytesTotal=e.total;
this.dispatchEvent(new flash.events.ProgressEvent(flash.events.ProgressEvent.PROGRESS,false,false,this.bytesLoaded,this.bytesTotal));
}
d._complete=function(e)
{
if(this.dataFormat==flash.net.URLLoaderDataFormat.TEXT)
{
this.data=this._jsRequest.responseText;
}
if(this.dataFormat==flash.net.URLLoaderDataFormat.BINARY)
{
this.data=this._jsRequest.response;
}
if(!this.data)
{
if(this._jsRequest.response)
{
this.data=this._jsRequest.response;
}
else if(this._jsRequest.responseText)
{
this.data=this._jsRequest.responseText;
}
}
if(this.dataFormat==flash.net.URLLoaderDataFormat.VARIABLES)
{
var data=this._jsRequest.responseText.split("&");
this.data={};
for(var i=0;i<data.length;i++)
{
var variable=data[i].split("=");
this.data[variable[0]]=variable[1];
}
}
this.dispatchEvent(new flash.events.HTTPStatusEvent(flash.events.HTTPStatusEvent.HTTP_STATUS,false,false,e.status,false));
this.dispatchEvent(new flash.events.Event(flash.events.Event.COMPLETE,false,false,e.status,false));
};
d._statusChange=function(e)
{
this.dispatchEvent(new flash.events.HTTPStatusEvent(flash.events.HTTPStatusEvent.HTTP_STATUS,false,false,e.status,false));
if(this._jsRequest.readyState==4&&this._jsRequest.status!=200)
{
this.dispatchEvent(new flash.events.IOErrorEvent(flash.events.IOErrorEvent.IO_ERROR));
}
};
d._setHeaders=function()
{
var headers=this._request.get_requestHeaders();
if(headers.length>0)
{
for(var i=0;i<headers.length;i++)
{
this._jsRequest.setRequestHeader(headers[i].header,headers[i].value);
}
}
};
var s={};
s.__init__=function()
{
this.prototype.EventDispatcher_constructor=this.__base__;
}
flash.addDescription("flash.net.URLLoader",d,"flash.events.EventDispatcher",s,null);
}
());;
(function()
{
"use strict";
var d={};
d.get_audioCodec=function()
{
};
d.get_bufferLength=function()
{
};
d.get_bufferTime=function()
{
};
d.set_bufferTime=function(bufferTime)
{
};
d.get_bytesLoaded=function()
{
};
d.get_bytesTotal=function()
{
};
d.get_checkPolicyFile=function()
{
};
d.set_checkPolicyFile=function(state)
{
};
d.get_client=function()
{
};
d.set_client=function(object)
{
};
d.get_currentFPS=function()
{
};
d.get_decodedFrames=function()
{
};
d.get_liveDelay=function()
{
};
d.get_objectEncoding=function()
{
};
d.get_soundTransform=function()
{
};
d.set_soundTransform=function(sndTransform)
{
};
d.get_time=function()
{
};
d.get_videoCodec=function()
{
};
d.NetStream=function(connection)
{
this.EventDispatcher_constructor();
};
d.attachAudio=function(microphone)
{
};
d.attachCamera=function(theCamera,snapshotMilliseconds)
{
if(snapshotMilliseconds==undefined)snapshotMilliseconds=-1;
snapshotMilliseconds=Math.floor(snapshotMilliseconds);
};
d.call=function(stream,command,responder)
{
var args=Array.prototype.slice.call(arguments,3);
};
d.close=function()
{
};
d.construct=function(connection)
{
};
d.invoke=function(index)
{
};
d.invokeWithArgsArray=function(index,p_arguments)
{
};
d.onResult=function(streamId)
{
};
d.onStatus=function(info)
{
};
d.pause=function()
{
};
d.play=function()
{
};
d.publish=function(name,type)
{
if(name==undefined)name=null;
if(type==undefined)type=null;
};
d.receiveAudio=function(flag)
{
};
d.receiveVideo=function(flag)
{
};
d.receiveVideoFPS=function(FPS)
{
};
d.resume=function()
{
};
d.seek=function(offset)
{
};
d.send=function(handlerName)
{
var args=Array.prototype.slice.call(arguments,1);
};
d.togglePause=function()
{
};
var s={};
s.__init__=function()
{
this.prototype.EventDispatcher_constructor=this.__base__;
this.kAttachAudio=1;
this.kAttachVideo=2;
this.kCall=202;
this.kClose=0;
this.kGetAudioCodecID=313;
this.kGetBufferLength=303;
this.kGetBufferTime=302;
this.kGetBytesLoaded=305;
this.kGetBytesTotal=306;
this.kGetCurrentFps=301;
this.kGetLiveDelay=304;
this.kGetTime=300;
this.kGetTotalFrames=307;
this.kGetVideoCodecID=311;
this.kSend=3;
this.kSetAudioCodecID=314;
this.kSetBufferTime=4;
this.kSetTotalFrames=308;
this.kSetVideoCodecID=312;
};
flash.addDescription("flash.net.NetStream",d,"flash.events.EventDispatcher",s,null);
}
());;
(function()
{
"use strict";
var d={};
d.URLVariables=function(source)
{
if(source)
{
this.decode(source);
}
};
d.decode=function(source)
{
var list=source.split("&");
for(var i=0;i<list.length;i++)
{
var property=list[i].split("=");
var name=property[0];
var value=property.length>1?property[1]:"";
this[name]=value;
}
};
d.toString=function()
{
var list=[];
for(var name in this)
{
var value=this[name];
var type=typeof value;
if(type=="string"||type=="number"||type=="boolean")
{
list.push(name+"="+encodeURIComponent(value));
}
}
return list.join("&");
};
flash.addDescription("flash.net.URLVariables",d,null,null,null);
}
());;
(function()
{
"use strict";
var s={};
s.__init__=function()
{
this.BINARY="binary";
this.TEXT="text";
this.VARIABLES="variables";
};
flash.addDescription("flash.net.URLLoaderDataFormat",null,null,s,null);
}
());;
(function()
{
"use strict";
var s={};
s.__init__=function()
{
this.FLUSHED="flushed";
this.PENDING="pending";
};
flash.addDescription("flash.net.SharedObjectFlushStatus",null,null,s,null);
}
());;
(function()
{
"use strict";
var d={};
d._value=null;
d.XML=function(value)
{
if(value)
{
var xml=new flash.xml.XMLDocument();
xml.ignoreWhite=XML._settings.ignoreWhitespace;
xml.parseXML(value);
this._value=xml.firstChild;
}
};
d.addNamespace=function(ns)
{
};
d.appendChild=function(child)
{
};
d.attribute=function(name,value)
{
if(this._value)
{
var object=this._value.get_attributes();
if(value!=undefined)
{
object[name]=value;
}
return object[name];
}
return null;
};
d.attributes=function()
{
var list=new XMLList();
if(this._value)
{
var object=this._value.get_attributes();
var i=0;
for(var name in object)
{
list[i]=object[name];
i++;
}
}
return list;
};
d.child=function(name)
{
var list=new XMLList();
if(this._value)
{
var array=this._value.get_childNodes();
var j=0;
for(var i in array)
{
var node=array[i];
if(node.nodeName==name)
{
list[j]=new XML(node.toString());
j++;
}
}
}
return list;
};
d.childIndex=function()
{
return 0;
};
d.children=function()
{
var list=new XMLList();
if(this._value)
{
var array=this._value.get_childNodes();
for(var i in array)
{
var node=array[i];
list[i]=new XML(node.toString());
}
}
return list;
};
d.comments=function()
{
};
d.contains=function(value)
{
};
d.copy=function()
{
return new XML(this.toXMLString());
};
d.descendants=function(name)
{
var list=new XMLList();
if(this._value)
{
var array=[];
this._getDescendants(this._value,name,array);
for(var i in array)
{
var node=array[i];
list[i]=new XML(node.toString());
}
}
return list;
};
d._getDescendants=function(xml,name,array)
{
var nodes=xml.get_childNodes();
for(var i in nodes)
{
var node=nodes[i];
if(node.nodeName==name)
{
array.push(node);
}
this._getDescendants(node,name,array);
}
}
d.elements=function(name)
{
if(name==undefined)name="*";
};
d.hasComplexContent=function()
{
};
d.hasSimpleContent=function()
{
};
d.inScopeNamespaces=function()
{
};
d.insertChildAfter=function(child1,child2)
{
};
d.insertChildBefore=function(child1,child2)
{
};
d.length=function()
{
return this._value?this._value.get_childNodes().length:0;
};
d.localName=function()
{
};
d.name=function()
{
return this._value?this._value.nodeName:null;
};
d.namespace=function(prefix)
{
if(prefix==undefined)prefix=null;
};
d.namespaceDeclarations=function()
{
};
d.nodeKind=function()
{
};
d.normalize=function()
{
};
d.notification=function()
{
};
d.parent=function()
{
};
d.prependChild=function(value)
{
};
d.processingInstructions=function(name)
{
if(name==undefined)name="*";
};
d.propertyIsEnumerable=function(P)
{
if(P==undefined)P=null;
};
d.removeNamespace=function(ns)
{
};
d.replace=function(propertyName,value)
{
};
d.setChildren=function(value)
{
};
d.setLocalName=function(name)
{
};
d.setName=function(name)
{
};
d.setNamespace=function(ns)
{
};
d.setNotification=function(f)
{
};
d.text=function()
{
};
d.toXMLString=function()
{
return this._value?this._value.toString():"";
};
d.toString=function()
{
if(this._value)
{
if(this._value.nodeValue)
{
return this._value.nodeValue;
}
else
{
return this.children().toString();
}
}
else
{
return"";
}
};
d.valueOf=function()
{
return this;
};
var s={};
s.get_ignoreComments=function()
{
return this._settings.ignoreComments;
};
s.set_ignoreComments=function(value)
{
this._settings.ignoreComments=value;
return value;
};
s.get_ignoreProcessingInstructions=function()
{
return this._settings.ignoreProcessingInstructions;
};
s.set_ignoreProcessingInstructions=function(value)
{
this._settings.ignoreProcessingInstructions=value;
return value;
};
s.get_ignoreWhitespace=function()
{
return this._settings.ignoreWhitespace;
};
s.set_ignoreWhitespace=function(value)
{
this._settings.ignoreWhitespace=value;
return value;
};
s.get_prettyIndent=function()
{
return this._settings.prettyIndent;
};
s.set_prettyIndent=function(value)
{
this._settings.prettyIndent=flash.int(value);
return value;
};
s.get_prettyPrinting=function()
{
return this._settings.prettyPrinting;
};
s.set_prettyPrinting=function(value)
{
this._settings.prettyPrinting=value;
return value;
};
s.defaultSettings=function()
{
return this._defaultSettings;
};
s.settings=function()
{
return this._settings;
};
s.setSettings=function(value)
{
if(value!=null)
{
this._settings={
ignoreComments:value.ignoreComments,
ignoreProcessingInstructions:value.ignoreProcessingInstructions,
ignoreWhitespace:value.ignoreWhitespace,
prettyIndent:value.prettyIndent,
prettyPrinting:value.prettyPrinting
};
}
};
s.__init__=function()
{
this._defaultSettings={
ignoreComments:true,
ignoreProcessingInstructions:true,
ignoreWhitespace:true,
prettyIndent:2,
prettyPrinting:true
};
this._settings=null;
this.setSettings(this._defaultSettings);
};
flash.addDescription("XML",d,null,s,null,null);
}
());;
(function()
{
"use strict";
var d={};
d.get_orientation=function()
{
return this.invoke(flash.printing.PrintJob.kGetOrientation);
};
d.get_pageHeight=function()
{
return this.invoke(flash.printing.PrintJob.kGetPageHeight);
};
d.get_pageWidth=function()
{
return this.invoke(flash.printing.PrintJob.kGetPageWidth);
};
d.get_paperHeight=function()
{
return this.invoke(flash.printing.PrintJob.kGetPaperHeight);
};
d.get_paperWidth=function()
{
return this.invoke(flash.printing.PrintJob.kGetPaperWidth);
};
d.PrintJob=function()
{
this.EventDispatcher_constructor();
return;
};
d._invoke=function(index)
{
};
d.addPage=function(sprite,printArea,options,frameNum)
{
if(printArea==undefined)printArea=null;
if(options==undefined)options=null;
if(frameNum==undefined)frameNum=0;
frameNum=Math.floor(frameNum);
var _loc_5=null;
_loc_5=null;
if(options!=null)
{
_loc_5=
{
printAsBitmap:options.printAsBitmap
};
}
if(this._invoke(flash.printing.PrintJob.kAddPage,sprite,this.toClassicRectangle(printArea),_loc_5,frameNum>0?(frameNum):(-1))==false)
{
throw new Error(2057);
}
return;
};
d.invoke=function(index)
{
};
d.send=function()
{
this.invoke(flash.printing.PrintJob.kSend);
return;
};
d.start=function()
{
return this.invoke(flash.printing.PrintJob.kStart)==true;
};
d.toClassicRectangle=function(printArea)
{
if(printArea!=null)
{
var obj={};
obj.xMax=printArea.get_right();
obj.xMin=printArea.get_left();
obj.yMin=printArea.get_top();
obj.yMax=printArea.get_bottom();
return obj;
}
return null;
};
var s={};
s.__init__=function()
{
this.prototype.EventDispatcher_constructor=this.__base__;
this.kAddPage=101;
this.kGetOrientation=9;
this.kGetPageHeight=5;
this.kGetPageWidth=7;
this.kGetPaperHeight=1;
this.kGetPaperWidth=3;
this.kSend=102;
this.kStart=100;
};
flash.addDescription("flash.printing.PrintJob",d,"flash.events.EventDispatcher",s,null);
}
());;
(function()
{
"use strict";
var s={};
s.__init__=function()
{
this.LANDSCAPE="landscape";
this.PORTRAIT="portrait";
};
flash.addDescription("flash.printing.PrintJobOrientation",null,null,s,null);
}
());;
(function()
{
"use strict";
var d={};
d.printAsBitmap=false;
d.PrintJobOptions=function(printAsBitmap)
{
if(printAsBitmap==undefined)printAsBitmap=false;
printAsBitmap=false;
this.printAsBitmap=printAsBitmap;
return;
};
flash.addDescription("flash.printing.PrintJobOptions",d,null,null,null);
}
());;
(function()
{
"use strict";
var d={};
d._delay=0;
d._iteration=0;
d._repeatCount=0;
d._intervalID=-1;
d.get_currentCount=function()
{
return this._iteration;
};
d.get_delay=function()
{
return this._delay;
};
d.set_delay=function(value)
{
this._delay=value;
if(this.get_running())
{
this.stop();
this.start();
}
return value;
};
d.get_repeatCount=function()
{
return this._repeatCount;
};
d.set_repeatCount=function(value)
{
value=Math.floor(value);
this._repeatCount=value;
if(this._iteration>=this._repeatCount)
{
this.stop();
}
return value;
};
d.get_running=function()
{
return this._intervalID!=-1;
};
d.Timer=function(delay,repeatCount)
{
this.EventDispatcher_constructor();
if(repeatCount==undefined)repeatCount=0;
repeatCount=Math.floor(repeatCount);
this._delay=delay;
this._repeatCount=repeatCount;
};
d.reset=function()
{
if(this.get_running())
{
this.stop();
}
this._iteration=0;
};
d.start=function()
{
if(!this.get_running())
{
this._intervalID=window.setInterval(flash.bindFunction(this,this._tick),this._delay);
}
};
d.stop=function()
{
if(this._intervalID!=-1)
{
window.clearInterval(this._intervalID);
this._intervalID=-1;
}
};
d._tick=function()
{
this._iteration++;
this.dispatchEvent(new flash.events.TimerEvent(flash.events.TimerEvent.TIMER,false,false));
if(this._repeatCount&&this._iteration>=this._repeatCount)
{
this.stop();
this.dispatchEvent(new flash.events.TimerEvent(flash.events.TimerEvent.TIMER_COMPLETE,false,false));
}
};
var s={};
s.__init__=function()
{
this.prototype.EventDispatcher_constructor=this.__base__;
};
flash.addDescription("flash.utils.Timer",d,"flash.events.EventDispatcher",s,null);
}
());;
(function()
{
"use strict";
var s={};
s.__init__=function()
{
this.BIG_ENDIAN="bigEndian";
this.LITTLE_ENDIAN="littleEndian";
};
flash.addDescription("flash.utils.Endian",null,null,s,null);
}
());;
(function()
{
"use strict";
var d={};
d._data=null;
d._position=0;
d._endian=null;
d._objectEncoding=0;
d.get_bytesAvailable=function()
{
return this._data.length-this._position;
};
d.get_endian=function()
{
return this._endian;
};
d.set_endian=function(value)
{
this._endian=value;
return value;
};
d.get_length=function()
{
return this._data.length;
};
d.set_length=function(value)
{
value=Math.floor(value);
this._data.length=value;
if(this._position>this._data.length)
{
this._position=this._data.length;
}
return value;
};
d.get_objectEncoding=function()
{
return this._objectEncoding;
};
d.set_objectEncoding=function(value)
{
value=Math.floor(value);
this._objectEncoding=value;
return value;
};
d.get_position=function()
{
return this._position;
};
d.set_position=function(value)
{
value=Math.floor(value);
this._position=value;
if(this._position>this._data.length)
{
this._position=this._data.length;
}
return value;
};
d.ByteArray=function()
{
this._data=[];
this._position=0;
this._endian=flash.utils.Endian.BIG_ENDIAN;
this._objectEncoding=flash.utils.ByteArray.get_defaultObjectEncoding();
flash.linkage(this,flash.utils.ByteArray);
};
d.clear=function()
{
this._data.length=0;
this._position=0;
};
d.compress=function()
{
throw new Error("This method not implemented");
};
d.readBoolean=function()
{
return this.readUnsignedByte()!=0;
};
d.readByte=function()
{
var b=this.readUnsignedByte();
if(b>127)b-=256;
return b;
};
d.readBytes=function(bytes,offset,length)
{
if(offset==undefined)offset=0;
offset=Math.floor(offset);
if(length==undefined)length=0;
length=Math.floor(length);
throw new Error("This method not implemented");
};
d.readDouble=function()
{
var i0=this.readUnsignedInt();
var i1=this.readUnsignedInt();
if(this._endian==flash.utils.Endian.BIG_ENDIAN)
{
return flash.utils.ByteArray._decodeDouble(i1,i0);
}
else
{
return flash.utils.ByteArray._decodeDouble(i0,i1);
}
};
d.readFloat=function()
{
var i=this.readUnsignedInt();
return flash.utils.ByteArray._decodeFloat(i);
};
d.readInt=function()
{
var i=this.readUnsignedInt();
if(i>2147483647)i-=4294967296;
return i;
};
d.readMultiByte=function(length,charSet)
{
length=Math.floor(length);
throw new Error("This method not implemented");
return null;
};
d.readObject=function()
{
throw new Error("This method not implemented");
return null;
};
d.readShort=function()
{
var s=this.readUnsignedShort();
if(s>32767)s-=65536;
return s;
};
d._writeUTF8String=function(bytes,source)
{
for(var i=0;i<source.length;i++)
{
var charcode=source.charCodeAt(i);
if(charcode<0x80)
{
bytes.writeByte(charcode);
}
else if(charcode<0x800)
{
bytes.writeByte(0xc0|(charcode>>6),
0x80|(charcode&0x3f));
}
else if(charcode<0xd800||charcode>=0xe000)
{
bytes.writeByte(0xe0|(charcode>>12),
0x80|((charcode>>6)&0x3f),
0x80|(charcode&0x3f));
}
else
{
i++;
charcode=0x10000+(((charcode&0x3ff)<<10)
|(str.charCodeAt(i)&0x3ff))
bytes.writeByte(0xf0|(charcode>>18),
0x80|((charcode>>12)&0x3f),
0x80|((charcode>>6)&0x3f),
0x80|(charcode&0x3f));
}
}
};
d._readUTF8String=function(bytes,length)
{
if(!bytes||!bytes.get_bytesAvailable)
{
flash.trace();
}
var string="";
while(bytes.get_bytesAvailable()&&length)
{
var byte1=bytes.readUnsignedByte();
if(byte1<0x80)
{
string+=String.fromCharCode(byte1);
}
else if(byte1>=0xC2&&byte1<0xE0)
{
var byte2=bytes.readUnsignedByte();
string+=String.fromCharCode(((byte1&0x1F)<<6)+(byte2&0x3F));
}
else if(byte1>=0xE0&&byte1<0xF0)
{
var byte2=bytes.readUnsignedByte();
var byte3=bytes.readUnsignedByte();
string+=String.fromCharCode(((byte1&0xFF)<<12)+((byte2&0x3F)<<6)+(byte3&0x3F));
}
else if(byte1>=0xF0&&byte1<0xF5)
{
var byte2=bytes.readUnsignedByte();
var byte3=bytes.readUnsignedByte();
var byte4=bytes.readUnsignedByte();
var codepoint=((byte1&0x07)<<18)+((byte2&0x3F)<<12)+((byte3&0x3F)<<6)+(byte4&0x3F);
codepoint-=0x10000;
string+=String.fromCharCode(
(codepoint>>10)+0xD800,
(codepoint&0x3FF)+0xDC00
);
}
length--;
}
return string;
};
d._update=function()
{
for(var i=0;i<this._data.length;i++)
{
this[i]=this._data[i];
}
};
d.readUTFBytes=function(length)
{
length=Math.floor(length);
var string=this._readUTF8String(this,length);
return string;
};
d.readUTF=function()
{
var string=this._readUTF8String(this,this._data.length);
return string;
};
d.readUnsignedByte=function()
{
if(this._position<this._data.length)
{
var b=this._data[this._position];
this._position++;
return b;
}
else
{
throw new Error("End of file was encountered.");
}
};
d.readUnsignedInt=function()
{
var b1=this.readUnsignedByte();
var b2=this.readUnsignedByte();
var b3=this.readUnsignedByte();
var b4=this.readUnsignedByte();
var i;
if(this._endian==flash.utils.Endian.BIG_ENDIAN)
{
i=(b1<<24)+(b2<<16)+(b3<<8)+b4;
}
else
{
i=(b4<<24)+(b3<<16)+(b2<<8)+b1;
}
if(i<0)i+=4294967296;
return i;
};
d.readUnsignedShort=function()
{
var b1=this.readUnsignedByte();
var b2=this.readUnsignedByte();
if(this._endian==flash.utils.Endian.BIG_ENDIAN)
{
return(b1<<8)+b2;
}
else
{
return(b2<<8)+b1;
}
};
d.toString=function()
{
var position=this._position;
this._position=0;
var string=this._readUTF8String(this,this._data.length);
this._position=position;
return string;
};
d.uncompress=function()
{
throw new Error("This method not implemented");
};
d.writeBoolean=function(value)
{
this.writeByte(value?1:0);
};
d.writeByte=function(value)
{
var p=this._position;
this._data[p]=this[p]=value&0xff;
this._position++;
};
d.writeBytes=function(bytes,offset,length)
{
if(offset==undefined)offset=0;
offset=Math.floor(offset);
if(length==undefined)length=0;
length=Math.floor(length);
throw new Error("This method not implemented");
};
d.writeDouble=function(value)
{
var array=flash.utils.ByteArray._encodeDouble(value);
if(this._endian==flash.utils.Endian.BIG_ENDIAN)
{
this.writeUnsignedInt(array[1]);
this.writeUnsignedInt(array[0]);
}
else
{
this.writeUnsignedInt(array[0]);
this.writeUnsignedInt(array[1]);
}
};
d.writeFloat=function(value)
{
var i=flash.utils.ByteArray._encodeFloat(value);
this.writeUnsignedInt(i);
};
d.writeInt=function(value)
{
var b1=value>>24&0xff;
var b2=value>>16&0xff;
var b3=value>>8&0xff;
var b4=value&0xff;
if(this._endian==flash.utils.Endian.BIG_ENDIAN)
{
this.writeByte(b1);
this.writeByte(b2);
this.writeByte(b3);
this.writeByte(b4);
}
else
{
this.writeByte(b4);
this.writeByte(b3);
this.writeByte(b2);
this.writeByte(b1);
}
};
d.writeMultiByte=function(value,charSet)
{
throw new Error("This method not implemented");
};
d.writeObject=function(object)
{
throw new Error("This method not implemented");
};
d.writeShort=function(value)
{
var b1=value>>8&0xff;
var b2=value&0xff;
if(this._endian==flash.utils.Endian.BIG_ENDIAN)
{
this.writeByte(b1);
this.writeByte(b2);
}
else
{
this.writeByte(b2);
this.writeByte(b1);
}
};
d.writeUTF=function(value)
{
throw new Error("This method not implemented");
};
d.writeUTFBytes=function(value)
{
this._writeUTF8String(this,value);
};
d.writeUnsignedInt=function(value)
{
this.writeInt(value);
};
var s={};
s.__init__=function()
{
this._defaultObjectEncoding=flash.net.ObjectEncoding.DEFAULT;
this._buffer32=new ArrayBuffer(4);
this._uint32=new Uint32Array(this._buffer32);
this._float32=new Float32Array(this._buffer32);
this._buffer64=new ArrayBuffer(8);
this._uint64=new Uint32Array(this._buffer64);
this._float64=new Float64Array(this._buffer64);
};
s._encodeFloat=function(value)
{
this._float32[0]=value;
return this._uint32[0];
};
s._decodeFloat=function(value)
{
this._uint32[0]=value;
return this._float32[0];
}
s._encodeDouble=function(value)
{
this._float64[0]=value;
return this._uint64;
};
s._decodeDouble=function(value0,value1)
{
this._uint64[0]=value0;
this._uint64[1]=value1;
return this._float64[0];
}
s.get_defaultObjectEncoding=function()
{
return this._defaultObjectEncoding;
};
s.set_defaultObjectEncoding=function(value)
{
value=Math.floor(value);
this._defaultObjectEncoding=value;
return value;
};
flash.addDescription("flash.utils.ByteArray",d,null,s,["flash.utils.IDataInput","flash.utils.IDataOutput"]);
}
());;
(function()
{
"use strict";
var d={};
d._keys=null;
d._values=null;
d.Dictionary=function(weakKeys)
{
this._keys=[];
this._values=[];
};
d.getProperty=function(key)
{
var index=this._keys.indexOf(key);
if(index!=-1)
{
return this._values[index];
}
else
{
return undefined;
}
}
d.setProperty=function(key,value)
{
var index=this._keys.indexOf(key);
if(index!=-1)
{
this._values[index]=value;
}
else
{
this._keys.push(key);
this._values.push(value);
}
return value;
}
d.deleteProperty=function(key)
{
var index=this._keys.indexOf(key);
if(index!=-1)
{
this._keys.splice(index,1);
this._values.splice(index,1);
}
}
flash.addDescription("flash.utils.Dictionary",d,null,null,null);
}
());;
(function()
{
"use strict";
var d={};
d.get_endian=function()
{
};
d.set_endian=function(type)
{
};
d.get_objectEncoding=function()
{
};
d.set_objectEncoding=function(version)
{
};
d.IDataOutput=function()
{
};
d.writeBoolean=function(value)
{
};
d.writeByte=function(value)
{
};
d.writeBytes=function(bytes,offset,length)
{
};
d.writeDouble=function(value)
{
};
d.writeFloat=function(value)
{
};
d.writeInt=function(value)
{
};
d.writeMultiByte=function(value,charSet)
{
};
d.writeObject=function(object)
{
};
d.writeShort=function(value)
{
};
d.writeUTF=function(value)
{
};
d.writeUTFBytes=function(value)
{
};
d.writeUnsignedInt=function(value)
{
};
flash.addDescription("flash.utils.IDataOutput",d,null,null,null);
}
());;(function()
{
"use strict";
flash.createPackage("flash.utils");
flash.utils.setInterval=function(callback,time)
{
return setInterval(callback,time);
}
flash.utils.setTimeout=function(callback,time)
{
return setTimeout(callback,time);
}
flash.utils.clearInterval=function(id)
{
return clearInterval(id);
}
flash.utils.clearTimeout=function(id)
{
return clearTimeout(id);
}
flash.utils.getTimer=function()
{
return new Date().getTime();
};
flash.utils.describeType=function(value)
{
return new flash.xml.XMLNode(flash.xml.XMLNodeType.ELEMENT_NODE,"class");
};
flash.utils.getDefinitionByName=function(name)
{
return flash.classes[name];
};
flash.utils.getQualifiedClassName=function(value)
{
switch(typeof value)
{
case"number":
return"Number";
case"string":
return"String";
case"boolean":
return"Boolean";
case"function":
return"Function";
case"object":
if(value.__class__)return value.__class__.__name__;
else return"Object";
default:
return"Object";
}
;
};
flash.utils.getQualifiedSuperclassName=function(value)
{
return"Object";
};
}
());;
(function()
{
"use strict";
var d={};
d.get_bytesAvailable=function()
{
};
d.get_endian=function()
{
};
d.set_endian=function(type)
{
};
d.get_objectEncoding=function()
{
};
d.set_objectEncoding=function(version)
{
};
d.IDataInput=function()
{
};
d.readBoolean=function()
{
};
d.readByte=function()
{
};
d.readBytes=function(bytes,offset,length)
{
};
d.readDouble=function()
{
};
d.readFloat=function()
{
};
d.readInt=function()
{
};
d.readMultiByte=function(length,charSet)
{
};
d.readObject=function()
{
};
d.readShort=function()
{
};
d.readUTF=function()
{
};
d.readUTFBytes=function(length)
{
};
d.readUnsignedByte=function()
{
};
d.readUnsignedInt=function()
{
};
d.readUnsignedShort=function()
{
};
flash.addDescription("flash.utils.IDataInput",d,null,null,null);
}
());;
(function()
{
"use strict";
var d={};
d._attributes=null;
d.firstChild=null;
d.lastChild=null;
d.nextSibling=null;
d.nodeName=null;
d.nodeType=0;
d.nodeValue=null;
d.parentNode=null;
d.previousSibling=null;
d.get_attributes=function()
{
if(this._attributes==null)
{
this._attributes={};
}
return this._attributes;
};
d.set_attributes=function(value)
{
this._attributes=value;
return value;
};
d.get_childNodes=function()
{
var childNodes=[];
var child=this.firstChild;
while(child)
{
childNodes.push(child);
child=child.nextSibling;
}
return childNodes;
};
d.get_localName=function()
{
return null;
};
d.get_namespaceURI=function()
{
if(this.nodeName==null)return null;
return this.getNamespaceForPrefix(this.get_prefix());
};
d.get_prefix=function()
{
if(this.nodeName==null)return null;
var index=this.nodeName.indexOf(":");
if(index!=-1)
{
return this.nodeName.substring(0,index);
}
return"";
};
d.XMLNode=function(type,value)
{
type=Math.floor(type);
this.init(type,value);
};
d.appendChild=function(node)
{
var curentNode=this;
while(curentNode)
{
if(curentNode===node)
{
console.error("XML recursion failure: new child would create infinite loop.");
return;
}
curentNode=curentNode.parentNode;
}
node.parentNode=this;
if(this.firstChild==null)
{
node.previousSibling=null;
node.nextSibling=null;
this.firstChild=node;
this.lastChild=node;
}
else
{
this.lastChild.nextSibling=node;
node.previousSibling=this.lastChild;
node.nextSibling=null;
this.lastChild=node;
}
};
d.cloneNode=function(deep)
{
return null;
};
d.getNamespaceForPrefix=function(prefix)
{
var str="";
var str2="";
for(str in this.attributes)
{
if(str.indexOf("xmlns")==0)
{
if(str.charCodeAt(5)==58)
{
str2=str.substring(6);
if(str2==prefix)
{
return this.attributes[str];
}
continue;
}
if(prefix.length==0)
{
return this.attributes[str];
}
}
}
if(this.parentNode!=null)
{
return this.parentNode.getNamespaceForPrefix(prefix);
}
return"";
};
d.getPrefixForNamespace=function(ns)
{
var str="";
for(str in _attributes)
{
if(str.indexOf("xmlns")==0)
{
if(_attributes[str]==ns)
{
if(str.charCodeAt(5)==58)
{
return str.substring(6);
}
return"";
}
}
}
if(parentNode!==null)
{
return this.parentNode.getPrefixForNamespace(ns);
}
return"";
};
d.hasChildNodes=function()
{
return this.firstChild!=null;
};
d.init=function(type,value)
{
this.nodeType=Math.floor(type);
if(this.nodeType==flash.xml.XMLNodeType.ELEMENT_NODE)
{
this.nodeName=value;
}
else
{
this.nodeValue=value;
}
};
d.insertBefore=function(node,before)
{
if(before==null)
{
return this.appendChild(node);
}
if(before.parentNode==this||node.parentNode==this)
{
console.error("The before XMLNode parameter must be a child of the caller.")
}
node.removeNode();
if(before.previousSibling==null)
{
this.firstChild=node;
}
else
{
before.previousSibling.nextSibling=node;
}
node.previousSibling=before.previousSibling;
node.nextSibling=before;
before.previousSibling=node;
node.parentNode=this;
var childNodes=this.get_childNodes();
if(childNodes.length)
{
var counter=0;
while(counter<childNodes.length)
{
if(childNodes[counter]==before)
{
childNodes.splice(counter,0,node);
return;
}
counter=counter+1;
}
}
else
{
return;
}
console.error("The before XMLNode parameter must be a child of the caller.");
};
d.removeNode=function()
{
if(this.parentNode!=null)
{
if(this.previousSibling==null&&this.nextSibling==null)
{
this.parentNode.firstChild=null;
this.parentNode.lastChild=null;
}
else if(this.previousSibling==null)
{
this.parentNode.firstChild=this.nextSibling;
this.nextSibling.previousSibling=null;
}
else if(this.nextSibling==null)
{
this.parentNode.lastChild=this.previousSibling;
this.previousSibling.nextSibling=null;
}
else
{
this.previousSibling.nextSibling=this.nextSibling;
this.nextSibling.previousSibling=this.previousSibling;
}
this.previousSibling=null;
this.nextSibling=null;
this.parentNode=null;
}
};
d.toString=function()
{
if(this.nodeType==flash.xml.XMLNodeType.ELEMENT_NODE)
{
var childNodes=this.get_childNodes();
var attributes=this.get_attributes();
var s="<"+this.nodeName;
for(var i in attributes)
{
s+=" "+i+'="'+attributes[i]+'"';
}
if(childNodes.length)
{
s+=">";
for(var j=0;j<childNodes.length;j++)
{
var node=childNodes[j];
s+=node.toString();
}
s+="</"+this.nodeName+">";
}
else
{
s+="/>";
}
return s;
}
else if(this.nodeType==flash.xml.XMLNodeType.COMMENT_NODE)
{
return"<!--"+this.nodeValue+"-->";
}
else if(this.nodeType==flash.xml.XMLNodeType.CDATA_NODE)
{
return"<![CDATA["+this.nodeValue+"]]>";
}
else
{
return this.nodeValue;
}
};
flash.addDescription("flash.xml.XMLNode",d,null,null,null);
}
());;
(function()
{
"use strict";
var d={};
d.docTypeDecl=null;
d.idMap=null;
d.ignoreWhite=false;
d.xmlDecl=null;
d.XMLDocument=function(source)
{
this.XMLNode_constructor(flash.xml.XMLNodeType.ELEMENT_NODE,null);
this.parseXML(source);
};
d.createElement=function(name)
{
return new flash.xml.XMLNode(flash.xml.XMLNodeType.ELEMENT_NODE,name);
};
d.createTextNode=function(text)
{
return new flash.xml.XMLNode(flash.xml.XMLNodeType.TEXT_NODE,text);
};
d.parseXML=function(source)
{
if(source)
{
this.firstChild=null;
this.lastChild=null;
if(this.ignoreWhite)
{
source=source.replace(/[\t\n\r ]+/g," ");
source=source.replace(new RegExp('> <','g'),"><");
}
var expr=RegExp(/(<\?[^>]+\?>)/);
var declArray=source.match(expr);
this.xmlDecl=declArray&&declArray.length?declArray[0]:null;
source=source.replace(expr,"");
source=source.replace(new RegExp("&",'g'),'&amp;');
source="<rootnode>"+source+"</rootnode>";
var xmlDoc=null;
if(window.DOMParser)
{
var parser=new DOMParser();
xmlDoc=parser.parseFromString(source,"text/xml");
}
else
{
xmlDoc=new ActiveXObject("Microsoft.XMLDOM");
xmlDoc.async=false;
xmlDoc.loadXML(source);
}
xmlDoc=xmlDoc.firstChild;
this._parseDomParsersXmlDoc(xmlDoc,this);
}
};
d._parseAttributes=function(nativeNode,node)
{
var nativeAttributes=nativeNode.attributes;
if(nativeAttributes)
{
var nodeAttributes=node.get_attributes();
for(var i=0;i<nativeAttributes.length;i++)
{
var attribute=nativeAttributes[i];
nodeAttributes[attribute.name]=attribute.nodeValue;
}
}
};
d._parseDomParsersXmlDoc=function(nativeNode,node)
{
this._parseAttributes(nativeNode,node);
var nativeNodes=nativeNode.childNodes;
for(var i=0;i<nativeNodes.length;i++)
{
var nativeChild=nativeNodes[i];
var value=nativeChild.nodeType==flash.xml.XMLNodeType.ELEMENT_NODE?nativeChild.nodeName:nativeChild.nodeValue;
var child=new flash.xml.XMLNode(nativeChild.nodeType,value);
this._parseDomParsersXmlDoc(nativeChild,child);
node.appendChild(child);
}
};
d.toString=function()
{
return String(this.firstChild);
};
var s={};
s.__init__=function()
{
this.prototype.XMLNode_constructor=this.__base__;
this.kElementNeverBegun=-10;
this.kEndOfDocument=-1;
this.kMalformedElement=-6;
this.kNoError=0;
this.kOutOfMemory=-7;
this.kUnterminatedAttributeValue=-8;
this.kUnterminatedCdata=-2;
this.kUnterminatedComment=-5;
this.kUnterminatedDoctypeDeclaration=-4;
this.kUnterminatedElement=-9;
this.kUnterminatedXmlDeclaration=-3;
};
flash.addDescription("flash.xml.XMLDocument",d,"flash.xml.XMLNode",s,null);
}
());;
(function()
{
"use strict";
var s={};
s.__init__=function()
{
this.CDATA_NODE=4;
this.COMMENT_NODE=8;
this.DOCUMENT_TYPE_NODE=10;
this.ELEMENT_NODE=1;
this.PROCESSING_INSTRUCTION_NODE=7;
this.TEXT_NODE=3;
this.XML_DECLARATION=13;
};
flash.addDescription("flash.xml.XMLNodeType",null,null,s,null);
}
());;
(function()
{
"use strict";
var s={};
s.__init__=function()
{
this.LOCAL_TRUSTED="localTrusted";
this.LOCAL_WITH_FILE="localWithFile";
this.LOCAL_WITH_NETWORK="localWithNetwork";
this.REMOTE="remote";
};
s.get_disableAVM1Loading=function()
{
};
s.set_disableAVM1Loading=function(value)
{
};
s.get_exactSettings=function()
{
};
s.set_exactSettings=function(value)
{
};
s.get_sandboxType=function()
{
};
s.allowDomain=function()
{
};
s.allowInsecureDomain=function()
{
};
s.loadPolicyFile=function(url)
{
};
s.showSettings=function(panel)
{
};
flash.addDescription("flash.system.Security",null,null,s,null);
}
());;
(function()
{
"use strict";
var d={};
d.IME=function()
{
this.EventDispatcher_constructor();
};
var s={};
s.__init__=function()
{
this.prototype.EventDispatcher_constructor=this.__base__;
}
s.set_constructOK=function(construct)
{
};
s.get_conversionMode=function()
{
};
s.set_conversionMode=function(mode)
{
};
s.get_enabled=function()
{
};
s.set_enabled=function(enabled)
{
};
s.doConversion=function()
{
};
s.setCompositionString=function(composition)
{
};
flash.addDescription("flash.system.IME",d,"flash.events.EventDispatcher",s,null);
}
());;
(function()
{
"use strict";
var s={};
s.__init__=function()
{
this.CAMERA="camera";
this.DEFAULT="default";
this.DISPLAY="display";
this.LOCAL_STORAGE="localStorage";
this.MICROPHONE="microphone";
this.PRIVACY="privacy";
this.SETTINGS_MANAGER="settingsManager";
};
flash.addDescription("flash.system.SecurityPanel",null,null,s,null);
}
());;
(function()
{
"use strict";
var d={};
d.System=function()
{
return;
};
var s={};
s.__init__=function()
{
this.theIME=null;
};
s.get_ime=function()
{
};
s.get_totalMemory=function()
{
};
s.get_useCodePage=function()
{
};
s.set_useCodePage=function(value)
{
};
s.get_vmVersion=function()
{
};
s.exit=function(code)
{
};
s.gc=function()
{
};
s.pause=function()
{
};
s.resume=function()
{
};
s.setClipboard=function(string)
{
};
flash.addDescription("flash.system.System",d,null,s,null);
}
());;
(function()
{
"use strict";
var d={};
d._defines=null;
d._images=null;
d._linkage=null;
d._fonts=null;
d._embedFonts=[];
d.get_parentDomain=function()
{
return null;
};
d.ApplicationDomain=function(parentDomain)
{
if(parentDomain==undefined)parentDomain=null;
this._defines={};
this._images={};
this._fonts={};
this._linkage=[];
};
d.getDefinition=function(name)
{
return flash.utils.getDefinitionByName(name);
};
d.hasDefinition=function(name)
{
return false;
};
d._getImages=function()
{
var array=[];
for(var path in this._images)
{
array.push(path);
}
return array;
};
d._getFonts=function()
{
var array=[];
for(var path in this._fonts)
{
array.push(path);
}
return array;
};
d._setDefine=function(tag)
{
this._defines[tag.id]=tag;
};
d._getDefine=function(id)
{
return this._defines[id];
};
d._setImage=function(path,image)
{
if(path==undefined||path=="undefined")
{
flash.trace();
}
this._images[path]=image;
};
d._getImage=function(path)
{
return this._images[path];
};
d._getImageForLoad=function()
{
for(var path in this._images)
{
if(!this._images[path])return path;
}
return null;
};
d._getloadInagesProgress=function()
{
var total=0;
var loaded=0;
for(var path in this._images)
{
total++;
if(this._images[path])
{
loaded++;
}
}
if(total==0)return 1;
return loaded/total;
};
d._setFont=function(font)
{
flash.trace("_setFont"+", "+font._path+", "+font._fontName);
if(font._path)
{
this._fonts[font._path]=font;
}
else
{
this._fonts[font._fontName]=font;
}
};
d._getFont=function(path)
{
return this._fonts[path];
};
d._getFontForLoad=function()
{
for(var path in this._fonts)
{
var font=this._fonts[path];
if(!font._loaded)return font;
}
return null;
};
d._addLinkage=function(symbolClass)
{
symbolClass.setIdToClasses();
this._linkage.push(symbolClass);
};
d._getLinkage=function(id)
{
for(var i=0;i<this._linkage.length;i++)
{
var symbolClass=this._linkage[i];
var className=symbolClass.getClassName(id);
if(className)
{
return symbolClass;
}
}
return null;
};
d._getLinkageId=function(name,weak)
{
for(var i=0;i<this._linkage.length;i++)
{
var symbolClass=this._linkage[i];
var defineId=symbolClass.getDefineId(name,weak);
if(defineId)
{
return defineId;
}
}
return null;
};
d._initAudio=function(folder)
{
for(var i in this._defines)
{
var define=this._defines[i];
if(define instanceof flash.swf.DefineSound)
{
define.init(folder);
}
;
}
;
};
var s={};
s.get_currentDomain=function()
{
return this._currentDomain;
};
s.__init__=function()
{
this._currentDomain=new flash.system.ApplicationDomain();
};
flash.addDescription("flash.system.ApplicationDomain",d,null,s,null);
}
());;
(function()
{
"use strict";
var d={};
d.SecurityDomain=function()
{
return;
};
var s={};
s.get_currentDomain=function()
{
return null;
};
flash.addDescription("flash.system.SecurityDomain",d,null,s,null);
}
());;
(function()
{
"use strict";
var s={};
s.__init__=function()
{
this.ALPHANUMERIC_FULL="ALPHANUMERIC_FULL";
this.ALPHANUMERIC_HALF="ALPHANUMERIC_HALF";
this.CHINESE="CHINESE";
this.JAPANESE_HIRAGANA="JAPANESE_HIRAGANA";
this.JAPANESE_KATAKANA_FULL="JAPANESE_KATAKANA_FULL";
this.JAPANESE_KATAKANA_HALF="JAPANESE_KATAKANA_HALF";
this.KOREAN="KOREAN";
this.UNKNOWN="UNKNOWN";
};
flash.addDescription("flash.system.IMEConversionMode",null,null,s,null);
}
());;
(function()
{
"use strict";
var d={};
d.applicationDomain=null;
d.checkPolicyFile=false;
d.securityDomain=null;
d.LoaderContext=function(checkPolicyFile,applicationDomain,securityDomain)
{
if(checkPolicyFile==undefined)checkPolicyFile=false;
if(applicationDomain==undefined)applicationDomain=null;
if(securityDomain==undefined)securityDomain=null;
this.checkPolicyFile=checkPolicyFile;
this.applicationDomain=applicationDomain;
this.securityDomain=securityDomain;
};
flash.addDescription("flash.system.LoaderContext",d,null,null,null);
}
());;
(function()
{
"use strict";
var d={};
d.Capabilities=function()
{
};
var s={};
s.get_avHardwareDisable=function()
{
};
s.get_hasAccessibility=function()
{
};
s.get_hasAudio=function()
{
};
s.get_hasAudioEncoder=function()
{
};
s.get_hasEmbeddedVideo=function()
{
};
s.get_hasIME=function()
{
};
s.get_hasMP3=function()
{
};
s.get_hasPrinting=function()
{
};
s.get_hasScreenBroadcast=function()
{
};
s.get_hasScreenPlayback=function()
{
};
s.get_hasStreamingAudio=function()
{
};
s.get_hasStreamingVideo=function()
{
};
s.get_hasTLS=function()
{
};
s.get_hasVideoEncoder=function()
{
};
s.get_isDebugger=function()
{
};
s.get_isEmbeddedInAcrobat=function()
{
};
s.get_language=function()
{
};
s.get_localFileReadDisable=function()
{
};
s.get_manufacturer=function()
{
};
s.get_os=function()
{
return navigator.userAgent;
};
s.get_pixelAspectRatio=function()
{
};
s.get_playerType=function()
{
};
s.get_screenColor=function()
{
};
s.get_screenDPI=function()
{
};
s.get_screenResolutionX=function()
{
};
s.get_screenResolutionY=function()
{
};
s.get_serverString=function()
{
};
s.get_version=function()
{
};
flash.addDescription("flash.system.Capabilities",d,null,s,null);
}
());;
(function()
{
"use strict";
var d={};
d.FSCommand=function()
{
return;
};
var s={};
s._fscommand=function(command,args)
{
};
flash.addDescription("flash.system.FSCommand",d,null,s,null);
}
());;
(function()
{
"use strict";
var d={};
d.a=0;
d.b=0;
d.c=0;
d.d=0;
d.tx=0;
d.ty=0;
d.Matrix=function(a,b,c,d,tx,ty)
{
this.a=a==undefined?1:a;
this.b=b==undefined?0:b;
this.c=c==undefined?0:c;
this.d=d==undefined?1:d;
this.tx=tx==undefined?0:tx;
this.ty=ty==undefined?0:ty;
};
d.clone=function()
{
return new flash.geom.Matrix(this.a,this.b,this.c,this.d,this.tx,this.ty);
};
d.concat=function(m)
{
if(m.a==1&&
m.b==0&&
m.c==0&&
m.d==1&&
m.tx==0&&
m.ty==0)return;
var na=this.a;
var nb=this.b;
var nc=this.c;
var nd=this.d;
var nx=this.tx;
var ny=this.ty;
this.a=m.a*na+m.c*nb;
this.b=m.b*na+m.d*nb;
this.c=m.a*nc+m.c*nd;
this.d=m.b*nc+m.d*nd;
this.tx=m.a*nx+m.c*ny+m.tx;
this.ty=m.b*nx+m.d*ny+m.ty;
};
d.createBox=function(scaleX,scaleY,rotation,tx,ty)
{
if(rotation==undefined)rotation=0;
if(tx==undefined)tx=0;
if(ty==undefined)ty=0;
this.identity();
this.rotate(rotation);
this.scale(scaleX,scaleY);
this.tx=tx;
this.ty=ty;
};
d.createGradientBox=function(width,height,rotation,tx,ty)
{
if(rotation==undefined)rotation=0;
if(tx==undefined)tx=0;
if(ty==undefined)ty=0;
this.createBox(width/1638.4,height/1638.4,rotation,tx+width/2,ty+height/2);
};
d.deltaTransformPoint=function(point)
{
return new flash.geom.Point(this.a*point.x+this.c*point.y,this.d*point.y+this.b*point.x);
};
d.identity=function()
{
this.a=1;
this.b=0;
this.c=0;
this.d=1;
this.tx=0;
this.ty=0;
};
d.invert=function()
{
var determinant=this.a*this.d-this.b*this.c;
if(determinant)
{
determinant=1/determinant;
var ma=this.a;
var mb=this.b;
var mc=this.c;
var md=this.d;
var mx=this.tx;
var my=this.ty;
this.a=md*determinant;
this.b=-mb*determinant;
this.c=-mc*determinant;
this.d=ma*determinant;
this.tx=(mc*my-mx*md)*determinant;
this.ty=(mx*mb-ma*my)*determinant;
}
else
{
this.identity();
}
};
d.rotate=function(angle)
{
if(angle==0)return;
var cos=Math.cos(angle);
var sin=Math.sin(angle);
this.concat(new flash.geom.Matrix(cos,sin,-sin,cos,0,0));
};
d.scale=function(sx,sy)
{
if(sx==1&&sy==1)return;
this.concat(new flash.geom.Matrix(sx,0,0,sy,0,0));
};
d.toString=function()
{
return"(a="+this.a+", b="+this.b+", c="+this.c+", d="+this.d+", tx="+this.tx+", ty="+this.ty+")";
};
d.transformPoint=function(point)
{
return new flash.geom.Point(
this.a*point.x+this.c*point.y+this.tx,
this.d*point.y+this.b*point.x+this.ty
);
};
d.translate=function(dx,dy)
{
this.tx+=dx;
this.ty+=dy;
};
d.copyFrom=function(m)
{
this.a=m.a;
this.b=m.b;
this.c=m.c;
this.d=m.d;
this.tx=m.tx;
this.ty=m.ty;
};
flash.addDescription("flash.geom.Matrix",d,null,null,null);
}
());;
(function()
{
"use strict";
var d={};
d.alphaMultiplier=0;
d.alphaOffset=0;
d.blueMultiplier=0;
d.blueOffset=0;
d.greenMultiplier=0;
d.greenOffset=0;
d.redMultiplier=0;
d.redOffset=0;
d.get_color=function()
{
return this.redOffset<<16|this.greenOffset<<8|this.blueOffset;
};
d.set_color=function(value)
{
value=Math.floor(value);
this.redMultiplier=0;
this.greenMultiplier=0;
this.blueMultiplier=0;
this.redOffset=(value>>16)&0xff;
this.greenOffset=(value>>8)&0xff;
this.blueOffset=value&0xff;
};
d.ColorTransform=function(redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier,redOffset,greenOffset,blueOffset,alphaOffset)
{
this.redMultiplier=redMultiplier==undefined?1:redMultiplier;
this.greenMultiplier=greenMultiplier==undefined?1:greenMultiplier;
this.blueMultiplier=blueMultiplier==undefined?1:blueMultiplier;
this.alphaMultiplier=alphaMultiplier==undefined?1:alphaMultiplier;
this.redOffset=redOffset==undefined?0:redOffset;
this.greenOffset=greenOffset==undefined?0:greenOffset;
this.blueOffset=blueOffset==undefined?0:blueOffset;
this.alphaOffset=alphaOffset==undefined?0:alphaOffset;
};
d.concat=function(ct)
{
this.redOffset=this.redOffset+this.redMultiplier*ct.redOffset;
this.greenOffset=this.greenOffset+this.greenMultiplier*ct.greenOffset;
this.blueOffset=this.blueOffset+this.blueMultiplier*ct.blueOffset;
this.alphaOffset=this.alphaOffset+this.alphaMultiplier*ct.alphaOffset;
this.redMultiplier=this.redMultiplier*ct.redMultiplier;
this.greenMultiplier=this.greenMultiplier*ct.greenMultiplier;
this.blueMultiplier=this.blueMultiplier*ct.blueMultiplier;
this.alphaMultiplier=this.alphaMultiplier*ct.alphaMultiplier;
};
d.isEmpty=function()
{
return this.redOffset==0&&
this.greenOffset==0&&
this.blueOffset==0&&
this.alphaOffset==0&&
this.redMultiplier==1&&
this.greenMultiplier==1&&
this.blueMultiplier==1&&
this.alphaMultiplier==1;
};
d.isEmptyColor=function()
{
return this.redOffset==0&&
this.greenOffset==0&&
this.blueOffset==0&&
this.redMultiplier==1&&
this.greenMultiplier==1&&
this.blueMultiplier==1;
};
d.copyFrom=function(ct)
{
this.redOffset=ct.redOffset;
this.greenOffset=ct.greenOffset;
this.blueOffset=ct.blueOffset;
this.alphaOffset=ct.alphaOffset;
this.redMultiplier=ct.redMultiplier;
this.greenMultiplier=ct.greenMultiplier;
this.blueMultiplier=ct.blueMultiplier;
this.alphaMultiplier=ct.alphaMultiplier;
};
d.equals=function(ct)
{
return this.redOffset==ct.redOffset&&
this.greenOffset==ct.greenOffset&&
this.blueOffset==ct.blueOffset&&
this.alphaOffset==ct.alphaOffset&&
this.redMultiplier==ct.redMultiplier&&
this.greenMultiplier==ct.greenMultiplier&&
this.blueMultiplier==ct.blueMultiplier&&
this.alphaMultiplier==ct.alphaMultiplier;
};
d.equalsColor=function(ct)
{
return this.redOffset==ct.redOffset&&
this.greenOffset==ct.greenOffset&&
this.blueOffset==ct.blueOffset&&
this.redMultiplier==ct.redMultiplier&&
this.greenMultiplier==ct.greenMultiplier&&
this.blueMultiplier==ct.blueMultiplier;
};
d.clone=function()
{
return new flash.geom.ColorTransform(
this.redMultiplier,
this.greenMultiplier,
this.blueMultiplier,
this.alphaMultiplier,
this.redOffset,
this.greenOffset,
this.blueOffset,
this.alphaOffset
);
};
d._toValue=function()
{
return this.redMultiplier+"_"+this.greenMultiplier+"_"+this.blueMultiplier+"_"+this.alphaMultiplier+"_"+this.redOffset+"_"+this.greenOffset+"_"+this.blueOffset+"_"+this.alphaOffset;
};
d.toString=function()
{
return"(redMultiplier="+this.redMultiplier+", greenMultiplier="+this.greenMultiplier+", blueMultiplier="+this.blueMultiplier+", alphaMultiplier="+this.alphaMultiplier+", redOffset="+this.redOffset+", greenOffset="+this.greenOffset+", blueOffset="+this.blueOffset+", alphaOffset="+this.alphaOffset+")";
};
flash.addDescription("flash.geom.ColorTransform",d,null,null,null);
}
());;
(function()
{
"use strict";
var d={};
d.w=0;
d.x=0;
d.y=0;
d.z=0;
d.get_length=function()
{
return 0;
};
d.get_lengthSquared=function()
{
return 0;
};
d.add=function(a)
{
return null;
};
d.clone=function()
{
return null;
};
d.copyFrom=function(sourceVector3D)
{
};
d.crossProduct=function(a)
{
return null;
};
d.decrementBy=function(a)
{
};
d.dotProduct=function(a)
{
return 0;
};
d.equals=function(toCompare,allFour)
{
if(allFour==undefined)allFour=false;
return false;
};
d.incrementBy=function(a)
{
};
d.nearEquals=function(toCompare,tolerance,allFour)
{
if(allFour==undefined)allFour=false;
return false;
};
d.negate=function()
{
};
d.normalize=function()
{
return 0;
};
d.project=function()
{
};
d.scaleBy=function(s)
{
};
d.setTo=function(xa,ya,za)
{
};
d.subtract=function(a)
{
return null;
};
d.toString=function()
{
return"";
};
d.Vector3D=function(x,y,z,w)
{
if(x==undefined)x=0;
if(y==undefined)y=0;
if(z==undefined)z=0;
if(w==undefined)w=0;
this.x=x;
this.y=y;
this.z=z;
this.w=w;
};
var s={};
s.__init__=function()
{
this.X_AXIS=new flash.geom.Vector3D(1,0,0);
this.Y_AXIS=new flash.geom.Vector3D(0,1,0);
this.Z_AXIS=new flash.geom.Vector3D(0,0,1);
};
s.angleBetween=function(a,b)
{
return 0;
};
s.distance=function(pt1,pt2)
{
return 0;
};
flash.addDescription("flash.geom.Vector3D",d,null,s,null,["flash.geom.Vector3D"]);
}
());;
(function()
{
"use strict";
var d={};
d._rawData=null;
d.get_determinant=function()
{
return 0;
};
d.get_position=function()
{
return new flash.geom.Vector3D(
this._rawData[3],
this._rawData[7],
this._rawData[11],
this._rawData[15]
);
};
d.set_position=function(value)
{
this._rawData[3]=value.x;
this._rawData[7]=value.y;
this._rawData[11]=value.z;
this._rawData[15]=value.w;
};
d.get_rawData=function()
{
return this._rawData;
};
d.set_rawData=function(value)
{
this._rawData=value;
};
d.append=function(lhs)
{
};
d.appendRotation=function(degrees,axis,pivotPoint)
{
if(pivotPoint==undefined)pivotPoint=null;
};
d.appendScale=function(xScale,yScale,zScale)
{
};
d.appendTranslation=function(x,y,z)
{
};
d.clone=function()
{
return null;
};
d.copyColumnFrom=function(column,vector3D)
{
column=Math.floor(column);
};
d.copyColumnTo=function(column,vector3D)
{
column=Math.floor(column);
};
d.copyFrom=function(sourceMatrix3D)
{
};
d.copyRawDataFrom=function(vector,index,transpose)
{
if(index==undefined)index=0;
index=Math.floor(index);
if(transpose==undefined)transpose=false;
};
d.copyRawDataTo=function(vector,index,transpose)
{
if(index==undefined)index=0;
index=Math.floor(index);
if(transpose==undefined)transpose=false;
};
d.copyRowFrom=function(row,vector3D)
{
row=Math.floor(row);
};
d.copyRowTo=function(row,vector3D)
{
row=Math.floor(row);
};
d.copyToMatrix3D=function(dest)
{
};
d.decompose=function(orientationStyle)
{
if(orientationStyle==undefined)orientationStyle="eulerAngles";
return null;
};
d.deltaTransformVector=function(v)
{
return null;
};
d.identity=function()
{
};
d.interpolateTo=function(toMat,percent)
{
};
d.invert=function()
{
return null;
};
d.Matrix3D=function(value)
{
if(value==undefined)value=null;
if(!value)
{
value=[1,0,0,0,
0,1,0,0,
0,0,1,0,
0,0,0,1];
}
this._rawData=value;
};
d.pointAt=function(pos,at,up)
{
if(at==undefined)at=null;
if(up==undefined)up=null;
};
d.prepend=function(rhs)
{
};
d.prependRotation=function(degrees,axis,pivotPoint)
{
if(pivotPoint==undefined)pivotPoint=null;
};
d.prependScale=function(xScale,yScale,zScale)
{
};
d.prependTranslation=function(x,y,z)
{
};
d.recompose=function(components,orientationStyle)
{
if(orientationStyle==undefined)orientationStyle="eulerAngles";
return null;
};
d.transformVector=function(v)
{
return null;
};
d.transformVectors=function(vin,vout)
{
};
d.transpose=function()
{
};
var s={};
s.interpolate=function(thisMat,toMat,percent)
{
return null;
};
flash.addDescription("flash.geom.Matrix3D",d,null,s,null,null);
}
());;
(function()
{
"use strict";
var d={};
d.x=0;
d.y=0;
d.get_length=function()
{
return Math.sqrt(this.x*this.x+this.y*this.y);
};
d.Point=function(x,y)
{
this.x=x==undefined?0:x;
this.y=y==undefined?0:y;
};
d.add=function(point)
{
return new flash.geom.Point(this.x+point.x,this.y+point.y);
};
d.clone=function()
{
return new flash.geom.Point(this.x,this.y);
};
d.equals=function(point)
{
return this.x==point.x&&this.y==point.y;
};
d.normalize=function(thickness)
{
var l=this.get_length();
if(l>0)
{
l=thickness/l;
this.x*=l;
this.y*=l;
}
};
d.offset=function(dx,dy)
{
this.x+=dx;
this.y+=dy;
};
d.subtract=function(point)
{
return new flash.geom.Point(this.x-point.x,this.y-point.y);
};
d.toString=function()
{
return"(x="+this.x+", y="+this.y+")";
};
var s={};
s.distance=function(point1,point2)
{
var dx=point1.x-point2.x;
var dy=point1.y-point2.y;
return Math.sqrt(dx*dx+dy*dy);
};
s.interpolate=function(point1,point2,value)
{
return new flash.geom.Point(
point2.x+value*(point1.x-point2.x),
point2.y+value*(point1.y-point2.y)
);
};
s.polar=function(length,angle)
{
return new flash.geom.Point(length*Math.cos(angle),length*Math.sin(angle));
};
flash.addDescription("flash.geom.Point",d,null,s,null);
}
());;
(function()
{
"use strict";
var d={};
d.height=0;
d.width=0;
d.x=0;
d.y=0;
d.get_bottom=function()
{
return this.y+this.height;
};
d.set_bottom=function(value)
{
this.height=value-this.y;
};
d.get_bottomRight=function()
{
return new flash.geom.Point(this.x+this.width,this.y+this.height);
};
d.set_bottomRight=function(value)
{
this.width=value.x-this.x;
this.height=value.y-this.y;
};
d.get_left=function()
{
return this.x;
};
d.set_left=function(value)
{
this.width+=this.x-value;
this.x=value;
};
d.get_right=function()
{
return this.x+this.width;
};
d.set_right=function(value)
{
this.width=value-this.x;
};
d.get_size=function()
{
return new flash.geom.Point(this.width,this.height);
};
d.set_size=function(value)
{
this.width=value.x;
this.height=value.y;
};
d.get_top=function()
{
return this.y;
};
d.set_top=function(value)
{
this.height+=this.y-value;
this.y=value;
};
d.get_topLeft=function()
{
return new flash.geom.Point(this.x,this.y);
};
d.set_topLeft=function(value)
{
this.width+=this.x-value.x;
this.height+=this.y-value.y;
this.x=value.x;
this.y=value.y;
};
d.Rectangle=function(x,y,width,height)
{
this.x=x==undefined?0:x;
this.y=y==undefined?0:y;
this.width=width==undefined?0:width;
this.height=height==undefined?0:height;
};
d.clone=function()
{
return new flash.geom.Rectangle(this.x,this.y,this.width,this.height);
};
d.contains=function(x,y)
{
return x>=this.x&&y>=this.y&&x<=this.x+this.width&&y<=this.y+this.height;
};
d.containsPoint=function(point)
{
return point.x>=this.x&&
point.y>=this.y&&
point.x<=this.x+this.width&&
point.y<=this.y+this.height;
};
d.containsRect=function(rect)
{
return rect.x>=this.x&&
rect.y>=this.y&&
rect.x+rect.width<=this.x+this.width&&
rect.y+rect.height<=this.y+this.height;
};
d.equals=function(rect)
{
return this.x==rect.x&&this.y==rect.y&&this.width==rect.width&&this.height==rect.height;
};
d.inflate=function(dx,dy)
{
this.x-=dx;
this.y-=dy;
this.width+=dx*2;
this.height+=dy*2;
};
d.inflatePoint=function(point)
{
this.x-=point.x;
this.y-=point.y;
this.width+=point.x*2;
this.height+=point.y*2;
};
d.intersection=function(rect)
{
var result=new flash.geom.Rectangle();
if(this.isEmpty()||rect.isEmpty())return result;
result.x=Math.max(this.x,rect.x);
result.y=Math.max(this.y,rect.y);
result.width=Math.min(this.x+this.width,rect.x+rect.width)-result.x;
result.height=Math.min(this.y+this.height,rect.y+rect.height)-result.y;
if(result.height<=0||result.width<=0)
{
result.setEmpty();
}
return result;
};
d.intersects=function(rect)
{
if(this.isEmpty()||rect.isEmpty())return false;
var x=Math.max(this.x,rect.x);
var width=Math.min(this.x+this.width,rect.x+rect.width)-x;
if(width<=0)return false;
var y=Math.max(this.y,rect.y);
var height=Math.min(this.y+this.height,rect.y+rect.height)-y;
if(height<=0)return false;
return true;
};
d.isEmpty=function()
{
return this.height<=0||this.width<=0;
};
d.offset=function(dx,dy)
{
this.x+=dx;
this.y+=dy;
};
d.offsetPoint=function(point)
{
this.x+=point.x;
this.y+=point.y;
};
d.setEmpty=function()
{
this.x=0;
this.y=0;
this.width=0;
this.height=0;
};
d.toString=function()
{
return"(x="+this.x+", y="+this.y+", w="+this.width+", h="+this.height+")";
};
d.union=function(rect)
{
if(this.isEmpty())return rect.clone();
if(rect.isEmpty())return this.clone();
var result=new flash.geom.Rectangle();
result.x=Math.min(this.x,rect.x);
result.y=Math.min(this.y,rect.y);
result.width=Math.max(this.x+this.width,rect.x+rect.width)-result.x;
result.height=Math.max(this.y+this.height,rect.y+rect.height)-result.y;
if(result.height<=0||result.width<=0)
{
result.setEmpty();
}
return result;
};
d.add=function(test)
{
return test;
}
flash.addDescription("flash.geom.Rectangle",d,null,null,null);
}
());;
(function()
{
"use strict";
var d={};
d._colorTransform=null;
d._concatenatedColorTransform=null;
d._concatenatedMatrix=null;
d._invertedConcatenatedMatrix=null;
d._displayObject=null;
d._matrix=null;
d._pixelBounds=null;
d.get_colorTransform=function()
{
return this._colorTransform.clone();
};
d.set_colorTransform=function(value)
{
this._colorTransform.copyFrom(value);
};
d.get_concatenatedColorTransform=function()
{
var c=this._colorTransform.clone();
if(this._displayObject._parent!=null)
{
c.concat(this._displayObject._parent._transform.get_concatenatedColorTransform());
}
return c;
};
d.get_concatenatedMatrix=function()
{
var m=this._matrix.clone();
if(this._displayObject._parent!=null)
{
m.concat(this._displayObject._parent._transform.get_concatenatedMatrix());
}
return m;
};
d.get_matrix=function()
{
return this._matrix.clone();
};
d.set_matrix=function(value)
{
this._matrix.copyFrom(value);
};
d.get_pixelBounds=function()
{
return this._pixelBounds;
};
d.Transform=function(displayObject)
{
this._displayObject=displayObject;
this._matrix=new flash.geom.Matrix();
this._concatenatedMatrix=new flash.geom.Matrix();
this._invertedConcatenatedMatrix=new flash.geom.Matrix();
this._colorTransform=new flash.geom.ColorTransform();
this._concatenatedColorTransform=new flash.geom.ColorTransform();
this._pixelBounds=new flash.geom.Rectangle();
};
flash.addDescription("flash.geom.Transform",d,null,null,null);
}
());;
(function()
{
"use strict";
var d={};
d.id=0;
d.type=null;
d.get_object=function()
{
};
d.NewObjectSample=function()
{
this.Sample_constructor();
};
var s={};
s.__init__=function()
{
this.prototype.Sample_constructor=this.__base__;
}
flash.addDescription("flash.sampler.NewObjectSample",d,"flash.sampler.Sample",s,null);
}
());;
(function()
{
"use strict";
var d={};
d.stack=null;
d.time=0;
d.Sample=function()
{
};
flash.addDescription("flash.sampler.Sample",d,null,null,null);
}
());;
(function()
{
"use strict";
var d={};
d.id=0;
d.size=0;
d.DeleteObjectSample=function()
{
this.Sample_constructor();
return;
};
var s={};
s.__init__=function()
{
this.prototype.Sample_constructor=this.__base__;
}
flash.addDescription("flash.sampler.DeleteObjectSample",d,"flash.sampler.Sample",s,null);
}
());;
(function()
{
"use strict";
var d={};
d.file=null;
d.line=0;
d.name=null;
d.StackFrame=function()
{
};
d.toString=function()
{
return this.name+"()"+(this.file?("["+this.file+":"+this.line+"]"):(""));
};
flash.addDescription("flash.sampler.StackFrame",d,null,null,null);
}
());;
(function()
{
"use strict";
var d={};
d._scripts=null;
d._frames=null;
d._scenes=null;
d._oldFrame=-1;
d._updatedFrame=-1;
d._currentFrame=-1;
d._targetFrame=-1;
d._async=false;
d._framesLoaded=0;
d._isPlaying=true;
d._enabled=true;
d._mcId=-1;
d.get_currentFrame=function()
{
var scene=this.get_currentScene();
if(scene)
{
return this._currentFrame+1-scene._offset;
}
else
{
return this._currentFrame+1;
}
};
d.get_currentFrameLabel=function()
{
var scene=this.get_currentScene();
if(scene)
{
var currentFrame=this.get_currentFrame();
var labels=scene.get_labels();
for(var i=0;i<labels.length;i++)
{
var label=labels[i];
if(label.frame==currentFrame)
{
return label.name;
}
}
}
return null;
};
d.get_currentLabel=function()
{
var scene=this.get_currentScene();
var name=null;
if(scene)
{
var currentFrame=this.get_currentFrame();
var labels=scene.get_labels();
for(var i=0;i<labels.length;i++)
{
var label=labels[i];
if(label.frame<=currentFrame)
{
name=label.name;
}
else
{
break;
}
}
}
return name;
};
d.get_currentLabels=function()
{
var scene=this.get_currentScene();
if(scene)
{
return scene.get_labels();
}
else
{
return null;
}
};
d.get_currentScene=function()
{
for(var i=0;i<this._scenes.length;i++)
{
var scene=this._scenes[i];
if(scene._offset<=this._currentFrame&&
this._currentFrame<scene._offset+scene.get_numFrames())
{
return scene;
}
}
return null;
};
d.get_enabled=function()
{
return this._enabled;
};
d.set_enabled=function(value)
{
this._enabled=value;
};
d.get_framesLoaded=function()
{
return this._framesLoaded;
};
d.get_scenes=function()
{
return this._scenes;
};
d.get_totalFrames=function()
{
return this._frames.length;
};
d.get_trackAsMenu=function()
{
return false;
};
d.set_trackAsMenu=function(value)
{
return value;
};
d.get_isPlaying=function()
{
return this._isPlaying;
};
d.MovieClip=function()
{
this._mcId=flash.display.MovieClip._lastId++;
this._scenes=[];
this._scripts=[];
this._frames=[];
this._currentFrame=0;
this.Sprite_constructor();
};
d.__nextFrame__=function()
{
if(this._framesLoaded<this._frames.length)
{
this._framesLoaded++;
}
if(this._isPlaying&&this._frames.length)
{
this._currentFrame++;
if(this._currentFrame>=this._frames.length)
{
this._currentFrame=0;
this.__frameConstruct__(true,true,true);
}
}
};
d.__frameProcessing__=function()
{
while(this._oldFrame!=this._currentFrame)
{
this.__updateNames__();
this._oldFrame=this._currentFrame;
if(this.hasEventListener(flash.events.Event.FRAME_CONSTRUCTED))
{
this.dispatchEvent(new flash.events.Event(flash.events.Event.FRAME_CONSTRUCTED));
}
this._async=true;
this._runFrameScript();
this._async=false;
if(this._targetFrame!=-1)
{
this._currentFrame=this._targetFrame;
this._targetFrame=-1;
this.__frameConstruct__(true,true,true);
this.__updateNames__();
}
}
};
d.__frameConstruct__=function(remove,add,jump)
{
if(this._frames.length)
{
if(this._currentFrame<0)this._currentFrame=0;
else if(this._currentFrame>this._frames.length-1)this._currentFrame=this._frames.length-1;
if(this._updatedFrame!=this._currentFrame)
{
this._updatedFrame=this._currentFrame;
var frame=this._frames[this._currentFrame];
this.__constructChildren__(frame,remove,add,jump);
}
}
}
d.__findByDepth__=function(depth,property)
{
for(var j=this._currentFrame;j>=0;j--)
{
var frame=this._frames[j];
for(var i=0;i<frame.places.length;i++)
{
var place=frame.places[i];
if(place&&place.depth==depth&&place[property])
{
return place[property];
}
}
}
return null;
};
d.__updateMovieClipList__=function()
{
this.Sprite___updateMovieClipList__();
flash.display.MovieClip.__addObject__(this);
}
d.addFrameScript=function()
{
for(var i=0;i<arguments.length;i+=2)
{
var frame=Math.floor(arguments[i]);
var script=arguments[i+1];
if(script!=undefined)
{
this._scripts[frame]=script;
}
}
};
d._runFrameScript=function()
{
var script=this._scripts[this._currentFrame];
if(script)
{
script();
}
};
d.gotoAndPlay=function(frame,scene)
{
this._gotoFrame(frame,scene);
this._isPlaying=true;
};
d.gotoAndStop=function(frame,scene)
{
this._gotoFrame(frame,scene);
this._isPlaying=false;
};
d.nextFrame=function()
{
if(this._frames.length)
{
this._targetFrame=this._currentFrame+1;
if(this._targetFrame>=this._frames.length)
{
this._targetFrame=0;
}
}
this._checkFrameChange();
};
d.nextScene=function()
{
};
d.play=function()
{
this._isPlaying=true;
};
d.prevFrame=function()
{
if(this._frames.length)
{
this._targetFrame=this._currentFrame-1;
if(this._targetFrame<0)
{
this._targetFrame=this._frames.length-1;
}
}
this._checkFrameChange();
};
d.prevScene=function()
{
};
d.stop=function()
{
this._isPlaying=false;
};
d._getScene=function(sceneName)
{
for(var i=0;i<this._scenes.length;i++)
{
var scene=this._scenes[i];
if(scene.get_name()==sceneName)return scene;
}
return null;
};
d._gotoFrame=function(frame,sceneName)
{
var frameType=String(typeof(frame)).toLowerCase();
if(frameType=="number"&&Math.floor(frame)!=frame)
{
frame=1;
}
this._targetFrame=-1;
var scene=null;
var label=null;
if(sceneName)
{
scene=this._getScene(sceneName);
if(scene)
{
if(frameType=="number")
{
this._targetFrame=scene._offset+frame-1;
}
else if(frameType=="string")
{
label=scene._getLabel(frame);
if(label)
{
this._targetFrame=scene._offset+label.frame-1;
}
else
{
throw new Error("FrameLabel "+frame+" was not found in Scene "+sceneName+".");
}
}
}
else
{
throw new Error("Scene "+sceneName+" was not found.");
}
}
else
{
scene=this.get_currentScene();
if(frameType=="number")
{
this._targetFrame=(scene?scene._offset:0)+frame-1;
}
else if(frameType=="string")
{
if(scene)
{
label=scene._getLabel(frame);
if(label)
{
this._targetFrame=scene._offset+label.frame-1;
}
else
{
throw new Error("FrameLabel "+frame+" was not found in currentScene "+scene.name+".");
}
}
else
{
this._targetFrame=this._getLabelFrame(frame);
if(this._targetFrame==-1)
{
throw new Error("FrameLabel "+frame+" was not found.");
}
}
}
}
this._checkFrameChange();
};
d._getLabelFrame=function(label)
{
for(var i=0;i<this._frames.length;i++)
{
var frame=this._frames[i];
if(frame.labels.indexOf(label)!=-1)
{
return i;
}
}
return-1;
};
d._checkFrameChange=function()
{
if(this._targetFrame!=-1&&this._currentFrame!=this._targetFrame&&!this._async)
{
this._currentFrame=this._targetFrame;
this._targetFrame=-1;
this.__frameConstruct__(true,true,true);
this.__frameProcessing__();
}
};
var s={};
s.__init__=function()
{
this.prototype.Sprite_constructor=this.__base__;
this.prototype.Sprite___updateMovieClipList__=this.__base__.prototype.__updateMovieClipList__;
this.__movieClips={};
this._lastId=0;
};
s.__clear__=function()
{
var objects=this.__movieClips;
for(var i in objects)
{
var object=objects[i];
object.__remove=true;
}
}
s.__nextFrame__=function()
{
var objects=this.__movieClips;
for(var i in objects)
{
var object=objects[i];
object.__nextFrame__();
}
};
s.__frameProcessing__=function()
{
var objects=this.__movieClips;
for(var i in objects)
{
var object=objects[i];
object.__frameProcessing__();
}
};
s.__frameConstruct__=function()
{
var objects=this.__movieClips;
for(var i in objects)
{
var object=objects[i];
if(object.__remove)
{
this.__removeObject__(object);
}
else
{
object.__frameConstruct__(true,true,false);
}
}
};
s.__removeObject__=function(object)
{
delete this.__movieClips[object._mcId];
};
s.__addObject__=function(object)
{
object.__remove=false;
this.__movieClips[object._mcId]=object;
};
flash.addDescription("flash.display.MovieClip",d,"flash.display.Sprite",s,null);
}
());;
(function()
{
"use strict";
var d={};
d._transparent=true;
d._fillColor=0xffffffff;
d._rect=null;
d._virtualcanvas=null;
d._context2d=null;
d._transformedImages=null;
d._checkTouch_point=null;
d._checkTouch_matrix=null;
d.get_width=function()
{
return this._rect.width;
};
d.get_height=function()
{
return this._rect.width;
};
d.get_rect=function()
{
return this._rect;
};
d.get_transparent=function()
{
return this._transparent;
};
d.BitmapData=function(width,height,transparent,fillColor)
{
width=Math.round(width);
height=Math.round(height);
if(width>0&&height>0)
{
this._checkTouch_point=new flash.geom.Point();
this._checkTouch_matrix=new flash.geom.Matrix();
this._transparent=transparent==undefined?true:transparent;
this._fillColor=fillColor==undefined?0xffffffff:fillColor;
this._virtualcanvas=document.createElement('canvas');
this._context2d=this._virtualcanvas.getContext('2d');
this._rect=new flash.geom.Rectangle();
this._setSize(width,height);
if(this._transparent)
{
var alpha=(this._fillColor>>24&255)/255;
this._context2d.globalAlpha=alpha;
}
this._context2d.fillStyle=flash.numberToHex(this._fillColor);
this._context2d.fillRect(0,0,width,height);
this._context2d.globalAlpha=1;
}
else
{
throw new Error("Incorect size of BitmapData");
}
};
d._setSize=function(width,height)
{
width=Math.round(width);
height=Math.round(height);
this._rect.width=width;
this._rect.height=height;
this._virtualcanvas.width=width;
this._virtualcanvas.height=height;
this._transformedImages=null;
};
d.applyFilter=function(sourceBitmapData,sourceRect,destPoint,filter)
{
};
d.clone=function()
{
var bitmapData=new flash.display.BitmapData(this._rect.width,this._rect.height,this._transparent,this._fillColor);
bitmapData.copyPixels(this,this._rect,null,null,null,false);
return bitmapData;
};
d.colorTransform=function(rect,colorTransform)
{
};
d.compare=function(otherBitmapData)
{
return null;
};
d.copyChannel=function(sourceBitmapData,sourceRect,destPoint,sourceChannel,destChannel)
{
sourceChannel=Math.floor(sourceChannel);
destChannel=Math.floor(destChannel);
var s=sourceChannel;
var d=destChannel;
var sourceData=sourceBitmapData._context2d.getImageData(sourceRect.x,sourceRect.y,sourceRect.width,sourceRect.height);
var sa=sourceData.data;
var destData=this._context2d.getImageData(destPoint.x,destPoint.y,sourceRect.width,sourceRect.height);
var da=destData.data;
for(var i=0;i<sa.length;i+=4)
{
da[i+d]=sa[i+s];
}
this._context2d.putImageData(destData,destPoint.x,destPoint.y);
};
d.copyPixels=function(sourceBitmapData,sourceRect,destPoint,alphaBitmapData,alphaPoint,mergeAlpha)
{
if(alphaBitmapData==undefined)alphaBitmapData=null;
if(alphaPoint==undefined)alphaPoint=null;
if(mergeAlpha==undefined)mergeAlpha=false;
if(!sourceRect)
{
sourceRect=new flash.geom.Rectangle(0,0,sourceBitmapData.width,sourceBitmapData.height);
}
if(!destPoint)
{
destPoint=new flash.geom.Point();
}
var sourceContext=sourceBitmapData._virtualcanvas.getContext("2d");
var dataCopy=sourceContext.getImageData(sourceRect.x,sourceRect.y,sourceRect.width,sourceRect.height);
this._context2d.putImageData(dataCopy,destPoint.x,destPoint.y);
};
d.dispose=function()
{
this._virtualcanvas=null;
this._context2d=null;
this._transformedImages=null;
this._checkTouch_point=null;
this._checkTouch_matrix=null;
};
d.draw=function(source,matrix,colorTransform,blendMode,clipRect,smoothing)
{
if(matrix==undefined)matrix=new flash.geom.Matrix();
if(colorTransform==undefined)colorTransform=new flash.geom.ColorTransform();
if(blendMode==undefined)blendMode=flash.display.BlendMode.NORMAL;
if(clipRect==undefined)clipRect=new flash.geom.Rectangle(0,0,this._rect.width,this._rect.height);
if(smoothing==undefined)smoothing=false;
var render=flash.display.BitmapData._render;
render.setCanvas(this._virtualcanvas,this._context2d,this._rect.width,this._rect.height);
render._baseMatrix=matrix;
source._render_(render);
};
d.fillRect=function(rect,color)
{
color=Math.floor(color);
this._context2d.clearRect(rect.x,rect.y,rect.width,rect.height);
};
d.floodFill=function(x,y,color)
{
x=Math.floor(x);
y=Math.floor(y);
color=Math.floor(color);
};
d.generateFilterRect=function(sourceRect,filter)
{
return null;
};
d.getColorBoundsRect=function(mask,color,findColor)
{
mask=Math.floor(mask);
color=Math.floor(color);
if(findColor==undefined)findColor=true;
return null;
};
d.getPixel=function(x,y)
{
x=Math.floor(x);
y=Math.floor(y);
if(x<0||y<0||x>=this._rect.width||y>=this._rect.height)
{
return 0;
}
else
{
var d=this._context2d.getImageData(x,y,1,1).data;
var r=d[1];
var g=d[2];
var b=d[3];
return r<<16|g<<8|b;
}
};
d.getPixel32=function(x,y)
{
x=Math.floor(x);
y=Math.floor(y);
if(x<0||y<0||x>=this._rect.width||y>=this._rect.height)
{
return 0;
}
else
{
var d=this._context2d.getImageData(x,y,1,1).data;
var r=d[0];
var g=d[1];
var b=d[2];
var a=d[3];
return a<<24|r<<16|g<<8|b;
}
};
d.getPixels=function(rect)
{
return null;
};
d.hitTest=function(firstPoint,firstAlphaThreshold,secondObject,secondBitmapDataPoint,secondAlphaThreshold)
{
firstAlphaThreshold=Math.floor(firstAlphaThreshold);
if(secondBitmapDataPoint==undefined)secondBitmapDataPoint=null;
if(secondAlphaThreshold==undefined)secondAlphaThreshold=1;
secondAlphaThreshold=Math.floor(secondAlphaThreshold);
return false;
};
d.lock=function()
{
};
d.merge=function(sourceBitmapData,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier)
{
redMultiplier=Math.floor(redMultiplier);
greenMultiplier=Math.floor(greenMultiplier);
blueMultiplier=Math.floor(blueMultiplier);
alphaMultiplier=Math.floor(alphaMultiplier);
};
d.noise=function(randomSeed,low,high,channelOptions,grayScale)
{
randomSeed=Math.floor(randomSeed);
if(low==undefined)low=0;
low=Math.floor(low);
if(high==undefined)high=255;
high=Math.floor(high);
if(channelOptions==undefined)channelOptions=7;
channelOptions=Math.floor(channelOptions);
if(grayScale==undefined)grayScale=false;
};
d.paletteMap=function(sourceBitmapData,sourceRect,destPoint,redArray,greenArray,blueArray,alphaArray)
{
if(redArray==undefined)redArray=null;
if(greenArray==undefined)greenArray=null;
if(blueArray==undefined)blueArray=null;
if(alphaArray==undefined)alphaArray=null;
};
d.perlinNoise=function(baseX,baseY,numOctaves,randomSeed,stitch,fractalNoise,channelOptions,grayScale,offsets)
{
numOctaves=Math.floor(numOctaves);
randomSeed=Math.floor(randomSeed);
if(channelOptions==undefined)channelOptions=7;
channelOptions=Math.floor(channelOptions);
if(grayScale==undefined)grayScale=false;
if(offsets==undefined)offsets=null;
};
d.pixelDissolve=function(sourceBitmapData,sourceRect,destPoint,randomSeed,numPixels,fillColor)
{
if(randomSeed==undefined)randomSeed=0;
randomSeed=Math.floor(randomSeed);
if(numPixels==undefined)numPixels=0;
numPixels=Math.floor(numPixels);
if(fillColor==undefined)fillColor=0;
fillColor=Math.floor(fillColor);
return 0;
};
d.scroll=function(x,y)
{
x=Math.floor(x);
y=Math.floor(y);
};
d.setPixel=function(x,y,color)
{
x=Math.floor(x);
y=Math.floor(y);
color=Math.floor(color);
if(x<0||y<0||x>=this._rect.width||y>=this._rect.height)return;
var r=(value>>16)&0xff;
var g=(value>>8)&0xff;
var b=value&0xff;
var data=this._context2d.getImageData(x,y,1,1);
var d=data.data;
d[i]=r;
d[i]=g;
d[i]=b;
this._context2d.putImageData(data,x,y);
};
d.setPixel32=function(x,y,color)
{
x=Math.floor(x);
y=Math.floor(y);
color=Math.floor(color);
if(x<0||y<0||x>=this._rect.width||y>=this._rect.height)return;
var a=(value>>24)&0xff;
var r=(value>>16)&0xff;
var g=(value>>8)&0xff;
var b=value&0xff;
var data=this._context2d.getImageData(x,y,1,1);
var d=data.data;
d[0]=r;
d[1]=g;
d[2]=b;
d[3]=a;
this._context2d.putImageData(data,x,y);
};
d.setPixels=function(rect,inputByteArray)
{
};
d.threshold=function(sourceBitmapData,sourceRect,destPoint,operation,threshold,color,mask,copySource)
{
threshold=Math.floor(threshold);
if(color==undefined)color=0;
color=Math.floor(color);
mask=Math.floor(mask);
if(copySource==undefined)copySource=false;
return 0;
};
d.unlock=function(changeRect)
{
if(changeRect==undefined)changeRect=null;
};
d._equalsColor=function(color1,color2)
{
for(var i=0;i<color1.length;i++)
{
if(color1[i]!=color2[i])return false;
}
return true;
};
d._getTransfomedCanvas=function(map,colorTransform,filters)
{
map.x=Math.floor(map.x);
map.y=Math.floor(map.y);
map.width=Math.floor(map.width);
map.height=Math.floor(map.height);
var id=map.x+"_"+map.y+"_"+map.width+"_"+map.height;
var value=colorTransform._toValue();
for(var i in filters)
{
value+="_"+filters[i]._toValue();
}
if(!this._transformedImages)this._transformedImages=[];
var image=null;
var canvas=null;
for(var i in this._transformedImages)
{
var current=this._transformedImages[i];
if(current.map[id]==value)
{
canvas=current.canvas;
}
if(!current.map[id]&&!image)
{
image=current;
}
}
if(!canvas)
{
if(image)
{
canvas=image.canvas;
}
else
{
canvas=document.createElement('canvas');
canvas.width=this._virtualcanvas.width;
canvas.height=this._virtualcanvas.height;
image={
canvas:canvas,
map:{}
};
this._transformedImages.push(image);
if(this._transformedImages.length>8)
{
this._transformedImages.shift();
}
}
image.map[id]=value;
var context=canvas.getContext('2d');
var imagedata=this._context2d.getImageData(map.x,map.y,map.width,map.height);
var data=imagedata.data;
if(!colorTransform.isEmpty())
{
var mr=colorTransform.redMultiplier;
var mg=colorTransform.greenMultiplier;
var mb=colorTransform.blueMultiplier;
var ma=colorTransform.alphaMultiplier;
var or=colorTransform.redOffset;
var og=colorTransform.greenOffset;
var ob=colorTransform.blueOffset;
var oa=colorTransform.alphaOffset;
var i=data.length;
while(i--)
{
if(data[i])
{
data[i]=data[i]*ma+oa;
i--;
data[i]=data[i]*mb+ob;
i--;
data[i]=data[i]*mg+og;
i--;
data[i]=data[i]*mr+or;
}
else
{
i-=3;
}
}
}
for(i in filters)
{
var filter=filters[i];
filter._apply(data,map.width,map.height);
}
context.putImageData(imagedata,map.x,map.y);
}
return canvas;
};
d._checkTouch=function(x,y,displayObject)
{
if(this._rect)
{
this._checkTouch_point.x=x;
this._checkTouch_point.y=y;
this._checkTouch_point=displayObject.globalToLocal(this._checkTouch_point);
if(this._rect.containsPoint(this._checkTouch_point))
{
return this._checkTouch_point;
}
}
return null;
};
var s={};
s.__init__=function()
{
this._render=new flash.display.Render2d(null,100,100);
}
flash.addDescription("flash.display.BitmapData",d,null,s,["flash.display.IBitmapDrawable"]);
}
());;
(function()
{
"use strict";
var d={};
d._enabled=true;
d._soundTransform=null;
d._trackAsMenu=false;
d._useHandCursor=true;
d._downState=null;
d._hitTestState=null;
d._overState=null;
d._upState=null;
d._currentState=null;
d._render_=function(render)
{
if(this._currentState&&this._currentState._visible)
{
this.__updateTransform__();
this._currentState._parent=this;
this._currentState._render_(render);
}
};
d.get_downState=function()
{
return this._downState;
};
d.set_downState=function(value)
{
this._downState=value;
return value;
};
d.get_enabled=function()
{
return this._enabled;
};
d.set_enabled=function(value)
{
this._enabled=value;
return value;
};
d.get_hitTestState=function()
{
return this._hitTestState;
};
d.set_hitTestState=function(value)
{
if(this._hitTestState==value)return;
if(this._hitTestState)
{
this._hitTestState._parent=null;
this._hitTestState.removeEventListener(flash.events.MouseEvent.MOUSE_OVER,flash.bindFunction(this,this._mouseOver));
this._hitTestState.removeEventListener(flash.events.MouseEvent.MOUSE_OUT,flash.bindFunction(this,this._mouseOut));
this._hitTestState.removeEventListener(flash.events.MouseEvent.MOUSE_DOWN,flash.bindFunction(this,this._mouseDown));
this._hitTestState.removeEventListener(flash.events.MouseEvent.MOUSE_UP,flash.bindFunction(this,this._mouseUp));
}
this._hitTestState=value;
if(this._hitTestState)
{
this._hitTestState._parent=this;
this._hitTestState.addEventListener(flash.events.MouseEvent.MOUSE_OVER,flash.bindFunction(this,this._mouseOver));
this._hitTestState.addEventListener(flash.events.MouseEvent.MOUSE_OUT,flash.bindFunction(this,this._mouseOut));
this._hitTestState.addEventListener(flash.events.MouseEvent.MOUSE_DOWN,flash.bindFunction(this,this._mouseDown));
this._hitTestState.addEventListener(flash.events.MouseEvent.MOUSE_UP,flash.bindFunction(this,this._mouseUp));
}
return value;
};
d.get_overState=function()
{
return this._overState;
};
d.set_overState=function(value)
{
this._overState=value;
return value;
};
d.get_soundTransform=function()
{
return this._soundTransform;
};
d.set_soundTransform=function(sndTransform)
{
this._soundTransform=value;
return value;
};
d.get_trackAsMenu=function()
{
return this._trackAsMenu;
};
d.set_trackAsMenu=function(value)
{
this._trackAsMenu=value;
return value;
};
d.get_upState=function()
{
return this._upState;
};
d.set_upState=function(value)
{
this._upState=value;
return value;
};
d.get_useHandCursor=function()
{
return this._useHandCursor;
};
d.set_useHandCursor=function(value)
{
this._useHandCursor=value;
return value;
};
d.SimpleButton=function(upState,overState,downState,hitTestState)
{
this.InteractiveObject_constructor();
if(upState==undefined)upState=null;
if(overState==undefined)overState=null;
if(downState==undefined)downState=null;
if(hitTestState==undefined)hitTestState=null;
if(upState)
{
this.set_upState(upState);
}
if(overState)
{
this.set_overState(overState);
}
if(downState)
{
this.set_downState(downState);
}
if(hitTestState)
{
this.set_hitTestState(hitTestState);
}
this._currentState=this._upState;
if(!this.get_hitTestState())this.set_hitTestState(this._upState);
};
d.getBounds=function(targetCoordinateSpace)
{
if(this._hitTestState)
{
this._hitTestState._parent=this;
return this._hitTestState.getBounds(targetCoordinateSpace);
}
else
{
return new flash.geom.Rectangle();
}
};
d._mouseOver=function(e)
{
this._currentState=this._overState;
};
d._mouseOut=function(e)
{
this._currentState=this._upState;
};
d._mouseDown=function(e)
{
this._currentState=this._downState;
};
d._mouseUp=function(e)
{
this._currentState=this._overState;
};
d._updateInteractiveEvent=function(data,dispatch)
{
if(!this._visible)return null;
var point=null;
if(this._hitTestState)
{
this._hitTestState._parent=this;
point=this._hitTestState._updateInteractiveEvent(data,dispatch);
}
if(this._mouseEnabled)
{
if(point&&dispatch)
{
this._dispatchInteractiveEvent(data,point.x,point.y,this);
}
this._updateMoveEvent(point,data,dispatch);
}
return point;
};
var s={};
s.__init__=function()
{
this.prototype.InteractiveObject_constructor=this.__base__;
};
flash.addDescription("flash.display.SimpleButton",d,"flash.display.InteractiveObject",s,null);
}
());;
(function()
{
"use strict";
var d={};
d.IBitmapDrawable=function()
{
};
flash.addDescription("flash.display.IBitmapDrawable",d,null,null,null);
}
());;
(function()
{
"use strict";
var d={};
d.IGraphicsStroke=function()
{
};
flash.addDescription("flash.display.IGraphicsStroke",d,null,null,null);
}
());;
(function()
{
"use strict";
var d={};
d.GraphicsEndFill=function()
{
return;
};
flash.addDescription("flash.display.GraphicsEndFill",d,null,null,["flash.display.IGraphicsFill","flash.display.IGraphicsData"]);
}
());;
(function()
{
"use strict";
var d={};
d.IGraphicsFill=function()
{
};
flash.addDescription("flash.display.IGraphicsFill",d,null,null,null);
}
());;
(function()
{
"use strict";
var s={};
s.__init__=function()
{
this.HORIZONTAL="horizontal";
this.NONE="none";
this.NORMAL="normal";
this.VERTICAL="vertical";
};
flash.addDescription("flash.display.LineScaleMode",null,null,s,null);
}
());;
(function()
{
"use strict";
var d={};
d.frame=0;
d.name=null;
d.FrameLabel=function(name,frame)
{
this.name=name;
this.frame=Math.floor(frame);
};
flash.addDescription("flash.display.FrameLabel",d,null,null,null);
}
());;
(function()
{
"use strict";
var s={};
s.__init__=function()
{
this.ALPHA=8;
this.BLUE=4;
this.GREEN=2;
this.RED=1;
};
flash.addDescription("flash.display.BitmapDataChannel",null,null,s,null);
}
());;
(function()
{
"use strict";
var d={};
d.GraphicsPathWinding=function()
{
return;
};
var s={};
s.__init__=function()
{
this.EVEN_ODD="evenodd";
this.NON_ZERO="nonzero";
};
flash.addDescription("flash.display.GraphicsPathWinding",d,null,s,null);
}
());;
(function()
{
"use strict";
var s={};
s.__init__=function()
{
this.BOTTOM="B";
this.BOTTOM_LEFT="BL";
this.BOTTOM_RIGHT="BR";
this.LEFT="L";
this.RIGHT="R";
this.TOP="T";
this.TOP_LEFT="TL";
this.TOP_RIGHT="TR";
};
flash.addDescription("flash.display.StageAlign",null,null,s,null);
}
());;
(function()
{
"use strict";
var d={};
d._offset=0;
d._labels=null;
d._name=null;
d._numFrames=0;
d.get_labels=function()
{
return this._labels;
};
d.get_name=function()
{
return this._name;
};
d.get_numFrames=function()
{
return this._numFrames;
};
d.Scene=function(name,labels,numFrames)
{
this._name=name;
this._labels=labels;
this._numFrames=Math.floor(numFrames);
};
d._getLabel=function(frameName)
{
for(var i in this._labels)
{
var label=this._labels[i];
if(label.name==frameName)
{
return label;
}
}
return null;
};
flash.addDescription("flash.display.Scene",d,null,null,null);
}
());;
(function()
{
"use strict";
var d={};
d._content=null;
d._applicationDomain=null;
d._actionScriptVersion=0;
d._swfVersion=0;
d._bytesLoaded=0;
d._bytesTotal=100;
d._childAllowsParent=true;
d._parentAllowsChild=true;
d._contentType=null;
d._width=0;
d._height=0;
d._frameRate=0;
d._loader=null;
d._loaderURL=null;
d._url=null;
d._parameters=null;
d.get_actionScriptVersion=function()
{
return this._actionScriptVersion;
};
d.get_applicationDomain=function()
{
return this._applicationDomain;
};
d.get_bytes=function()
{
return null;
};
d.get_bytesLoaded=function()
{
return this._bytesLoaded;
};
d.get_bytesTotal=function()
{
return this._bytesTotal;
};
d.get_childAllowsParent=function()
{
return this._childAllowsParent;
};
d.get_content=function()
{
return this._content;
};
d.set_content=function(value)
{
this._content=value;
this.dispatchEvent(new flash.events.Event(flash.events.Event.COMPLETE));
};
d.get_contentType=function()
{
return this._contentType;
};
d.get_frameRate=function()
{
return this._frameRate;
};
d.get_height=function()
{
return this._height;
};
d.get_loader=function()
{
return this._loader;
};
d.get_loaderURL=function()
{
return this._loaderURL;
};
d.get_parameters=function()
{
return this._parameters;
};
d.set_parameters=function(value)
{
this._parameters=value;
};
d.get_parentAllowsChild=function()
{
return this._parentAllowsChild;
};
d.get_sameDomain=function()
{
return true;
};
d.get_sharedEvents=function()
{
return null;
};
d.get_swfVersion=function()
{
return this._swfVersion;
};
d.get_url=function()
{
return this._url;
};
d.get_width=function()
{
return this._width;
};
d.LoaderInfo=function()
{
this.EventDispatcher_constructor();
this._parameters={};
this._applicationDomain=flash.system.ApplicationDomain.get_currentDomain();
};
d._getArgs=function()
{
return null;
};
var s={};
s.__init__=function()
{
this.prototype.EventDispatcher_constructor=this.__base__;
};
s.getLoaderInfoByDefinition=function(object)
{
return null;
};
flash.addDescription("flash.display.LoaderInfo",d,"flash.events.EventDispatcher",s,null);
}
());;(function()
{
"use strict";
var d={};
d._canvas=null;
d._gl=null;
d._shaderProgram=null;
d._canvasRect=null;
d._width=0;
d._height=0;
d._projectionMatrix;
d._matrix;
d._usermatrix;
d._identy_matrix;
d._rect1x1;
d._imageCache=null;
d._textureCache=null;
d._texture;
d._cacheIndex=-1;
d._vertexPositionBuffer;
d._vertexIndexBuffer;
d._texCoordBuffer;
d._vertexIndices=null;
d._vertices=null;
d._positionLocation;
d._texCoordLocation;
d._flipYLocation;
d._fbo=null;
d._fboUniform=null;
d._maskFbo=null;
d._maskTexture=null;
d._u_imageLocation;
d._u_maskLocation;
d._maskMode;
d._textfields=null;
d._colorTransform;
d._colorTransformMatrix=null;
d._batch=null;
d._batchVertexPositionBuffer=null;
d._currentBitmapSource=null;
d._batchAmount=0;
d._batchindices_offset=0;
d._currentColorTransform=null;
d._currentColorTransformchanged=false;
d._currentObjectType="";
d._maskRender=null;
d.Render3d=function(canvasId,width,height)
{
this._width=width
this._height=height;
this._canvas=document.getElementById(canvasId);
this._gl=this._initWebGL(this._canvas);
if(this._gl==null)
{
return null;
}
this._maskRender=new flash.display.Render2d(null,width,height,true);
this._imageCache=[];
this._textureCache=[];
this._textfields=[];
this._vertexIndices=[];
this._vertices=[];
this._colorTransformMatrix=[1,1,1,
1,0,0,
0,0,0];
this._batch={
vertexIndexBuffer:[],
vertexPositionBuffer:[],
texCoordBuffer:[]
};
this._currentColorTransform=[];
this._canvas.onselectstart=function()
{
return false;
}
var gl=this._gl;
this._canvasRect=this._canvas.getBoundingClientRect();
gl.viewportWidth=this._width;
gl.viewportHeight=this._height;
this._rect1x1=new Float32Array([0,0,1,0,0,1,1,1]);
gl.disable(gl.DEPTH_TEST);
gl.disable(gl.CULL_FACE);
gl.enable(gl.BLEND);
gl.colorMask(true,true,true,true);
this._initShaders();
this._initBuffers();
this._initMaskFramebufferTexture();
this._u_imageLocation=gl.getUniformLocation(this._shaderProgram,"u_image");
this._u_maskLocation=gl.getUniformLocation(this._shaderProgram,"u_mask");
gl.uniform1i(this._u_imageLocation,0);
gl.uniform1i(this._u_maskLocation,1);
this._maskMode=gl.getUniformLocation(this._shaderProgram,"u_maskmode");
gl.uniform1f(this._maskMode,0);
this._colorTransform=gl.getUniformLocation(this._shaderProgram,"u_colortransform");
gl.uniformMatrix3fv(this._colorTransform,false,this._colorTransformMatrix);
this._positionLocation=gl.getAttribLocation(this._shaderProgram,"a_position");
gl.enableVertexAttribArray(this._positionLocation);
this._matrixLocation=gl.getUniformLocation(this._shaderProgram,"u_matrix");
this._flipYLocation=gl.getUniformLocation(this._shaderProgram,"u_flipY");
gl.uniform1f(this._flipYLocation,1);
this._projectionMatrix=gl.getUniformLocation(this._shaderProgram,"pMatrix");
gl.uniformMatrix4fv(this._projectionMatrix,false,[2.0/this._width,0,0,0,0,-2.0/this._height,0,0,0,0,1.0,1.0,-1.0,1.0,0,0]);
this._texCoordLocation=gl.getAttribLocation(this._shaderProgram,"a_texCoord");
gl.bindBuffer(gl.ARRAY_BUFFER,this._texCoordBuffer);
gl.enableVertexAttribArray(this._texCoordLocation);
gl.vertexAttribPointer(this._texCoordLocation,2,gl.FLOAT,false,0,0);
gl.bufferData(gl.ARRAY_BUFFER,this._rect1x1,gl.STATIC_DRAW);
gl.blendFuncSeparate(gl.SRC_ALPHA,gl.ONE_MINUS_SRC_ALPHA,gl.ONE,gl.ONE_MINUS_SRC_ALPHA);
gl.enable(gl.BLEND);
this._identy_matrix=[1,0,0,
0,1,0,
0,0,1];
this._matrix=[1,0,0,
0,1,0,
0,0,1];
this._usermatrix=[1,0,0,
0,1,0,
0,0,1];
gl.bindBuffer(gl.ARRAY_BUFFER,this._vertexPositionBuffer);
gl.bufferData(gl.ARRAY_BUFFER,this._rect1x1,gl.STATIC_DRAW);
gl.vertexAttribPointer(this._positionLocation,2,gl.FLOAT,false,0,0);
gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this._vertexIndexBuffer);
gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,new Uint16Array([0,1,3,0,3,2]),gl.STATIC_DRAW);
this._vertexIndexBuffer.itemSize=1;
this._vertexIndexBuffer.numItems=6;
};
d._initShaders=function()
{
var gl=this._gl;
var vertexShader=gl.createShader(gl.VERTEX_SHADER);
gl.shaderSource(vertexShader,this._getVertexShaderSource());
gl.compileShader(vertexShader);
if(!gl.getShaderParameter(vertexShader,gl.COMPILE_STATUS))
{
throw"Could not compile "+
" shader:\n\n"+gl.getShaderInfoLog(s);
}
var fragmentShader=gl.createShader(gl.FRAGMENT_SHADER);
gl.shaderSource(fragmentShader,this._getFragmentShaderSource());
gl.compileShader(fragmentShader);
if(!gl.getShaderParameter(fragmentShader,gl.COMPILE_STATUS))
{
throw"Could not compile "+
" shader:\n\n"+gl.getShaderInfoLog(fragmentShader);
}
this._shaderProgram=gl.createProgram();
flash.trace(this._shaderProgram,fragmentShader,vertexShader)
gl.attachShader(this._shaderProgram,fragmentShader);
gl.attachShader(this._shaderProgram,vertexShader);
gl.linkProgram(this._shaderProgram);
gl.useProgram(this._shaderProgram);
}
d._initBuffers=function()
{
var gl=this._gl;
this._fbo=gl.createFramebuffer();
this._maskFbo=gl.createFramebuffer();
this._vertexIndexBuffer=gl.createBuffer();
this._vertexPositionBuffer=gl.createBuffer();
this._texCoordBuffer=gl.createBuffer();
this._batchVertexIndexBuffer=gl.createBuffer();
this._batchVertexPositionBuffer=gl.createBuffer();
this._batchTexCoordBuffer=gl.createBuffer();
}
d._getFragmentShaderSource=function()
{
var fsSource=[
"precision mediump float;",
"uniform sampler2D u_image;",
"uniform sampler2D u_mask;",
"uniform float u_maskmode;",
"uniform mat3 u_colortransform;",
"varying vec2 v_texCoord;",
"varying vec2 v_maskCoord;",
"void main(void) {",
"vec4 color = texture2D(u_image, v_texCoord);",
"vec4 mask = texture2D(u_mask, v_maskCoord);",
"vec4 mult = vec4(u_colortransform[0][0], u_colortransform[0][1], u_colortransform[0][2],u_colortransform[1][0]);",
"vec4 offset = vec4(u_colortransform[1][1], u_colortransform[1][2], u_colortransform[2][0], u_colortransform[2][1]);",
"if (u_maskmode == 1.0) color.a=color.a*mask.a;",
"gl_FragColor = (color*mult)+offset;",
"}"
].join("\n");
return fsSource;
};
d._getVertexShaderSource=function()
{
var vsSource=[
"uniform mat4 pMatrix;",
"attribute vec2 a_position;",
"attribute vec2 a_texCoord;",
"varying vec2 v_texCoord;",
"varying vec2 v_maskCoord;",
"uniform float u_flipY;",
"uniform mat3 u_matrix;",
"void main(void) {",
"vec4 position = pMatrix * vec4(u_matrix * vec3(a_position.x, a_position.y*u_flipY, 1.0),1.0);",
"vec4 m_position = pMatrix * vec4(vec3(a_position.x, a_position.y, 1.0),1.0);",
"v_maskCoord = vec2((m_position.x+1.0)/2.0,(1.0-m_position.y)/2.0);",
"gl_Position = position;",
"v_texCoord = a_texCoord;",
"}"].join("\n");
return vsSource;
};
d._initWebGL=function(canvas)
{
this._gl=null;
var gl=null;
try
{
gl=canvas.getContext("webgl",{
antialias:true,
premultipliedAlpha:false,
stencil:true
})||canvas.getContext("experimental-webgl",{
antialias:true,
premultipliedAlpha:false,
stencil:true
});
}
catch(e)
{
}
if(!gl)
{
return null;
}
else
{
return gl;
}
}
d.setTransform=function(a,b,c,d,tx,ty)
{
var matrix=this._matrix;
matrix[0]=a;
matrix[1]=b;
matrix[2]=0.0;
matrix[3]=c;
matrix[4]=d;
matrix[5]=0.0;
matrix[6]=tx;
matrix[7]=ty;
matrix[8]=1.0;
}
d.setColorTransform=function(ctransform)
{
var transform=[ctransform.redMultiplier,
ctransform.greenMultiplier,
ctransform.blueMultiplier,
ctransform.alphaMultiplier,
ctransform.redOffset,
ctransform.greenOffset,
ctransform.blueOffset,
ctransform.alphaOffset];
var currentColorTransform=this._currentColorTransform;
var currentColorTransformchanged=false;
for(var i=0;i<8;i++)
{
if(currentColorTransform[i]!=transform[i])
{
currentColorTransformchanged=true;
}
}
if(currentColorTransformchanged==true)
{
if(this._batchAmount!=0)
{
this._renderBatch();
}
this._currentColorTransform=transform;
var colorTransformMatrix=this._colorTransformMatrix;
colorTransformMatrix[0]=transform[0]
colorTransformMatrix[1]=transform[1]
colorTransformMatrix[2]=transform[2]
colorTransformMatrix[3]=transform[3]
colorTransformMatrix[4]=transform[4]/255;
colorTransformMatrix[5]=transform[5]/255;
colorTransformMatrix[6]=transform[6]/255;
colorTransformMatrix[7]=transform[7]/255;
this._gl.uniformMatrix3fv(this._colorTransform,false,colorTransformMatrix);
}
}
d._renderMasks=function(masks)
{
var masksLength=masks.length;
if(masksLength==0)
{
return;
}
if(this._batchAmount!=0)
{
this._renderBatch();
}
var context=this._maskRender._context;
context.globalCompositeOperation="source-over";
context.setTransform(1,0,0,1,0,0);
context.fillRect(0,0,this._width,this._height);
context.globalCompositeOperation="source-in";
for(var i=0;i<masksLength;i++)
{
masks[i]._render_(this._maskRender);
}
var gl=this._gl;
var w=this._width;
var h=this._height;
var img=this._maskRender._canvas;
if(this._maskTexture==null)
{
gl.activeTexture(gl.TEXTURE1);
this._maskTexture=this._createGLTexture(img);
gl.activeTexture(gl.TEXTURE0);
}
else
{
gl.activeTexture(gl.TEXTURE1);
gl.bindTexture(gl.TEXTURE_2D,this._maskTexture);
gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,gl.RGBA,gl.UNSIGNED_BYTE,img);
gl.activeTexture(gl.TEXTURE0);
}
gl.uniform1f(this._maskMode,1.0);
}
d.startMask=function()
{
}
d.stopMask=function()
{
}
d.applyMask2d=function()
{
if(this._batchAmount!=0)
{
this._renderBatch();
}
this._gl.uniform1f(this._maskMode,0.0);
}
d.clear=function()
{
var gl=this._gl;
gl.uniform1f(this._maskMode,0);
gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER_BIT|gl.STENCIL_BUFFER_BIT);
}
d.drawTextureInfo=function(child,childMatrix)
{
var textureInfo=child._graphics._textureInfo;
var bounds=textureInfo.bounds;
var imageObject=textureInfo.bitmap._virtualcanvas;
if(imageObject==this._currentBitmapSource)
{
this._addToBatch(textureInfo);
}
else
{
if(this._currentBitmapSource==null)
{
this._currentBitmapSource=imageObject;
this._addToBatch(textureInfo);
}
else
{
this._renderBatch();
this._currentBitmapSource=imageObject;
this._addToBatch(textureInfo);
}
}
this._currentObjectType="mc";
}
d._addToBatch=function(textureInfo)
{
var img=this._currentBitmapSource;
var map=textureInfo.map;
var x=textureInfo.bounds.x;
var y=textureInfo.bounds.y;
var w=textureInfo.bounds.width;
var h=textureInfo.bounds.height;
var x=textureInfo.bounds.x;
var y=textureInfo.bounds.y;
var w=textureInfo.bounds.width;
var h=textureInfo.bounds.height;
var x0=x;
var y0=y;
var x1=x+w;
var y1=y+h;
var p0=this._transformPoint(x0,y0);
var p1=this._transformPoint(x1,y0);
var p2=this._transformPoint(x0,y1);
var p3=this._transformPoint(x1,y1);
this._batch.vertexPositionBuffer.push(p0[0],p0[1],p1[0],p1[1],
p2[0],p2[1],p3[0],p3[1]);
var tx0=map.x/img.width;
var ty0=map.y/img.height;
var tx1=(map.width+map.x)/img.width;
var ty1=(map.height+map.y)/img.height;
this._batch.texCoordBuffer.push(tx0,ty0,tx1,ty0,
tx0,ty1,tx1,ty1);
var batchindices_offset=this._batchindices_offset;
this._batch.vertexIndexBuffer.push(0+batchindices_offset,1+batchindices_offset,3+batchindices_offset,
0+batchindices_offset,3+batchindices_offset,2+batchindices_offset);
this._batchindices_offset+=4;
this._batchAmount++;
}
d._drawText=function(child)
{
if(this._batchAmount!=0)
{
this._renderBatch();
}
var gl=this._gl;
var textfield=child._get3DtextField(gl);
this._initTextFramebuffer(textfield);
var w=textfield.width;
var h=textfield.height;
gl.uniformMatrix4fv(this._projectionMatrix,false,[2.0/w,0,0,0,0,-2.0/h,0,0,0,0,1.0,1.0,-1.0,1.0,0,0]);
gl.viewport(0,0,w,h);
this._texture=textfield.fontTexture;
gl.bindTexture(gl.TEXTURE_2D,this._texture);
this._cacheIndex=-1;
var usermatrix=this._usermatrix;
var matrix=this._matrix;
usermatrix[0]=matrix[0];
usermatrix[1]=matrix[1];
usermatrix[3]=matrix[3];
usermatrix[4]=matrix[4];
usermatrix[6]=matrix[6];
usermatrix[7]=matrix[7];
this._initTextBuffers(textfield);
gl.uniformMatrix3fv(this._matrixLocation,false,this._identy_matrix);
gl.drawElements(gl.TRIANGLES,textfield.fontVertexIndexBuffer.numItems,gl.UNSIGNED_SHORT,0);
gl.bindTexture(gl.TEXTURE_2D,textfield.fboTexture);
gl.bindFramebuffer(gl.FRAMEBUFFER,null);
gl.bindBuffer(gl.ARRAY_BUFFER,this._vertexPositionBuffer);
gl.vertexAttribPointer(this._positionLocation,2,gl.FLOAT,false,0,0);
gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this._vertexIndexBuffer);
gl.bindBuffer(gl.ARRAY_BUFFER,this._texCoordBuffer);
gl.enableVertexAttribArray(this._texCoordLocation);
gl.vertexAttribPointer(this._texCoordLocation,2,gl.FLOAT,false,0,0);
gl.colorMask(true,true,true,true);
this._drawFramebuffer(textfield);
}
d._initTextFramebuffer=function(textfield)
{
var gl=this._gl;
var w=textfield.width;
var h=textfield.height;
var fboTexture=textfield.fboTexture;
gl.bindTexture(gl.TEXTURE_2D,fboTexture);
gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,w,h,0,gl.RGBA,gl.UNSIGNED_BYTE,null);
gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR);
gl.bindFramebuffer(gl.FRAMEBUFFER,this._fbo);
gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,fboTexture,0);
}
d._initTextBuffers=function(textfield)
{
var gl=this._gl;
var fontVertexIndexBuffer=textfield.fontVertexIndexBuffer==null?gl.createBuffer():textfield.fontVertexIndexBuffer;
textfield.fontVertexIndexBuffer=fontVertexIndexBuffer;
var fontVertexPositionBuffer=textfield.fontVertexPositionBuffer==null?gl.createBuffer():textfield.fontVertexPositionBuffer;
textfield.fontVertexPositionBuffer=fontVertexPositionBuffer;
var textFieldTexCoordBuffer=textfield.textFieldTexCoordBuffer==null?gl.createBuffer():textfield.textFieldTexCoordBuffer;
textfield.textFieldTexCoordBuffer=textFieldTexCoordBuffer;
gl.bindBuffer(gl.ARRAY_BUFFER,textFieldTexCoordBuffer);
gl.bufferData(gl.ARRAY_BUFFER,textfield.textureVertices,gl.STATIC_DRAW);
textFieldTexCoordBuffer.itemSize=2;
textFieldTexCoordBuffer.numItems=textfield.charsAmount*2;
gl.enableVertexAttribArray(this._texCoordLocation);
gl.vertexAttribPointer(this._texCoordLocation,2,gl.FLOAT,false,0,0);
gl.bindBuffer(gl.ARRAY_BUFFER,fontVertexPositionBuffer);
gl.bufferData(gl.ARRAY_BUFFER,textfield.fontVertices,gl.STATIC_DRAW);
fontVertexPositionBuffer.itemSize=2;
fontVertexPositionBuffer.numItems=textfield.charsAmount*2;
gl.vertexAttribPointer(this._positionLocation,2,gl.FLOAT,false,0,0);
gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,fontVertexIndexBuffer);
gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,textfield.fontVertexIndices,gl.STATIC_DRAW);
fontVertexIndexBuffer.itemSize=1;
fontVertexIndexBuffer.numItems=textfield.charsAmount*6;
}
d._drawFramebuffer=function(textField)
{
var w=textField.width;
var h=textField.height;
var gl=this._gl;
gl.bindTexture(gl.TEXTURE_2D,textField.fboTexture);
gl.uniform1f(this._flipYLocation,-1);
gl.viewport(0,0,this._width,this._height);
gl.uniformMatrix4fv(this._projectionMatrix,false,[2.0/this._width,0,0,0,0,-2.0/this._height,0,0,0,0,1.0,1.0,-1.0,1.0,0,0]);
var x=0;
var y=h;
var usermatrix=this._usermatrix;
var matrix=this._matrix;
usermatrix[0]=matrix[0]*w;
usermatrix[1]=matrix[1]*w;
usermatrix[3]=matrix[3]*h;
usermatrix[4]=matrix[4]*h;
usermatrix[6]=matrix[6]+x*matrix[0]+y*matrix[3];
usermatrix[7]=matrix[7]+x*matrix[1]+y*matrix[4];
gl.uniformMatrix3fv(this._matrixLocation,false,usermatrix);
gl.drawElements(gl.TRIANGLES,this._vertexIndexBuffer.numItems,gl.UNSIGNED_SHORT,0);
gl.uniform1f(this._flipYLocation,1);
}
d.drawGraphics=function(child,childMatrix)
{
var imageObject=child._graphics._renderData();
if(imageObject.rect.width>0&&imageObject.rect.height>0)
{
var rect=imageObject.rect;
var x=rect.x;
var y=rect.y;
var w=rect.width;
var h=rect.height;
if(this._batchAmount!=0)
{
this._renderBatch();
}
var gl=this._gl;
if(this._currentObjectType=="mc")
{
gl.bindBuffer(gl.ARRAY_BUFFER,this._vertexPositionBuffer);
gl.vertexAttribPointer(this._positionLocation,2,gl.FLOAT,false,0,0);
gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this._vertexIndexBuffer);
gl.bindBuffer(gl.ARRAY_BUFFER,this._texCoordBuffer);
gl.enableVertexAttribArray(this._texCoordLocation);
gl.vertexAttribPointer(this._texCoordLocation,2,gl.FLOAT,false,0,0);
this._currentObjectType="image";
}
var cacheIndex=this._imageCache.indexOf(imageObject.img);
if(cacheIndex!=-1)
{
if(cacheIndex!=this._cacheIndex)
{
this._cacheIndex=cacheIndex;
this._texture=this._textureCache[cacheIndex];
gl.bindTexture(gl.TEXTURE_2D,this._texture);
}
}
else
{
this._imageCache.push(imageObject.img);
this._texture=this._createGLTexture(imageObject.img);
gl.bindTexture(gl.TEXTURE_2D,this._texture);
}
var usermatrix=this._usermatrix;
var matrix=this._matrix;
usermatrix[0]=matrix[0]*w;
usermatrix[1]=matrix[1]*w;
usermatrix[3]=matrix[3]*h;
usermatrix[4]=matrix[4]*h;
usermatrix[6]=matrix[6]+x*matrix[0]+y*matrix[3];
usermatrix[7]=matrix[7]+x*matrix[1]+y*matrix[4];
gl.uniformMatrix3fv(this._matrixLocation,false,usermatrix);
gl.drawElements(gl.TRIANGLES,this._vertexIndexBuffer.numItems,gl.UNSIGNED_SHORT,0);
}
}
d.drawBitmap=function(bitmapData)
{
if(!bitmapData)return;
if(this._batchAmount!=0)
{
this._renderBatch();
}
var gl=this._gl;
var w=bitmapData._width;
var h=bitmapData._height;
if(this._currentObjectType=="mc")
{
gl.bindBuffer(gl.ARRAY_BUFFER,this._vertexPositionBuffer);
gl.vertexAttribPointer(this._positionLocation,2,gl.FLOAT,false,0,0);
gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this._vertexIndexBuffer);
gl.bindBuffer(gl.ARRAY_BUFFER,this._texCoordBuffer);
gl.enableVertexAttribArray(this._texCoordLocation);
gl.vertexAttribPointer(this._texCoordLocation,2,gl.FLOAT,false,0,0);
this._currentObjectType="image";
}
var img=bitmapData._get_Texture(gl);
if(img)
{
gl.bindTexture(gl.TEXTURE_2D,img);
}
var usermatrix=this._usermatrix;
var matrix=this._matrix;
usermatrix[0]=matrix[0]*w;
usermatrix[1]=matrix[1]*w;
usermatrix[3]=matrix[3]*h;
usermatrix[4]=matrix[4]*h;
usermatrix[6]=matrix[6];
usermatrix[7]=matrix[7];
gl.uniformMatrix3fv(this._matrixLocation,false,usermatrix);
gl.drawElements(gl.TRIANGLES,this._vertexIndexBuffer.numItems,gl.UNSIGNED_SHORT,0);
};
d._renderBatch=function()
{
var batch=this._batch;
var gl=this._gl;
var batchTexCoordBuffer=this._batchTexCoordBuffer;
var batchVertexIndexBuffer=this._batchVertexIndexBuffer;
var batchVertexPositionBuffer=this._batchVertexPositionBuffer;
var batchAmount=this._batchAmount;
if(batch.vertexIndexBuffer.length==0)
{
return;
}
var img=this._currentBitmapSource;
var cacheIndex=this._imageCache.indexOf(img);
if(cacheIndex!=-1)
{
this._cacheIndex=cacheIndex;
this._texture=this._textureCache[cacheIndex];
gl.bindTexture(gl.TEXTURE_2D,this._texture);
}
else
{
this._imageCache.push(img);
this._texture=this._createGLTexture(img);
gl.bindTexture(gl.TEXTURE_2D,this._texture);
this._cacheIndex=this._textureCache[this._textureCache.length-1];
}
gl.bindBuffer(gl.ARRAY_BUFFER,batchTexCoordBuffer);
gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(batch.texCoordBuffer),gl.STATIC_DRAW);
batchTexCoordBuffer.itemSize=2;
batchTexCoordBuffer.numItems=batchAmount*2;
gl.enableVertexAttribArray(this._texCoordLocation);
gl.vertexAttribPointer(this._texCoordLocation,2,gl.FLOAT,false,0,0);
gl.bindBuffer(gl.ARRAY_BUFFER,batchVertexPositionBuffer);
gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(batch.vertexPositionBuffer),gl.STATIC_DRAW);
batchVertexPositionBuffer.itemSize=2;
batchVertexPositionBuffer.numItems=batchAmount*2;
gl.vertexAttribPointer(this._positionLocation,2,gl.FLOAT,false,0,0);
gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,batchVertexIndexBuffer);
gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,new Uint16Array(batch.vertexIndexBuffer),gl.STATIC_DRAW);
batchVertexIndexBuffer.itemSize=1;
batchVertexIndexBuffer.numItems=batchAmount*6;
gl.uniformMatrix3fv(this._matrixLocation,false,this._identy_matrix);
gl.drawElements(gl.TRIANGLES,batchVertexIndexBuffer.numItems,gl.UNSIGNED_SHORT,0);
this._batch.vertexIndexBuffer=[];
this._batch.vertexPositionBuffer=[];
this._batch.texCoordBuffer=[];
this._batchAmount=0;
this._batchindices_offset=0;
}
d._initMaskFramebufferTexture=function()
{
var gl=this._gl;
gl.activeTexture(gl.TEXTURE1);
if(this._maskTexture==null)
{
this._maskTexture=gl.createTexture();
}
gl.bindTexture(gl.TEXTURE_2D,this._maskTexture);
gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,this._width,this._height,0,gl.RGBA,gl.UNSIGNED_BYTE,null);
gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR);
gl.bindFramebuffer(gl.FRAMEBUFFER,this._maskFbo);
gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,this._maskTexture,0);
gl.bindFramebuffer(gl.FRAMEBUFFER,null);
gl.activeTexture(gl.TEXTURE0);
}
d._createGLTexture=function(img)
{
var gl=this._gl;
var texture=gl.createTexture();
gl.bindTexture(gl.TEXTURE_2D,texture);
gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,gl.RGBA,gl.UNSIGNED_BYTE,img);
gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR);
gl.bindTexture(gl.TEXTURE_2D,null);
this._textureCache.push(texture);
return texture;
}
d._transformPoint=function(x,y)
{
var tx=this._matrix[0]*x+this._matrix[3]*y+this._matrix[6];
var ty=this._matrix[4]*y+this._matrix[1]*x+this._matrix[7];
return[tx,ty]
};
d._checkBounds=function(x,y,width,height,matrix)
{
var minX=0;
var minY=0;
var maxX=this._width;
var maxY=this._height;
var left=0;
var right=0;
var top=0;
var bottom=0;
var px=x;
var py=y;
var tx=matrix.a*px+matrix.c*py+matrix.tx;
var ty=matrix.d*py+matrix.b*px+matrix.ty;
if(tx<minX)left++;
if(tx>maxX)right++;
if(ty<minY)top++;
if(ty>maxY)bottom++;
px=x+width;
py=y;
tx=matrix.a*px+matrix.c*py+matrix.tx;
ty=matrix.d*py+matrix.b*px+matrix.ty;
if(tx<minX)left++;
if(tx>maxX)right++;
if(ty<minY)top++;
if(ty>maxY)bottom++;
px=x;
py=y+height;
tx=matrix.a*px+matrix.c*py+matrix.tx;
ty=matrix.d*py+matrix.b*px+matrix.ty;
if(tx<minX)left++;
if(tx>maxX)right++;
if(ty<minY)top++;
if(ty>maxY)bottom++;
px=x+width;
py=y+height;
tx=matrix.a*px+matrix.c*py+matrix.tx;
ty=matrix.d*py+matrix.b*px+matrix.ty;
if(tx<minX)left++;
if(tx>maxX)right++;
if(ty<minY)top++;
if(ty>maxY)bottom++;
return left!=4&&right!=4&&top!=4&&bottom!=4;
}
d.setSize=function(w,h)
{
this._width=this._canvas.width=w;
this._height=this._canvas.height=h;
this._gl.viewport(0,0,w,h);
this._gl.viewportWidth=w;
this._gl.viewportHeight=h;
this._maskRender.setSize(w,h);
this._gl.uniformMatrix4fv(this._projectionMatrix,false,[2.0/w,0,0,0,0,-2.0/h,0,0,0,0,1.0,1.0,-1.0,1.0,0,0]);
}
flash.addDescription("flash.display.Render3d",d,null,null,null);
}
());;(function()
{
"use strict";
var d={};
d._canvas=null;
d._context=null;
d._canvasRect=null;
d._maskCanvas=null;
d._maskContext=null;
d._maskedCanvas=null;
d._maskedCanvasContext=null;
d._currentcontext=null;
d._width=0;
d._height=0;
d._baseMatrix=null;
d._tempMatrix=null;
d._invertedMatrix=null;
d.Render2d=function(canvasId,width,height)
{
this._canvas=canvasId?document.getElementById(canvasId):document.createElement('canvas');
if(!this._canvas.getContext)return;
this._context=this._canvas.getContext("2d");
this._baseMatrix=new flash.geom.Matrix();
this._tempMatrix=new flash.geom.Matrix();
this._invertedMatrix=new flash.geom.Matrix();
this._maskCanvas=document.createElement('canvas');
this._maskContext=this._maskCanvas.getContext("2d");
this._maskedCanvas=document.createElement('canvas');
this._maskedCanvasContext=this._maskedCanvas.getContext("2d");
this._canvas.onselectstart=function()
{
return false;
}
this._currentcontext=this._context;
this.setSize(width,height);
};
d.setSize=function(width,height)
{
this._width=width;
this._height=height;
this.updateSize(this._canvas);
this.updateSize(this._maskCanvas);
this.updateSize(this._maskedCanvas);
this._clearMasks=true;
}
d.updateSize=function(canvas)
{
var ratio=flash.getPixelRatio();
canvas.width=this._width*ratio;
canvas.height=this._height*ratio;
canvas.style.width=this._width+'px';
canvas.style.height=this._height+'px';
}
d.setCanvas=function(canvas,context,width,height)
{
this._canvas=canvas;
this._context=context;
this._context.globalAlpha=1;
this.setSize(width,height);
this._currentcontext=this._context;
this.setTransform(1,0,0,1,0,0);
this.clear();
}
d.setMatrix=function(matrix,roundPosition)
{
this.setTransform(
matrix.a,
matrix.b,
matrix.c,
matrix.d,
matrix.tx,
matrix.ty,
roundPosition
);
}
d.setTransform=function(a,b,c,d,tx,ty,roundPosition)
{
this._tempMatrix.a=a;
this._tempMatrix.b=b;
this._tempMatrix.c=c;
this._tempMatrix.d=d;
this._tempMatrix.tx=tx;
this._tempMatrix.ty=ty;
this._tempMatrix.concat(this._baseMatrix);
if(roundPosition)
{
tx=Math.round(this._tempMatrix.tx);
ty=Math.round(this._tempMatrix.ty);
}
else
{
tx=this._tempMatrix.tx;
ty=this._tempMatrix.ty;
}
this._currentcontext.setTransform(
this._tempMatrix.a,
this._tempMatrix.b,
this._tempMatrix.c,
this._tempMatrix.d,
tx,
ty
);
}
d.clear=function()
{
var ratio=flash.getPixelRatio();
this._context.setTransform(1,0,0,1,0,0);
this._context.clearRect(0,0,this._width*ratio,this._height*ratio);
this._currentcontext=this._context;
}
d.drawBitmapData=function(bitmapData,map,bounds,matrix,colorTransform,blendMode,filters,roundPosition)
{
this.setMatrix(matrix,roundPosition);
var imageData;
this._currentcontext.shadowBlur=0;
this._currentcontext.shadowOffsetX=0;
this._currentcontext.shadowOffsetY=0;
this._currentcontext.shadowColor=0;
if(colorTransform.isEmptyColor()&&!filters.length)
{
imageData=bitmapData._virtualcanvas;
var alpha=colorTransform.alphaMultiplier;
if(alpha>1)alpha=1;
else if(alpha<0)alpha=0;
this._currentcontext.globalAlpha=alpha;
}
else
{
imageData=bitmapData._getTransfomedCanvas(map,colorTransform,filters);
this._currentcontext.globalAlpha=1;
if(filters.length>0)
{
for(var i in filters)
{
var filter=filters[i];
if(flash.is(filter,flash.filters.DropShadowFilter))
{
this._currentcontext.shadowBlur=filter.get_blurX();
this._currentcontext.shadowOffsetX=Math.cos(filter.get_angle())*filter.get_distance();
this._currentcontext.shadowOffsetY=Math.sin(filter.get_angle())*filter.get_distance();
this._currentcontext.shadowColor=filter.__getHTMLColor();
}
else if(flash.is(filter,flash.filters.GlowFilter))
{
this._currentcontext.shadowBlur=filter.get_blurX();
this._currentcontext.shadowOffsetX=0;
this._currentcontext.shadowOffsetY=0;
this._currentcontext.shadowColor=filter.__getHTMLColor();
}
}
}
}
this._currentcontext.drawImage(
imageData,
map.x,
map.y,
map.width,
map.height,
bounds.x,
bounds.y,
bounds.width,
bounds.height
);
};
d.startMask=function(mask)
{
this.stopMask();
this._maskBounds=mask.getBounds(null);
var ratio=flash.getPixelRatio();
this._maskBounds.x=(this._baseMatrix.tx+this._maskBounds.x*this._baseMatrix.a);
this._maskBounds.y=(this._baseMatrix.ty+this._maskBounds.y*this._baseMatrix.d);
this._maskBounds.width=ratio*this._maskBounds.width*this._baseMatrix.a;
this._maskBounds.height=ratio*this._maskBounds.height*this._baseMatrix.d;
this._currentcontext=this._maskContext;
mask._render_(this);
this._maskedCanvasContext.globalCompositeOperation='source-over';
this._currentcontext=this._maskedCanvasContext;
}
d.stopMask=function()
{
if(this._currentcontext==this._maskedCanvasContext)
{
if(this._maskBounds.get_left()<0)this._maskBounds.set_left(0);
if(this._maskBounds.get_top()<0)this._maskBounds.set_top(0);
if(this._maskBounds.get_right()>this._width)this._maskBounds.set_right(this._width);
if(this._maskBounds.get_bottom()>this._height)this._maskBounds.set_bottom(this._height);
var ratio=flash.getPixelRatio();
var mx=Math.round(this._maskBounds.x);
var my=Math.round(this._maskBounds.y);
var mw=Math.round(this._maskBounds.width*ratio);
var mh=Math.round(this._maskBounds.height*ratio);
this._maskedCanvasContext.globalAlpha=1;
this._maskedCanvasContext.setTransform(1,0,0,1,0,0);
this._maskedCanvasContext.globalCompositeOperation='destination-in';
this._maskedCanvasContext.drawImage(this._maskCanvas,mx,my,mw,mh,mx,my,mw,mh);
this._context.globalAlpha=1;
this._context.setTransform(1,0,0,1,0,0);
this._context.drawImage(this._maskedCanvas,mx,my,mw,mh,mx,my,mw,mh);
this._maskContext.globalAlpha=1;
this._maskContext.setTransform(1,0,0,1,0,0);
this._maskContext.clearRect(mx,my,mw,mh);
this._maskedCanvasContext.globalAlpha=1;
this._maskedCanvasContext.setTransform(1,0,0,1,0,0);
this._maskedCanvasContext.clearRect(mx,my,mw,mh);
this._currentcontext=this._context;
}
}
flash.addDescription("flash.display.Render2d",d,null,null,null);
}
());;
(function()
{
"use strict";
var s={};
s.__init__=function()
{
this.FULL_SCREEN="fullScreen";
this.NORMAL="normal";
};
flash.addDescription("flash.display.StageDisplayState",null,null,s,null);
}
());;
(function()
{
"use strict";
var d={};
d.MorphShape=function()
{
this.DisplayObject_constructor();
return;
};
var s={};
s.__init__=function()
{
this.prototype.DisplayObject_constructor=this.__base__;
};
flash.addDescription("flash.display.MorphShape",d,"flash.display.DisplayObject",s,null);
}
());;
(function()
{
"use strict";
var d={};
d._data=null;
d._path=null;
d._needsRender=false;
d._bitmapData=null;
d._canvasRect=null;
d._textureRect=null;
d._maxThickness=0;
d._checkTouch_point=null;
d._checkTouch_matrix=null;
d._checkTouch_pix=0;
d._scaleCorrection=1;
d._textureInfo=null;
d.Graphics=function()
{
this._data=[];
this._checkTouch_point=new flash.geom.Point();
this._checkTouch_matrix=new flash.geom.Matrix();
};
d.dispose=function()
{
if(this._bitmapData)
{
this._bitmapData.dispose();
this._bitmapData=null;
}
this._needsRender=true;
};
d._renderData=function()
{
if(this._needsRender)
{
this._needsRender=false;
this._canvasRect=this._getBoundingBox();
if(this._canvasRect!=null)
{
var scale=this._scaleCorrection;
var textureWidth=flash.getTextureSize(this._canvasRect.width*scale);
var textureHeight=flash.getTextureSize(this._canvasRect.height*scale);
if(!this._bitmapData)
{
this._bitmapData=new flash.display.BitmapData(textureWidth,textureHeight,true,0);
}
else
{
this._bitmapData._setSize(textureWidth,textureHeight);
}
this._textureRect=this._canvasRect.clone();
this._textureRect.x=0;
this._textureRect.y=0;
this._textureRect.width*=scale;
this._textureRect.height*=scale;
var context=this._bitmapData._context2d;
var xShift=-this._canvasRect.x;
var yShift=-this._canvasRect.y;
var stroke=null;
var solidFill=null;
var gradientFill=null;
var bitmapFill=null;
for(var i=0;i<this._data.length;i++)
{
var item=this._data[i];
if(item instanceof flash.display.GraphicsStroke)
{
stroke=item;
}
else if(item instanceof flash.display.GraphicsSolidFill)
{
solidFill=item;
}
else if(item instanceof flash.display.GraphicsGradientFill)
{
gradientFill=item;
}
else if(item instanceof flash.display.GraphicsBitmapFill)
{
bitmapFill=item;
}
else if(item instanceof flash.display.GraphicsEndFill)
{
solidFill=null;
gradientFill=null;
bitmapFill=null;
}
else if(item instanceof flash.display.GraphicsPath)
{
context.setTransform(scale,0,0,scale,0,0);
context.beginPath();
var index=0;
var currentData=item.data;
var fillEnabled=solidFill||gradientFill||bitmapFill;
var move=null;
for(var j=0;j<item.commands.length;j++)
{
var command=item.commands[j];
switch(command)
{
case flash.display.GraphicsPathCommand.MOVE_TO:
if(fillEnabled&&move)
{
context.lineTo(
move.x,
move.y
);
}
move={
x:currentData[index++]+xShift,
y:currentData[index++]+yShift
};
context.moveTo(
move.x,
move.y
);
break;
case flash.display.GraphicsPathCommand.LINE_TO:
context.lineTo(
currentData[index++]+xShift,
currentData[index++]+yShift
);
break;
case flash.display.GraphicsPathCommand.CURVE_TO:
context.quadraticCurveTo(
currentData[index++]+xShift,
currentData[index++]+yShift,
currentData[index++]+xShift,
currentData[index++]+yShift
);
break;
case flash.display.GraphicsPathCommand.WIDE_MOVE_TO:
context.moveTo(
currentData[index++]+xShift,
currentData[index++]+yShift
);
break;
case flash.display.GraphicsPathCommand.WIDE_LINE_TO:
context.lineTo(
currentData[index++]+xShift,
currentData[index++]+yShift
);
break;
case flash.display.GraphicsPathCommand.CUBIC_CURVE_TO:
context.bezierCurveTo(
currentData[index++]+xShift,
currentData[index++]+yShift,
currentData[index++]+xShift,
currentData[index++]+yShift,
currentData[index++]+xShift,
currentData[index++]+yShift
);
break;
}
}
if(fillEnabled&&move)
{
context.lineTo(
move.x,
move.y
);
}
if(solidFill)
{
context.globalAlpha=solidFill.alpha;
context.fillStyle=flash.numberToHex(solidFill.color);
context.fill();
}
else if(gradientFill)
{
}
else if(bitmapFill)
{
context.save();
context.setTransform(
bitmapFill.matrix.a*scale,
bitmapFill.matrix.b*scale,
bitmapFill.matrix.c*scale,
bitmapFill.matrix.d*scale,
bitmapFill.matrix.tx*scale-xShift*scale,
bitmapFill.matrix.ty*scale-yShift*scale
);
context.fillStyle=context.createPattern(
bitmapFill.bitmapData._virtualcanvas,
bitmapFill.repeat?"repeat":"no-repeat"
);
context.fill();
context.restore();
}
if(stroke&&stroke.thickness)
{
context.globalAlpha=stroke.fill.alpha;
context.lineWidth=stroke.thickness;
context.strokeStyle=flash.numberToHex(stroke.fill.color);
context.lineCap=stroke.get_caps();
context.lineJoin=stroke.get_joints();
context.stroke();
}
}
}
}
}
};
d.copyFrom=function(sourceGraphics)
{
this._textureInfo=null;
var sourceData=source._data;
for(var i=0;i<sourceData.length;i++)
{
this._data.push(sourceData[i].clone());
}
}
d.beginBitmapFill=function(bitmap,matrix,repeat,smooth)
{
this._textureInfo=null;
if(matrix==undefined)matrix=new flash.geom.Matrix();
if(repeat==undefined)repeat=true;
if(smooth==undefined)smooth=false;
if(bitmap)
{
var fill=new flash.display.GraphicsBitmapFill(bitmap,matrix,repeat,smooth);
var index=this._path?this._data.indexOf(this._path):-1;
if(index!=-1)
{
this._data.splice(index,0,fill);
}
else
{
this._data.push(fill);
}
this._needsRender=true;
}
};
d.beginFill=function(color,alpha)
{
this._textureInfo=null;
if(color==undefined)color=0x000000;
if(alpha==undefined)alpha=1;
var fill=new flash.display.GraphicsSolidFill(color,alpha);
var index=this._path?this._data.indexOf(this._path):-1;
if(index!=-1)
{
this._data.splice(index,0,fill);
}
else
{
this._data.push(fill);
}
this._needsRender=true;
};
d.beginGradientFill=function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio)
{
this._textureInfo=null;
if(matrix==undefined)matrix=null;
if(spreadMethod==undefined)spreadMethod="pad";
if(interpolationMethod==undefined)interpolationMethod="rgb";
if(focalPointRatio==undefined)focalPointRatio=0;
};
d.clear=function()
{
this._textureInfo=null;
this._path=null;
this._data=[];
this._needsRender=true;
};
d.curveTo=function(controlX,
controlY,
anchorX,
anchorY)
{
this._textureInfo=null;
this._createPath();
this._path.commands.push(flash.display.GraphicsPathCommand.CURVE_TO);
this._path.data.push(controlX,controlY,anchorX,anchorY);
this._needsRender=true;
};
d.cubicCurveTo=function(controlX1,
controlY1,
controlX2,
controlY2,
anchorX,
anchorY)
{
this._textureInfo=null;
this._createPath();
this._path.commands.push(flash.display.GraphicsPathCommand.CUBIC_CURVE_TO);
this._path.data.push(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY);
this._needsRender=true;
};
d.drawCircle=function(x,y,radius)
{
this._textureInfo=null;
var size=radius*2;
this.drawEllipse(x-radius,y-radius,size,size);
};
d.drawEllipse=function(x,y,width,height)
{
this._textureInfo=null;
var k=.5522848;
var ox=(width/2)*k;
var oy=(height/2)*k;
var xe=x+width;
var ye=y+height;
var xm=x+width/2;
var ym=y+height/2;
this._createPath(true);
this._path.commands.push(flash.display.GraphicsPathCommand.MOVE_TO);
this._path.data.push(x,ym);
this._path.commands.push(flash.display.GraphicsPathCommand.CUBIC_CURVE_TO);
this._path.data.push(x,ym-oy,xm-ox,y,xm,y);
this._path.commands.push(flash.display.GraphicsPathCommand.CUBIC_CURVE_TO);
this._path.data.push(xm+ox,y,xe,ym-oy,xe,ym);
this._path.commands.push(flash.display.GraphicsPathCommand.CUBIC_CURVE_TO);
this._path.data.push(xe,ym+oy,xm+ox,ye,xm,ye);
this._path.commands.push(flash.display.GraphicsPathCommand.CUBIC_CURVE_TO);
this._path.data.push(xm-ox,ye,x,ym+oy,x,ym);
this._path=null;
this._needsRender=true;
};
d.drawRect=function(x,y,width,height)
{
this._textureInfo=null;
this._createPath(true);
this._path.commands.push(flash.display.GraphicsPathCommand.MOVE_TO);
this._path.data.push(x,y);
this._path.commands.push(flash.display.GraphicsPathCommand.LINE_TO);
this._path.data.push(x+width,y);
this._path.commands.push(flash.display.GraphicsPathCommand.LINE_TO);
this._path.data.push(x+width,y+height);
this._path.commands.push(flash.display.GraphicsPathCommand.LINE_TO);
this._path.data.push(x,y+height);
this._path.commands.push(flash.display.GraphicsPathCommand.LINE_TO);
this._path.data.push(x,y);
this._path=null;
this._needsRender=true;
};
d.drawRoundRect=function(x,y,width,height,ellipseWidth,ellipseHeight)
{
this._textureInfo=null;
if(ellipseWidth==undefined)ellipseWidth=0;
if(ellipseHeight==undefined)ellipseHeight=ellipseWidth;
var w=ellipseWidth*2;
var h=ellipseHeight*2;
var k=0.5522848;
var ox=(w/2)*k;
var oy=(h/2)*k;
var xe=x+w;
var ye=y+h;
var xm=x+w/2;
var ym=y+h/2;
var dx=width-w;
var dy=height-h;
this._createPath(true);
this._path.commands.push(flash.display.GraphicsPathCommand.MOVE_TO);
this._path.data.push(
x,
ym
);
this._path.commands.push(flash.display.GraphicsPathCommand.CUBIC_CURVE_TO);
this._path.data.push(
x,
ym-oy,
xm-ox,
y,
xm,
y
);
this._path.commands.push(flash.display.GraphicsPathCommand.LINE_TO);
this._path.data.push(
xm+dx,
y
);
this._path.commands.push(flash.display.GraphicsPathCommand.CUBIC_CURVE_TO);
this._path.data.push(
xm+ox+dx,
y,
xe+dx,
ym-oy,
xe+dx,
ym
);
this._path.commands.push(flash.display.GraphicsPathCommand.LINE_TO);
this._path.data.push(
xe+dx,
ym+dy
);
this._path.commands.push(flash.display.GraphicsPathCommand.CUBIC_CURVE_TO);
this._path.data.push(
xe+dx,
ym+oy+dy,
xm+ox+dx,
ye+dy,
xm+dx,
ye+dy
);
this._path.commands.push(flash.display.GraphicsPathCommand.LINE_TO);
this._path.data.push(
xm,
ye+dy
);
this._path.commands.push(flash.display.GraphicsPathCommand.CUBIC_CURVE_TO);
this._path.data.push(
xm-ox,
ye+dy,
x,
ym+oy+dy,
x,
ym+dy
);
this._path=null;
this._needsRender=true;
};
d.drawRoundRectComplex=function(x,y,width,height,topLeftRadius,topRightRadius,bottomLeftRadius,bottomRightRadius)
{
this.drawRoundRect(x,y,width,height,topLeftRadius,bottomRightRadius);
};
d.endFill=function()
{
this._textureInfo=null;
this._path=null;
this._data.push(new flash.display.GraphicsEndFill());
this._needsRender=true;
};
d.lineGradientStyle=function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio)
{
this._textureInfo=null;
if(matrix==undefined)matrix=null;
if(spreadMethod==undefined)spreadMethod="pad";
if(interpolationMethod==undefined)interpolationMethod="rgb";
if(focalPointRatio==undefined)focalPointRatio=0;
};
d.lineStyle=function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit)
{
this._textureInfo=null;
if(thickness==undefined)thickness=0;
if(color==undefined)color=0;
if(alpha==undefined)alpha=1;
if(pixelHinting==undefined)pixelHinting=false;
if(scaleMode==undefined)scaleMode="normal";
if(caps==undefined)caps=flash.display.CapsStyle.ROUND;
if(joints==undefined)joints=flash.display.JointStyle.ROUND;
if(miterLimit==undefined)miterLimit=3;
color=Math.floor(color);
var fill=new flash.display.GraphicsSolidFill(color,alpha);
var stroke=new flash.display.GraphicsStroke(
thickness,
pixelHinting,
scaleMode,
caps,
joints,
miterLimit,
fill
);
if(this._maxThickness<stroke.thickness)
{
this._maxThickness=stroke.thickness;
}
this._data.push(stroke);
this._needsRender=true;
};
d.lineTo=function(x,y)
{
this._textureInfo=null;
this._createPath();
this._path.commands.push(flash.display.GraphicsPathCommand.LINE_TO);
this._path.data.push(x,y);
this._needsRender=true;
};
d._createPath=function(clear)
{
if(clear||!this._path)
{
this._path=new flash.display.GraphicsPath();
this._data.push(this._path);
}
};
d.moveTo=function(x,y)
{
this._textureInfo=null;
this._createPath();
this._path.commands.push(flash.display.GraphicsPathCommand.MOVE_TO);
this._path.data.push(x,y);
this._needsRender=true;
};
d._getBitmapData=function(scaleCorrection)
{
if(this._scaleCorrection!=scaleCorrection)
{
this._scaleCorrection=scaleCorrection;
this._needsRender=true;
}
if(this._textureInfo)
{
return this._textureInfo.bitmap;
}
else
{
this._renderData();
return this._bitmapData;
}
};
d._getMap=function()
{
if(this._textureInfo)
{
return this._textureInfo.map;
}
else
{
return this._textureRect;
}
};
d._getBoundingBox=function()
{
if(this._data.length)
{
var xMax=-Number.MAX_VALUE;
var yMax=-Number.MAX_VALUE;
var xMin=Number.MAX_VALUE;
var yMin=Number.MAX_VALUE;
for(var i=0;i<this._data.length;i++)
{
var item=this._data[i];
if(item.data)
{
var coords=item.data;
for(var j=0;j<coords.length;j+=2)
{
var x=coords[j];
var y=coords[j+1];
if(x<xMin)xMin=x;
if(x>xMax)xMax=x;
if(y<yMin)yMin=y;
if(y>yMax)yMax=y;
}
}
}
if(xMax!=-Number.MAX_VALUE&&yMax!=-Number.MAX_VALUE&&
xMin!=Number.MAX_VALUE&&yMin!=Number.MAX_VALUE)
{
var width=xMax-xMin;
var height=yMax-yMin;
if(width!=0||height!=0)
{
var bounds=new flash.geom.Rectangle(
xMin,
yMin,
width,
height
);
if(this._maxThickness)
{
bounds.inflate(this._maxThickness,this._maxThickness);
}
return bounds;
}
}
}
return null;
}
d._getDisplayBounds=function()
{
if(this._textureInfo)
{
return this._textureInfo.bounds;
}
else
{
if(!this._canvasRect)
{
this._canvasRect=this._getBoundingBox();
}
return this._canvasRect;
}
};
d._getBounds=function()
{
if(this._textureInfo)
{
return this._textureInfo.realBounds;
}
else
{
if(!this._canvasRect)
{
this._canvasRect=this._getBoundingBox();
}
return this._canvasRect;
}
};
d._checkTouch=function(x,y,displayObject)
{
var bounds=null;
if(this._textureInfo)
{
bounds=this._textureInfo.bounds;
}
else
{
bounds=this._canvasRect;
}
if(bounds)
{
this._checkTouch_point.x=x;
this._checkTouch_point.y=y;
this._checkTouch_point=displayObject.globalToLocal(this._checkTouch_point);
if(bounds.containsPoint(this._checkTouch_point))
{
if(this._textureInfo)
{
var map=this._textureInfo.map;
var bitmapX=Math.floor(map.x+(this._checkTouch_point.x-bounds.x)/bounds.width*map.width);
var bitmapY=Math.floor(map.y+(this._checkTouch_point.y-bounds.y)/bounds.height*map.height);
var color=this._textureInfo.bitmap.getPixel32(bitmapX,bitmapY);
this._checkTouch_pix=(color>>24)&0xff;
}
else if(this._bitmapData)
{
var scale=this._scaleCorrection;
var bitmapX=Math.floor((this._checkTouch_point.x-bounds.x)*scale);
var bitmapY=Math.floor((this._checkTouch_point.y-bounds.y)*scale);
var color=this._bitmapData.getPixel32(bitmapX,bitmapY);
this._checkTouch_pix=(color>>24)&0xff;
}
if(this._checkTouch_pix)
{
return this._checkTouch_point;
}
else
{
return null;
}
}
return null;
}
return null;
}
flash.addDescription("flash.display.Graphics",d,null,null,null);
}
());;
(function()
{
"use strict";
var s={};
s.__init__=function()
{
this.ACTIONSCRIPT2=2;
this.ACTIONSCRIPT3=3;
};
flash.addDescription("flash.display.ActionScriptVersion",null,null,s,null);
}
());;
(function()
{
"use strict";
var d={};
d._caps=null;
d._joints=null;
d._scaleMode=null;
d.fill=0;
d.miterLimit=0;
d.pixelHinting=false;
d.thickness=0;
d.get_caps=function()
{
return this._caps;
};
d.set_caps=function(value)
{
this._caps=value;
return value;
};
d.get_joints=function()
{
return this._joints;
};
d.set_joints=function(value)
{
this._joints=value;
return value;
};
d.get_scaleMode=function()
{
return this._scaleMode;
};
d.set_scaleMode=function(value)
{
this._scaleMode=value;
return value;
};
d.GraphicsStroke=function(thickness,pixelHinting,scaleMode,caps,joints,miterLimit,fill)
{
if(thickness==undefined)thickness=0;
if(pixelHinting==undefined)pixelHinting=false;
if(scaleMode==undefined)scaleMode="normal";
if(caps==undefined)caps="none";
if(joints==undefined)joints="round";
if(miterLimit==undefined)miterLimit=3;
if(fill==undefined)fill=0;
this.thickness=thickness;
this.pixelHinting=pixelHinting;
this._caps=caps;
this._joints=joints;
this.miterLimit=miterLimit;
this._scaleMode=scaleMode;
this.fill=fill;
};
flash.addDescription("flash.display.GraphicsStroke",d,null,null,["flash.display.IGraphicsStroke","flash.display.IGraphicsData"]);
}
());;
(function()
{
"use strict";
var s={};
s.__init__=function()
{
this.LINEAR="linear";
this.RADIAL="radial";
};
flash.addDescription("flash.display.GradientType",null,null,s,null);
}
());;
(function()
{
"use strict";
var s={};
s.__init__=function()
{
this.FLASH1=1;
this.FLASH10=10;
this.FLASH2=2;
this.FLASH3=3;
this.FLASH4=4;
this.FLASH5=5;
this.FLASH6=6;
this.FLASH7=7;
this.FLASH8=8;
this.FLASH9=9;
};
flash.addDescription("flash.display.SWFVersion",null,null,s,null);
}
());;
(function()
{
"use strict";
var d={};
d._mouseChildren=true;
d._tabChildren=true;
d._children=null;
d._cursorStyle;
d.get_mouseChildren=function()
{
return this._mouseChildren;
};
d.set_mouseChildren=function(value)
{
this._mouseChildren=value;
return value;
};
d.get_tabChildren=function()
{
return this._tabChildren;
};
d.set_tabChildren=function(value)
{
this._tabChildren=value;
return value;
};
d.get_numChildren=function()
{
return this._children.length;
};
d.DisplayObjectContainer=function()
{
this.InteractiveObject_constructor();
this._children=[];
};
d.addChild=function(child)
{
return this.addChildAt(child,this._children.length);
};
d.addChildAt=function(child,index)
{
index=Math.floor(index);
if(index<0||index>this._children.length)
{
console.error("index is outside the container children");
}
if(child==null)
{
console.error("add the object should not be null");
}
if(child==this)
{
console.error("can not add an object to itself");
}
if(this.contains(child))
{
return child;
}
if(child==this.parent)
{
console.error("add the object should not be a parent container");
}
if(child._parent!=null)
{
child._parent.removeChild(child);
}
child._parent=this;
if(index==this._children.length)
{
this._children.push(child);
}
else
{
this._children.splice(index,0,child);
}
child.dispatchEvent(new flash.events.Event(flash.events.Event.ADDED));
if(this.get_stage())
{
child.dispatchEvent(new flash.events.Event(flash.events.Event.ADDED_TO_STAGE));
}
return child;
};
d.contains=function(child)
{
if(child==null)
{
console.error("the object should not be null");
}
return child._parent==this;
};
d.getChildAt=function(index)
{
index=Math.floor(index);
if(index<0||index>=this._children.length)
{
console.error("index is outside the container children");
}
return this._children[index];
};
d.getChildByName=function(name)
{
for(var i=0;i<this._children.length;i++)
{
var child=this._children[i];
if(child._name==name)
{
return child;
}
}
return null;
};
d.getChildIndex=function(child)
{
if(child==null)
{
console.error("the object should not be null");
}
if(this.contains(child))
{
return this._children.indexOf(child);
}
return-1;
};
d.getObjectsUnderPoint=function(point)
{
return null;
};
d.removeChild=function(child)
{
if(child==null)
{
console.error("remove object should not be null");
return;
}
if(!this.contains(child))
{
console.error("remove object must contains in container");
return;
}
var index=this.getChildIndex(child);
this.removeChildAt(index);
return child;
};
d.removeChildAt=function(index)
{
index=Math.floor(index);
if(index<0||index>=this._children.length)
{
console.error("index of remove object is outside the container children");
return;
}
var child=this._children[index];
child._parent=null;
this._children.splice(index,1);
child.dispatchEvent(new flash.events.Event(flash.events.Event.REMOVED));
if(this.get_stage())
{
child.dispatchEvent(new flash.events.Event(flash.events.Event.REMOVED_TO_STAGE));
}
return child;
};
d.setChildIndex=function(child,index)
{
if(child==null)
{
console.error("the object should not be null");
}
if(index<0||index>=this._children.length)
{
console.error("index is outside the container children");
}
if(this.contains(child))
{
this._children.splice(this._children.indexOf(child),1);
this._children.splice(index,0,child);
}
else
{
console.error("can not change the index of the object that does not contains in container");
}
};
d.swapChildren=function(child1,child2)
{
if(child1==null)
{
console.error("the object should not be null");
}
if(child2==null)
{
console.error("the object should not be null");
}
if(!this.contains(child1))
{
console.error("can not change the index of the object that does not contains in container");
}
if(!this.contains(child2))
{
console.error("can not change the index of the object that does not contains in container");
}
swapChildrenAt(this.getChildIndex(child1),this.getChildIndex(child2));
};
d.swapChildrenAt=function(index1,index2)
{
index1=Math.floor(index1);
index2=Math.floor(index2);
if(index1<0||index1>=this._children.length)
{
console.error("index is outside the container children");
}
if(index2<0||index2>=this._children.length)
{
console.error("index is outside the container children");
}
child1=this._children[index1];
child2=this._children[index2];
this._children[index1]=child2;
this._children[index2]=child1;
};
d.removeChildren=function()
{
var child=null;
for(var i=0;i<this._children.length;i++)
{
child=this._children[i];
child._parent=null;
child.dispatchEvent(new flash.events.Event(flash.events.Event.REMOVED));
if(child.graphics)child.graphics.dispose();
if(this.get_stage())
{
child.dispatchEvent(new flash.events.Event(flash.events.Event.REMOVED_TO_STAGE));
}
}
this._children.length=0;
}
d.getBounds=function(targetCoordinateSpace)
{
var bounds=this.InteractiveObject_getBounds(targetCoordinateSpace);
for(var i=0;i<this._children.length;i++)
{
var child=this._children[i];
var childBounds=child.getBounds(targetCoordinateSpace);
if(!childBounds.isEmpty())
{
bounds=bounds.union(childBounds);
}
}
return bounds;
};
d.__updateMovieClipList__=function()
{
this.InteractiveObject___updateMovieClipList__();
for(var i=0;i<this._children.length;i++)
{
var child=this._children[i];
child.__updateMovieClipList__();
}
};
d.dispatchEvent=function(event)
{
var type=event.get_type();
if(type==flash.events.Event.ADDED_TO_STAGE||
type==flash.events.Event.REMOVED_TO_STAGE||
type==flash.events.Event.ADDED||
type==flash.events.Event.REMOVED||
type==flash.events.Event.RENDER)
{
for(var i=0;i<this._children.length;i++)
{
var child=this._children[i];
child.dispatchEvent(event);
}
}
return this.InteractiveObject_dispatchEvent(event);
};
d._updateInteractiveEvent=function(data,dispatch)
{
if(!this._visible)return null;
var point=null;
if(this._mouseEnabled||this._mouseChildren)
{
var target=null;
if(this._children.length)
{
var mouseChildren=dispatch&&this._mouseChildren;
var i=this._children.length;
var complete=false;
while(i--)
{
var child=this._children[i];
if(complete)
{
if(child instanceof flash.display.InteractiveObject)
{
child._updateOverEvent(data);
}
}
else
{
if(child._updateInteractiveEvent(data,mouseChildren))
{
target=child;
complete=true;
}
}
}
}
if(target)
{
point=this.get_mousePoint();
if(dispatch)
{
this._dispatchInteractiveEvent(data,point.x,point.y,this._mouseChildren?target:this);
}
}
else
{
point=this.InteractiveObject__updateInteractiveEvent(data,dispatch,true);
}
this._updateMoveEvent(point,data,dispatch);
return point;
}
return point;
};
var s={};
s.__init__=function()
{
this.prototype.InteractiveObject_constructor=this.__base__;
this.prototype.InteractiveObject_getBounds=this.__base__.prototype.getBounds;
this.prototype.InteractiveObject_dispatchEvent=this.__base__.prototype.dispatchEvent;
this.prototype.InteractiveObject___updateMovieClipList__=this.__base__.prototype.__updateMovieClipList__;
this.prototype.InteractiveObject__updateInteractiveEvent=this.__base__.prototype._updateInteractiveEvent;
}
flash.addDescription("flash.display.DisplayObjectContainer",d,"flash.display.InteractiveObject",s,null);
}
());;
(function()
{
"use strict";
var s={};
s.__init__=function()
{
this.EXACT_FIT="exactFit";
this.NO_BORDER="noBorder";
this.NO_SCALE="noScale";
this.SHOW_ALL="showAll";
};
flash.addDescription("flash.display.StageScaleMode",null,null,s,null);
}
());;
(function()
{
"use strict";
var s={};
s.__init__=function()
{
this.ADD="add";
this.ALPHA="alpha";
this.DARKEN="darken";
this.DIFFERENCE="difference";
this.ERASE="erase";
this.HARDLIGHT="hardlight";
this.INVERT="invert";
this.LAYER="layer";
this.LIGHTEN="lighten";
this.MULTIPLY="multiply";
this.NORMAL="normal";
this.OVERLAY="overlay";
this.SCREEN="screen";
this.SUBTRACT="subtract";
};
flash.addDescription("flash.display.BlendMode",null,null,s,null);
}
());;
(function()
{
"use strict";
var d={};
d._bitmapData=null;
d._pixelSnapping=null;
d._smoothing=false;
d._checkTouch_point=null;
d._render_=function(render)
{
this.__updateTransform__();
var rect=this._bitmapData.get_rect();
render.drawBitmapData(
this._bitmapData,
rect,
rect,
this._transform._concatenatedMatrix,
this._transform._concatenatedColorTransform,
this._blendMode,
this._concatenatedFilters
);
};
d.get_bitmapData=function()
{
return this._bitmapData;
};
d.set_bitmapData=function(value)
{
this._bitmapData=value;
return value;
};
d.get_pixelSnapping=function()
{
return this._pixelSnapping;
};
d.set_pixelSnapping=function(value)
{
this._pixelSnapping=value;
return value;
};
d.get_smoothing=function()
{
return this._smoothing;
};
d.set_smoothing=function(value)
{
this._smoothing=value;
return value;
};
d.Bitmap=function(bitmapData,pixelSnapping,smoothing)
{
if(bitmapData==undefined)bitmapData=null;
if(pixelSnapping==undefined)pixelSnapping=flash.display.PixelSnapping.AUTO;
if(smoothing==undefined)smoothing=false;
this.DisplayObject_constructor();
this.set_bitmapData(bitmapData);
this.set_pixelSnapping(pixelSnapping);
this.set_smoothing(smoothing);
flash.linkage(this,flash.display.Bitmap);
};
d._checkInteractiveEvent=function(data)
{
if(!this._checkTouch_point)this._checkTouch_point=new flash.geom.Point();
this._checkTouch_point.x=data.localX;
this._checkTouch_point.y=data.localY;
this._checkTouch_point=this.globalToLocal(this._checkTouch_point);
if(this._bitmapData.get_rect().containsPoint(this._checkTouch_point))
{
return this._checkTouch_point;
}
return null;
};
var s={};
s.__init__=function()
{
this.prototype.DisplayObject_constructor=this.__base__;
};
flash.addDescription("flash.display.Bitmap",d,"flash.display.DisplayObject",s,null);
}
());;
(function()
{
"use strict";
var d={};
d._parent=null;
d._render=null;
d._canvas=null;
d._frameRate=24;
d.mapTouchToMouse=true;
d._interval=null;
d._transform=null;
d._mouseX=0;
d._mouseY=0;
d._clickCount=0;
d._buttonDown=false;
d._scaleMode=null;
d._align=null;
d._rendermode="";
d._bindedRAFC=null;
d._bindedRender=null;
d._simulatedEvent=null;
d._originalWidth=0;
d._originalHeight=0;
d._width=0;
d._height=0;
d._frames=100;
d._renderId=0;
d._requestId=0;
var _requestAnimationFrame=null;
d.get_render=function()
{
return this._render;
}
d.Stage=function(canvasId,rendermode,width,height)
{
flash.display.Stage.__current__=this;
this._parent=null;
this.DisplayObjectContainer_constructor();
_requestAnimationFrame=this._getRequestAnimationFrame();
this.set_scaleMode("");
this.set_align("");
this._bindedRAFC=flash.bindFunction(this,this._requestAnimationFrameComplete);
this._bindedRender=flash.bindFunction(this,this._renderFrame);
this._originalWidth=width;
this._originalHeight=height;
this._width=width;
this._height=height;
this._transform=new flash.geom.Transform(this);
this._transform._matrix=this._transform._concatenatedMatrix;
this._rendermode=rendermode;
if(this._rendermode!="2d"&&this._rendermode!="3d")
{
var canvas=document.getElementById(canvasId);
var gl=canvas.getContext("webgl")||canvas.getContext("experimental-webgl");
this._rendermode=gl?"3d":"2d";
}
if(this._rendermode!="2d")
{
console.warn("Render 3d is not supported");
this._rendermode=="2d";
}
if(this._rendermode=="2d")
{
this._render=new flash.display.Render2d(canvasId,width,height);
}
else if(this._rendermode=="3d")
{
this._render=new flash.display.Render3d(canvasId,width,height);
}
this._render._stage=this;
this._canvas=this._render._canvas;
this._initEvents();
this._bindedRender();
};
d._getRequestAnimationFrame=function()
{
return window.requestAnimationFrame||
window.webkitRequestAnimationFrame||
window.mozRequestAnimationFrame||
window.oRequestAnimationFrame||
window.msRequestAnimationFrame||
function(callback,element)
{
setTimeout(callback,1);
};
};
d._renderFrame=function()
{
if(this._renderId!=this._requestId)return;
this._renderId++;
this._time=new Date().getTime();
flash.text.TextField.__clear__();
flash.display.MovieClip.__clear__();
this.__updateMovieClipList__();
flash.display.MovieClip.__frameConstruct__();
flash.display.DisplayObject.__enterFrame__();
flash.display.MovieClip.__frameProcessing__();
flash.display.DisplayObject.__exitFrame__();
_requestAnimationFrame(this._bindedRAFC,this._render._canvas);
}
d._requestAnimationFrameComplete=function()
{
this._requestId++;
this._updateStageMatrix(this._render._baseMatrix,this._scaleMode,this._align);
this._render._invertedMatrix.copyFrom(this._render._baseMatrix);
this._render._invertedMatrix.invert();
this._render.setTransform(1,0,0,1,0,0);
this._render.clear();
var children=this.get_numChildren();
for(var i=0;i<children;i++)
{
var child=this.getChildAt(i);
if(child._visible)
{
child._render_(this._render);
}
}
if(this._render._batchAmount)
{
if(this._render._batchAmount!=0)
{
this._render._renderBatch();
}
}
flash.text.TextField.__update__();
flash.display.MovieClip.__nextFrame__();
var now=new Date().getTime();
var renderTime=now-this._time;
var frameTime=1000/this._frameRate;
var timeout=frameTime-renderTime;
if(timeout<1)timeout=1;
setTimeout(this._bindedRender,timeout);
};
d._updateStageMatrix=function(matrix,scaleMode,align)
{
var scaleX=this._width/this._originalWidth;
var scaleY=this._height/this._originalHeight;
switch(scaleMode)
{
case flash.display.StageScaleMode.EXACT_FIT:
matrix.a=scaleX;
matrix.d=scaleY;
break;
case flash.display.StageScaleMode.NO_BORDER:
matrix.a=matrix.d=Math.max(scaleX,scaleY);
break;
case flash.display.StageScaleMode.NO_SCALE:
matrix.a=matrix.d=1;
break;
case flash.display.StageScaleMode.SHOW_ALL:
default:
matrix.a=matrix.d=Math.min(scaleX,scaleY);
break;
}
var sizeX=this._originalWidth*matrix.a;
var sizeY=this._originalHeight*matrix.d;
switch(align)
{
case flash.display.StageAlign.TOP:
matrix.tx=(this._width-sizeX)/2;
matrix.ty=0;
break;
case flash.display.StageAlign.BOTTOM:
matrix.tx=(this._width-sizeX)/2;
matrix.ty=this._height-sizeY;
break;
case flash.display.StageAlign.LEFT:
matrix.tx=0;
matrix.ty=(this._height-sizeY)/2;
break;
case flash.display.StageAlign.RIGHT:
matrix.tx=this._width-sizeX;
matrix.ty=(this._height-sizeY)/2;
break;
case flash.display.StageAlign.TOP_LEFT:
matrix.tx=0;
matrix.ty=0;
break;
case flash.display.StageAlign.TOP_RIGHT:
matrix.tx=this._width-sizeX;
matrix.ty=0;
break;
case flash.display.StageAlign.BOTTOM_LEFT:
matrix.tx=0;
matrix.ty=this._height-sizeY;
break;
case flash.display.StageAlign.BOTTOM_RIGHT:
matrix.tx=this._width-sizeX;
matrix.ty=this._height-sizeY;
break;
default:
matrix.tx=(this._width-sizeX)/2;
matrix.ty=(this._height-sizeY)/2;
break;
}
};
d._cursorStyle=function(cursor)
{
this._canvas.style.cursor=cursor;
}
d._initEvents=function()
{
this._simulatedEvent=document.createEvent("MouseEvent");
if(this._canvas)
{
this._canvas.addEventListener('mousemove',flash.bindFunction(this,this._mousevent),false);
this._canvas.addEventListener('mousedown',flash.bindFunction(this,this._mousevent),false);
this._canvas.addEventListener('mouseup',flash.bindFunction(this,this._mousevent),false);
if('onwheel'in document)
{
this._canvas.addEventListener("wheel",flash.bindFunction(this,this._mousevent),false);
}
else if('onmousewheel'in document)
{
this._canvas.addEventListener("mousewheel",flash.bindFunction(this,this._mousevent),false);
}
this._canvas.addEventListener("touchend",flash.bindFunction(this,this._mousevent),false);
this._canvas.addEventListener("touchstart",flash.bindFunction(this,this._mousevent),false);
this._canvas.addEventListener("touchcancel",flash.bindFunction(this,this._mousevent),false);
this._canvas.addEventListener("touchmove",flash.bindFunction(this,this._mousevent),false);
window.addEventListener("keydown",flash.bindFunction(this,this._keyevent),false);
window.addEventListener("keyup",flash.bindFunction(this,this._keyevent),false);
}
};
d._clearClicks=function()
{
this._clickCount=0;
}
d._getMousePoint=function(x,y)
{
return this._render._invertedMatrix.transformPoint(new flash.geom.Point(x,y));
}
d._keyevent=function(e)
{
if(!e)e=window.event;
var eventType=null;
switch(e.type)
{
case'keydown':
eventType=flash.events.KeyboardEvent.KEY_DOWN;
break;
case'keyup':
eventType=flash.events.KeyboardEvent.KEY_UP;
break;
}
if(eventType)
{
if(this.hasEventListener(eventType))
{
this.dispatchEvent(new flash.events.KeyboardEvent(
eventType,
true,
false,
e.charCode,
e.keyCode,
e.keyLocation,
e.ctrlKey,
e.altKey,
e.shiftKey
));
}
}
}
d._mousevent=function(e)
{
if(!e)e=window.event;
var ratio=flash.getPixelRatio();
var mouseType=null;
var touchType=null;
switch(e.type)
{
case'mouseup':
mouseType=flash.events.MouseEvent.MOUSE_UP;
flash.text.TextField.__blur__();
this._buttonDown=false;
break;
case'mousedown':
mouseType=flash.events.MouseEvent.MOUSE_DOWN;
flash.text.TextField.__blur__();
flash.display.DisplayObject.__pressedObjects.length=0;
this._buttonDown=true;
break;
case'mousemove':
mouseType=flash.events.MouseEvent.MOUSE_MOVE;
break;
case'mousewheel':
case'wheel':
mouseType=flash.events.MouseEvent.MOUSE_WHEEL;
break;
case'touchstart':
touchType=flash.events.TouchEvent.TOUCH_BEGIN;
mouseType=flash.events.MouseEvent.MOUSE_DOWN;
this._buttonDown=true;
break;
case'touchend':
touchType=flash.events.TouchEvent.TOUCH_END;
mouseType=flash.events.MouseEvent.MOUSE_UP;
this._buttonDown=false;
break;
case'touchmove':
touchType=flash.events.TouchEvent.TOUCH_MOVE;
mouseType=flash.events.MouseEvent.MOUSE_MOVE;
break;
default:
return;
}
var data={
bubbles:false,
cancelable:false,
localX:0,
localY:0,
ctrlKey:false,
altKey:false,
shiftKey:false,
buttonDown:false,
delta:0,
commandKey:false,
controlKey:false,
clickCount:1
};
var p;
var canvasRect=this._canvas.getBoundingClientRect();
if(touchType)
{
var touches=e.changedTouches;
var firstTouch=touches[0];
p=this._getMousePoint(
firstTouch.clientX*ratio-canvasRect.left,
firstTouch.clientY*ratio-canvasRect.top
);
this._mouseX=p.x;
this._mouseY=p.y;
if(this.mapTouchToMouse)
{
this._simulatedEvent.initMouseEvent(
mouseType.toLowerCase(),
true,
true,
window,
1,
firstTouch.screenX,
firstTouch.screenY,
firstTouch.clientX,
firstTouch.clientY,
false,
false,
false,
false,
0,
null
);
this._mousevent(this._simulatedEvent);
}
else
{
for(var i=0;i<touches.length;i++)
{
p=this._getMousePoint(
touches[i].clientX*ratio-canvasRect.left,
touches[i].clientY*ratio-canvasRect.top
);
data.type=touchType;
data.bubbles=false;
data.cancelable=false;
data.pressure=touches[i].force;
data.touchPointID=touches[i].identifier;
data.isPrimaryTouchPoint=false;
data.localX=p.x;
data.localY=p.y;
data.globalX=p.x;
data.globalY=p.y;
data.sizeX=touches[i].radiusX;
data.sizeY=touches[i].radiusY;
data.ctrlKey=e.ctrlKey;
data.altKey=e.altKey;
data.shiftKey=e.shiftKey;
data.commandKey=false;
data.controlKey=false;
data.timestamp=new Date().getTime();
data.touchIntent=0;
data.isTouchPointCanceled=false;
this._updateInteractiveEvent(data,true);
}
}
}
else
{
var delta=0;
if(mouseType==flash.events.MouseEvent.MOUSE_WHEEL)
{
delta=-e.deltaY||e.detail||e.wheelDelta;
}
p=this._getMousePoint(
e.clientX*ratio-canvasRect.left,
e.clientY*ratio-canvasRect.top
);
this._mouseX=p.x;
this._mouseY=p.y;
data.isMouseEvent=true;
data.type=mouseType;
data.bubbles=true;
data.cancelable=false;
data.localX=this._mouseX;
data.localY=this._mouseY;
data.globalX=p.x;
data.globalY=p.y;
data.ctrlKey=e.ctrlKey;
data.altKey=e.altKey;
data.shiftKey=e.shiftKey;
data.buttonDown=this._buttonDown;
data.delta=delta;
data.commandKey=false;
data.controlKey=false;
data.clickCount=this._clickCount;
this._updateInteractiveEvent(data,true);
}
e.preventDefault();
};
d._checkInteractiveEvent=function(data)
{
return{x:data.localX,y:data.localY};
};
d.updateSize=function(width,height)
{
var ratio=flash.getPixelRatio();
this._height=height*ratio;
this._width=width*ratio;
this._render.setSize(width,height);
this.dispatchEvent(new flash.events.Event(flash.events.Event.RESIZE));
};
d.set_accessibilityImplementation=function(value)
{
return;
};
d.set_accessibilityProperties=function(value)
{
return;
};
d.set_blendMode=function(value)
{
return;
};
d.set_cacheAsBitmap=function(value)
{
return;
};
d.set_contextMenu=function(value)
{
return;
};
d.get_displayState=function()
{
return null;
};
d.set_displayState=function(value)
{
};
d.set_filters=function(value)
{
return;
};
d.get_wmodeGPU=function()
{
return this._rendermode=="3d";
};
d.get_focus=function()
{
return null;
};
d.set_focus=function(newFocus)
{
};
d.set_focusRect=function(value)
{
return;
};
d.get_frameRate=function()
{
return this._frameRate;
};
d.set_frameRate=function(value)
{
this._frameRate=value;
return value;
};
d.get_fullScreenHeight=function()
{
return 0;
};
d.get_fullScreenSourceRect=function()
{
return null;
};
d.set_fullScreenSourceRect=function(value)
{
};
d.get_fullScreenWidth=function()
{
return 0;
};
d.set_height=function(value)
{
return;
};
d.set_mask=function(value)
{
return;
};
d.set_mouseEnabled=function(value)
{
return;
};
d.set_name=function(value)
{
return;
};
d.set_opaqueBackground=function(value)
{
return;
};
d.get_quality=function()
{
return null;
};
d.set_quality=function(value)
{
};
d.get_color=function()
{
return this._color;
};
d.set_color=function(value)
{
this._color=value;
return value;
};
d.set_rotation=function(value)
{
return;
};
d.set_scale9Grid=function(value)
{
return;
};
d.get_scaleMode=function()
{
return this._scaleMode;
};
d.set_scaleMode=function(value)
{
this._scaleMode=value;
switch(this._scaleMode)
{
case flash.display.StageScaleMode.EXACT_FIT:
case flash.display.StageScaleMode.NO_BORDER:
case flash.display.StageScaleMode.NO_SCALE:
case flash.display.StageScaleMode.SHOW_ALL:
break;
default:
this._scaleMode=flash.display.StageScaleMode.SHOW_ALL;
break;
}
return this._scaleMode;
};
d.get_align=function()
{
return this._align;
};
d.set_align=function(value)
{
this._align=value;
switch(this._align)
{
case flash.display.StageAlign.TOP:
case flash.display.StageAlign.BOTTOM:
case flash.display.StageAlign.LEFT:
case flash.display.StageAlign.RIGHT:
case flash.display.StageAlign.TOP_LEFT:
case flash.display.StageAlign.TOP_RIGHT:
case flash.display.StageAlign.BOTTOM_LEFT:
case flash.display.StageAlign.BOTTOM_RIGHT:
break;
default:
this._align="";
break;
}
return this._align;
};
d.set_scaleX=function(value)
{
return;
};
d.set_scaleY=function(value)
{
return;
};
d.set_scrollRect=function(value)
{
return;
};
d.get_showDefaultContextMenu=function()
{
return false;
};
d.set_showDefaultContextMenu=function(value)
{
};
d.get_stageFocusRect=function()
{
return false;
};
d.set_stageFocusRect=function(on)
{
};
d.get_stageHeight=function()
{
if(this._scaleMode==flash.display.StageScaleMode.NO_SCALE)
{
return this._height;
}
else
{
return this._originalHeight;
}
};
d.get_stageWidth=function()
{
if(this._scaleMode==flash.display.StageScaleMode.NO_SCALE)
{
return this._width;
}
else
{
return this._originalWidth;
}
};
d.set_tabEnabled=function(value)
{
return;
};
d.set_tabIndex=function(value)
{
value=Math.floor(value);
return;
};
d.get_textSnapshot=function()
{
return null;
};
d.set_transform=function(value)
{
return;
};
d.set_visible=function(value)
{
return;
};
d.set_width=function(value)
{
return;
};
d.set_x=function(value)
{
return;
};
d.set_y=function(value)
{
return;
};
d.invalidate=function()
{
this.dispatchEvent(new flash.events.Event(flash.events.Event.RENDER));
};
d.isFocusInaccessible=function()
{
return false;
};
var s={};
s.__init__=function()
{
this.prototype.DisplayObjectContainer_constructor=this.__base__;
this.__current__=null;
this.__frameSquare=0;
this._corrections={};
};
flash.addDescription("flash.display.Stage",d,"flash.display.DisplayObjectContainer",s,null);
}
());;
(function()
{
"use strict";
var d={};
d._winding=null;
d.commands=null;
d.data=null;
d.get_winding=function()
{
return this._winding;
};
d.set_winding=function(param1)
{
if(param1!=flash.display.GraphicsPathWinding.EVEN_ODD)
{
}
if(param1!=flash.display.GraphicsPathWinding.NON_ZERO)
{
throw new ArgumentError(2008,"winding");
}
this._winding=param1;
return this._winding;
};
d.GraphicsPath=function(commands,data,winding)
{
this.commands=[];
this.data=[];
if(commands)
{
this.commands=commands;
}
if(data)
{
this.data=data;
}
if(winding)
{
this._winding=winding;
}
else
{
this._winding=flash.display.GraphicsPathWinding.EVEN_ODD;
}
};
d.moveTo=function(x,y)
{
this.commands.push(flash.display.GraphicsPathCommand.MOVE_TO);
this.data.push(x,y);
}
d.lineTo=function(x,y)
{
this.commands.push(flash.display.GraphicsPathCommand.LINE_TO);
this.data.push(x,y);
}
d.widelineTo=function(x,y)
{
this.commands.push(flash.display.GraphicsPathCommand.WIDE_LINE_TO);
this.data.push(x,y,x,y);
}
d.widemoveTo=function(x,y)
{
this.commands.push(flash.display.GraphicsPathCommand.WIDE_MOVE_TO);
this.data.push(x,y,x,y);
}
d.curveTo=function(controlX,controlY,anchorX,anchorY)
{
this.commands.push(flash.display.GraphicsPathCommand.CURVE_TO);
this.data.push(controlX,controlY,anchorX,anchorY);
}
d.cubicCurveTo=function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY)
{
this.commands.push(flash.display.GraphicsPathCommand.CUBIC_CURVE_TO);
this.data.push(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY);
}
d.clone=function()
{
return new flash.display.GraphicsPath(commands,data,winding);
}
flash.addDescription("flash.display.GraphicsPath",d,null,null,["flash.display.IGraphicsPath","flash.display.IGraphicsData"]);
}
());;
(function()
{
"use strict";
var s={};
s.__init__=function()
{
this.NONE="none";
this.ROUND="round";
this.SQUARE="square";
};
flash.addDescription("flash.display.CapsStyle",null,null,s,null);
}
());;
(function()
{
"use strict";
var d={};
d._interpolationMethod=null;
d._spreadMethod=null;
d._type=null;
d.alphas=null;
d.colors=null;
d.focalPointRatio=0;
d.matrix=null;
d.ratios=null;
d.get_interpolationMethod=function()
{
return this._interpolationMethod;
};
d.set_interpolationMethod=function(param1)
{
if(param1!=flash.display.InterpolationMethod.LINEAR_RGB)
{
}
if(param1!=flash.display.InterpolationMethod.RGB)
{
throw new ArgumentError(2008,"interpolationMethod");
}
this._interpolationMethod=param1;
return;
};
d.get_spreadMethod=function()
{
return this._spreadMethod;
};
d.set_spreadMethod=function(param1)
{
if(param1!="none")
{
}
if(param1!=flash.display.SpreadMethod.PAD)
{
}
if(param1!=flash.display.SpreadMethod.REFLECT)
{
}
if(param1!=flash.display.SpreadMethod.REPEAT)
{
throw new ArgumentError(2008,"spreadMethod");
}
this._spreadMethod=param1;
return;
};
d.get_type=function()
{
return this._type;
};
d.set_type=function(param1)
{
if(param1!=flash.display.GradientType.LINEAR)
{
}
if(param1!=flash.display.GradientType.RADIAL)
{
throw new ArgumentError(2008,"type");
}
this._type=param1;
return;
};
d.GraphicsGradientFill=function(param1,param2,param3,param4,param5,param6,param7,param8)
{
if(param1==undefined)param1="linear";
if(param2==undefined)param2=null;
if(param3==undefined)param3=null;
if(param4==undefined)param4=null;
if(param5==undefined)param5=null;
if(param6==undefined)param6="pad";
if(param7==undefined)param7="rgb";
if(param8==undefined)param8=0;
this._type=param1;
this.colors=param2;
this.alphas=param3;
this.ratios=param4;
this.matrix=param5;
this._spreadMethod=param6;
this._interpolationMethod=param7;
this.focalPointRatio=param8;
if(this._type!=flash.display.GradientType.LINEAR)
{
}
if(this._type!=flash.display.GradientType.RADIAL)
{
throw new ArgumentError(2008,"type");
}
if(this._spreadMethod!="none")
{
}
if(this._spreadMethod!=flash.display.SpreadMethod.PAD)
{
}
if(this._spreadMethod!=flash.display.SpreadMethod.REFLECT)
{
}
if(this._spreadMethod!=flash.display.SpreadMethod.REPEAT)
{
throw new ArgumentError(2008,"spreadMethod");
}
if(this._interpolationMethod!=flash.display.InterpolationMethod.LINEAR_RGB)
{
}
if(this._interpolationMethod!=flash.display.InterpolationMethod.RGB)
{
throw new ArgumentError(2008,"interpolationMethod");
}
return;
};
flash.addDescription("flash.display.GraphicsGradientFill",d,null,null,["flash.display.IGraphicsFill","flash.display.IGraphicsData"]);
}
());;
(function()
{
"use strict";
var s={};
s.__init__=function()
{
this.PAD="pad";
this.REFLECT="reflect";
this.REPEAT="repeat";
};
flash.addDescription("flash.display.SpreadMethod",null,null,s,null);
}
());;
(function()
{
"use strict";
var d={};
d.alpha=1;
d.color=0;
d.GraphicsSolidFill=function(param1,param2)
{
if(param1==undefined)param1=0;
param1=Math.floor(param1);
if(param2==undefined)param2=1;
this.color=param1;
this.alpha=param2;
};
flash.addDescription("flash.display.GraphicsSolidFill",d,null,null,["flash.display.IGraphicsFill","flash.display.IGraphicsData"]);
}
());;
(function()
{
"use strict";
var d={};
d.IGraphicsData=function()
{
};
flash.addDescription("flash.display.IGraphicsData",d,null,null,null);
}
());;
(function()
{
"use strict";
var s={};
s.__init__=function()
{
this.BEVEL="bevel";
this.MITER="miter";
this.ROUND="round";
};
flash.addDescription("flash.display.JointStyle",null,null,s,null);
}
());;
(function()
{
"use strict";
var d={};
d._name=null;
d._mask=null;
d._isMask=false;
d._loaderInfo=null;
d._blendMode=null;
d._visible=true;
d._parent=null;
d._transform=null;
d._filters=null;
d._concatenatedFilters=null;
d.__depth__=-1;
d.__id__=-1;
d.__maskDepth__=-1;
d._scaleCorrection=1;
d.get_loaderInfo=function()
{
return this._loaderInfo;
};
d.get_mask=function()
{
return this._mask;
};
d.set_mask=function(value)
{
if(this._mask)
{
this._mask._isMask=false;
}
this._mask=value;
if(this._mask)
{
this._mask._isMask=true;
}
return value;
};
d.DisplayObject=function()
{
this.EventDispatcher_constructor();
this._transform=new flash.geom.Transform(this);
this._filters=[];
this._concatenatedFilters=[];
this._loaderInfo=new flash.display.LoaderInfo();
this._name="instance"+(flash.display.DisplayObject.__instanceIndex++);
};
d.get_name=function()
{
return this._name;
};
d.set_name=function(value)
{
this._name=value;
return value;
};
d.get_alpha=function()
{
return this._transform._colorTransform.alphaMultiplier;
};
d.set_alpha=function(value)
{
this._transform._colorTransform.alphaMultiplier=value;
return value;
};
d.get_transform=function()
{
return this._transform;
};
d.set_transform=function(value)
{
this._transform=value;
return value;
};
d.get_x=function()
{
return this._transform._matrix.tx;
};
d.set_x=function(value)
{
this._transform._matrix.tx=value;
return value;
};
d.get_y=function()
{
return this._transform._matrix.ty;
};
d.set_y=function(value)
{
this._transform._matrix.ty=value;
return value;
};
d.get_rotation=function()
{
var m=this._transform._matrix;
return Math.atan2(m.b,m.a)*180/Math.PI;
};
d.set_rotation=function(value)
{
var angle=value-this.get_rotation();
if(angle!=0)
{
var m=this._transform._matrix;
var tx=m.tx;
var ty=m.ty;
m.rotate(angle/180*Math.PI);
m.tx=tx;
m.ty=ty;
}
return value;
};
d.get_scaleX=function()
{
var m=this._transform._matrix;
var scale=m.a*m.d-m.b*m.c;
return Math.sqrt(m.a*m.a+m.b*m.b)*(scale>0?1:-1);
};
d.set_scaleX=function(value)
{
var m=this._transform._matrix;
var scale=this.get_scaleX();
if(scale!=0)
{
scale=value/scale;
m.a*=scale;
m.b*=scale;
}
else
{
m.a=value;
m.b=0;
}
return value;
};
d.get_scaleY=function()
{
var m=this._transform._matrix;
return Math.sqrt(m.c*m.c+m.d*m.d);
};
d.set_scaleY=function(value)
{
var m=this._transform._matrix;
var scale=this.get_scaleY();
if(scale!=0)
{
scale=value/scale;
m.c*=scale;
m.d*=scale;
}
else
{
m.c=0;
m.d=value;
}
return value;
};
d.get_parent=function()
{
return this._parent;
};
d.get_root=function()
{
if(this._parent&&!(this._parent instanceof flash.display.Stage))
{
return this._parent.get_root();
}
else
{
return this;
}
};
d.get_stage=function()
{
if(this._parent)
{
return this._parent.get_stage();
}
else if(this instanceof flash.display.Stage)
{
return this;
}
else
{
return null;
}
};
d.get_mousePoint=function()
{
return this.globalToLocal(
new flash.geom.Point(
flash.display.Stage.__current__._mouseX,
flash.display.Stage.__current__._mouseY
)
);
}
d.get_mouseX=function()
{
return this.get_mousePoint().x;
}
d.get_mouseY=function()
{
return this.get_mousePoint().y;
}
d.globalToLocal=function(point)
{
var m=this._transform.get_concatenatedMatrix();
m.invert();
return m.transformPoint(point);
};
d.localToGlobal=function(point)
{
var m=this._transform.get_concatenatedMatrix();
return m.transformPoint(point);
}
d.get_visible=function()
{
return this._visible;
};
d.set_visible=function(value)
{
this._visible=value;
return value;
};
d.get_blendMode=function()
{
return this._blendMode;
};
d.set_blendMode=function(value)
{
this._blendMode=value;
return value;
};
d.get_cacheAsBitmap=function()
{
return false;
};
d.set_cacheAsBitmap=function(value)
{
};
d.get_filters=function()
{
return this._filters;
};
d.set_filters=function(value)
{
this._filters=value;
return;
};
d.get_opaqueBackground=function()
{
return null;
};
d.set_opaqueBackground=function(value)
{
};
d.get_scale9Grid=function()
{
return null;
};
d.set_scale9Grid=function(innerRectangle)
{
};
d.get_scrollRect=function()
{
return null;
};
d.set_scrollRect=function(value)
{
};
d.get_width=function()
{
var bounds=this.getBounds(this);
return bounds.width*this.get_scaleX();
};
d.set_width=function(value)
{
var bounds=this.getBounds(this);
if(bounds.width*this.get_scaleX()!=value)
{
this.set_scaleX(value/bounds.width);
}
return value;
};
d.get_height=function()
{
var bounds=this.getBounds(this);
return bounds.height*this.get_scaleY();
};
d.set_height=function(value)
{
var bounds=this.getBounds(this);
if(bounds.height*this.get_scaleY()!=value)
{
this.set_scaleY(value/bounds.height);
}
return value;
};
d._checkScaleCorrection=function()
{
var currentMatrix=this.get_transform().get_concatenatedMatrix();
var currentCorrection=Math.max(
Math.abs(currentMatrix.a),
Math.abs(currentMatrix.b),
Math.abs(currentMatrix.c),
Math.abs(currentMatrix.d)
);
var stage=this.get_stage();
if(stage)
{
var stageMatrix=stage._render._baseMatrix;
currentCorrection*=Math.max(stageMatrix.a,stageMatrix.d);
}
if(this._scaleCorrection!=currentCorrection)
{
this._scaleCorrection=currentCorrection;
return true;
}
return false;
};
d._getGraphicsBounds=function(targetCoordinateSpace)
{
var localBounds;
if(this.get_graphics)
{
localBounds=this.get_graphics()._getBounds();
}
if(this._bitmapData)
{
localBounds=this._bitmapData.get_rect();
}
if(this._text&&this._calculateTextBounds)
{
localBounds=this._calculateTextBounds();
}
if(localBounds&&!localBounds.isEmpty())
{
var matrix=this.get_transform().get_concatenatedMatrix();
if(targetCoordinateSpace)
{
var targetMatrix=targetCoordinateSpace.get_transform().get_concatenatedMatrix();
targetMatrix.invert();
matrix.concat(targetMatrix);
}
var limits={
minX:Number.MAX_VALUE,
minY:Number.MAX_VALUE,
maxX:-Number.MAX_VALUE,
maxY:-Number.MAX_VALUE
};
this._expandLimits(limits,matrix,localBounds.get_topLeft());
this._expandLimits(limits,matrix,localBounds.get_bottomRight());
this._expandLimits(limits,matrix,new flash.geom.Point(localBounds.x,localBounds.y+localBounds.height));
this._expandLimits(limits,matrix,new flash.geom.Point(localBounds.x+localBounds.width,localBounds.y));
return new flash.geom.Rectangle(
limits.minX,
limits.minY,
limits.maxX-limits.minX,
limits.maxY-limits.minY
);
}
return new flash.geom.Rectangle();
}
d._expandLimits=function(limits,matrix,point)
{
point=matrix.transformPoint(point);
if(limits.minX>point.x)limits.minX=point.x;
if(limits.maxX<point.x)limits.maxX=point.x;
if(limits.minY>point.y)limits.minY=point.y;
if(limits.maxY<point.y)limits.maxY=point.y;
};
d.__updateTransform__=function()
{
var transform=this.get_transform();
transform._concatenatedMatrix.copyFrom(transform._matrix);
transform._concatenatedColorTransform.copyFrom(transform._colorTransform);
if(this._filters.length)
{
this._concatenatedFilters=this._filters.slice();
}
else if(this._concatenatedFilters.length)
{
this._concatenatedFilters.length=0;
}
var parent=this.get_parent();
if(parent)
{
transform._concatenatedMatrix.concat(parent._transform._concatenatedMatrix);
transform._concatenatedColorTransform.concat(parent._transform._concatenatedColorTransform);
if(parent._concatenatedFilters.length)
{
this._concatenatedFilters=this._concatenatedFilters.concat(parent._concatenatedFilters);
}
}
transform._invertedConcatenatedMatrix.copyFrom(transform._concatenatedMatrix);
transform._invertedConcatenatedMatrix.invert();
};
d.__updateMovieClipList__=function()
{
}
d.getBounds=function(targetCoordinateSpace)
{
return this._getGraphicsBounds(targetCoordinateSpace);
};
d.getRect=function(targetCoordinateSpace)
{
return this.getBounds(targetCoordinateSpace);
};
d.hitTestObject=function(obj)
{
return false;
};
d.addEventListener=function(type,listener,useCapture,priority,useWeakReference)
{
if(type==flash.events.Event.ENTER_FRAME)
{
var index=flash.display.DisplayObject.__enterFrameObjects.indexOf(this);
if(index==-1)
{
flash.display.DisplayObject.__enterFrameObjects.push(this);
}
}
else if(type==flash.events.Event.EXIT_FRAME)
{
var index=flash.display.DisplayObject.__exitFrameObjects.indexOf(this);
if(index==-1)
{
flash.display.DisplayObject.__exitFrameObjects.push(this);
}
}
this.EventDispatcher_addEventListener(type,listener,useCapture,priority,useWeakReference);
};
d.removeEventListener=function(type,listener,useCapture)
{
if(type==flash.events.Event.ENTER_FRAME)
{
var index=flash.display.DisplayObject.__enterFrameObjects.indexOf(this);
if(index!=-1)
{
flash.display.DisplayObject.__enterFrameObjects.splice(index,1);
}
}
else if(type==flash.events.Event.EXIT_FRAME)
{
var index=flash.display.DisplayObject.__exitFrameObjects.indexOf(this);
if(index!=-1)
{
flash.display.DisplayObject.__exitFrameObjects.splice(index,1);
}
}
this.EventDispatcher_removeEventListener(type,listener,useCapture);
};
d._updateInteractiveEvent=function(data,dispatch)
{
if(!this._visible)return null;
return this._checkInteractiveEvent(data);
};
d._checkInteractiveEvent=function(data)
{
return null;
};
d._dispatchInteractiveEvent=function(data,x,y,target,type)
{
if(!type)
{
type=data.type;
}
if(this.hasEventListener(type))
{
var event=null;
if(data.isMouseEvent)
{
event=new flash.events.MouseEvent(
type,
data.bubbles,
data.cancelable,
x,
y,
target,
data.ctrlKey,
data.altKey,
data.shiftKey,
data.buttonDown,
data.delta,
data.commandKey,
data.controlKey,
data.clickCount
);
}
else
{
event=new flash.events.TouchEvent(
type,
data.bubbles,
data.cancelable,
data.touchPointID,
data.isPrimaryTouchPoint,
x,
y,
data.sizeX,
data.sizeY,
data.pressure,
target,
data.ctrlKey,
data.altKey,
data.shiftKey,
data.commandKey,
data.controlKey,
data.timestamp,
data.touchIntent,
data.isTouchPointCanceled
);
}
event.set_stageX(data.globalX);
event.set_stageY(data.globalY);
this.dispatchEvent(event);
}
if(type==flash.events.MouseEvent.MOUSE_DOWN)
{
flash.display.DisplayObject.__pressedObjects.push(this);
}
else if(type==flash.events.MouseEvent.MOUSE_UP&&flash.display.DisplayObject.__pressedObjects.indexOf(this)!=-1)
{
this._dispatchInteractiveEvent(data,x,y,target,flash.events.MouseEvent.CLICK);
}
};
var s={};
s.__enterFrame__=function()
{
var objects=this.__enterFrameObjects;
for(var i=0;i<objects.length;i++)
{
var object=objects[i];
object.dispatchEvent(new flash.events.Event(flash.events.Event.ENTER_FRAME));
}
};
s.__exitFrame__=function()
{
var objects=this.__exitFrameObjects;
for(var i=0;i<objects.length;i++)
{
var object=objects[i];
object.dispatchEvent(new flash.events.Event(flash.events.Event.EXIT_FRAME));
}
};
s.__init__=function()
{
this.prototype.EventDispatcher_constructor=this.__base__;
this.prototype.EventDispatcher_addEventListener=this.__base__.prototype.addEventListener;
this.prototype.EventDispatcher_removeEventListener=this.__base__.prototype.removeEventListener;
this.__pressedObjects=[];
this.__enterFrameObjects=[];
this.__exitFrameObjects=[];
this.__instanceIndex=0;
};
flash.addDescription("flash.display.DisplayObject",d,"flash.events.EventDispatcher",s,["flash.display.IBitmapDrawable"]);
}
());;
(function()
{
"use strict";
var d={};
d._graphics=null;
d._buttonMode=false;
d._useHandCursor=true;
d._addedChildren=null;
d.__linkageEnabled=true;
d._render_=function(render)
{
this.__updateTransform__();
this._checkScaleCorrection();
var bitmapData=this._graphics._getBitmapData(this._scaleCorrection);
if(bitmapData)
{
render.drawBitmapData(
bitmapData,
this._graphics._getMap(),
this._graphics._getDisplayBounds(),
this._transform._concatenatedMatrix,
this._transform._concatenatedColorTransform,
this._blendMode,
this._concatenatedFilters
);
}
var children=this.get_numChildren();
var mask=null;
for(var i=0;i<children;i++)
{
var child=this.getChildAt(i);
if(child.__maskDepth__!=-1)
{
render.startMask(child);
mask=child;
}
else if(child._visible&&!child._isMask)
{
if(mask&&child.__depth__!=-1&&mask.__maskDepth__<=child.__depth__)
{
render.stopMask();
mask=null;
}
if(child._mask)
{
render.startMask(child._mask);
}
child._render_(render);
if(child._mask)
{
render.stopMask();
}
}
}
if(mask)
{
render.stopMask();
}
};
d.get_buttonMode=function()
{
return this._buttonMode;
};
d.set_buttonMode=function(value)
{
this._buttonMode=value;
return value;
};
d.get_useHandCursor=function()
{
return this._useHandCursor;
};
d.set_useHandCursor=function(value)
{
this._useHandCursor=value;
return value;
};
d.Sprite=function()
{
this._graphics=new flash.display.Graphics();
this.DisplayObjectContainer_constructor();
this._addedChildren=[];
flash.linkage(this,flash.display.MovieClip,flash.display.Sprite);
};
d.__constructChildren__=function(frame,remove,add,jump)
{
if(!frame)
{
throw new Error("Error: 'frame' must not be 'null'");
}
var j;
var i;
var id;
var child;
var place;
var exist;
var index;
var define;
if(remove)
{
for(j=0;j<this.get_numChildren();j++)
{
child=this.getChildAt(j);
if(child.__depth__!=-1)
{
exist=false;
for(i=0;i<frame.places.length;i++)
{
place=frame.places[i];
if(
place&&
place.depth==child.__depth__
)
{
id=place.id;
if(!id&&jump)
{
id=this.__findByDepth__(place.depth,"id");
}
if(!id||id==child.__id__)
{
exist=true;
break;
}
}
}
if(!exist)
{
if(this[child.get_name()]==child)
{
this[child.get_name()]=null;
}
this.removeChild(child);
j--;
}
}
}
}
if(add)
{
for(i=0;i<frame.places.length;i++)
{
place=frame.places[i];
if(place)
{
exist=false;
index=0;
for(j=0;j<this.get_numChildren();j++)
{
child=this.getChildAt(j);
if(!exist&&child.__depth__==place.depth)
{
if(place.matrix)
{
child._transform.set_matrix(place.matrix);
}
else if(jump)
{
var matrix=this.__findByDepth__(place.depth,"matrix");
if(matrix)
{
child._transform.set_matrix(matrix);
}
}
if(place.colorTransform)
{
child._transform.set_colorTransform(place.colorTransform);
}
else if(jump)
{
var colorTransform=this.__findByDepth__(place.depth,"colorTransform");
if(colorTransform)
{
child._transform.set_colorTransform(colorTransform);
}
}
if(place.filters)
{
child._filters=place.filters;
}
else if(jump)
{
var filters=this.__findByDepth__(place.depth,"filters");
if(filters)
{
child._filters=filters;
}
}
if(place.mask>=0)
{
child.__maskDepth__=place.mask;
}
exist=true;
}
if(child.__depth__!=-1&&child.__depth__<place.depth)
{
index=j+1;
}
}
if(!exist)
{
id=place.id;
if(!id&&jump)
{
id=this.__findByDepth__(place.depth,"id");
}
if(id)
{
define=flash.system.ApplicationDomain.get_currentDomain()._getDefine(id);
if(define)
{
child=define.createDisplayObject();
child.__depth__=place.depth;
child.__id__=id;
if(place.name)
{
child.set_name(place.name);
this._addedChildren.push(child);
}
if(place.matrix)
{
child._transform.set_matrix(place.matrix);
}
if(place.mask)
{
child.__maskDepth__=place.mask;
}
if(place.colorTransform)
{
child._transform.set_colorTransform(place.colorTransform);
}
if(place.filters)
{
child._filters=place.filters;
}
this.addChildAt(child,index);
}
}
}
}
}
}
};
d.__updateNames__=function()
{
if(this._addedChildren.length)
{
for(var i in this._addedChildren)
{
var child=this._addedChildren[i];
this[child.get_name()]=child;
}
this._addedChildren.length=0;
}
};
d.__findByDepth__=function(depth)
{
return null;
};
d.get_dropTarget=function()
{
return null;
};
d.get_graphics=function()
{
return this._graphics;
};
d.get_hitArea=function()
{
return null;
};
d.set_hitArea=function(value)
{
};
d.get_soundTransform=function()
{
return null;
};
d.set_soundTransform=function(sndTransform)
{
};
d.startDrag=function(lockCenter,bounds)
{
if(lockCenter==undefined)lockCenter=false;
if(bounds==undefined)bounds=null;
this._dragOldPoint={
x:this.get_mouseX(),
y:this.get_mouseY()
};
this.get_stage().addEventListener(
flash.events.MouseEvent.MOUSE_MOVE,
flash.bindFunction(this,this._dragMoveTo)
);
};
d.stopDrag=function()
{
this.get_stage().removeEventListener(
flash.events.MouseEvent.MOUSE_MOVE,
flash.bindFunction(this,this._dragMoveTo)
);
};
d._dragMoveTo=function(e)
{
var dx=this.get_mouseX()-this._dragOldPoint.x;
var dy=this.get_mouseY()-this._dragOldPoint.y;
this.set_x(this.get_x()+dx);
this.set_y(this.get_y()+dy);
this._dragOldPoint={
x:this.get_mouseX(),
y:this.get_mouseY()
};
}
d._checkInteractiveEvent=function(data)
{
return this._graphics._checkTouch(data.localX,data.localY,this);
};
var s={};
s.__init__=function()
{
this.prototype.DisplayObjectContainer_constructor=this.__base__;
};
flash.addDescription("flash.display.Sprite",d,"flash.display.DisplayObjectContainer",s,null);
}
());;
(function()
{
"use strict";
var s={};
s.__init__=function()
{
this.LINEAR_RGB="linearRGB";
this.RGB="rgb";
};
flash.addDescription("flash.display.InterpolationMethod",null,null,s,null);
}
());;
(function()
{
"use strict";
var d={};
d.IGraphicsPath=function()
{
};
flash.addDescription("flash.display.IGraphicsPath",d,null,null,null);
}
());;
(function()
{
"use strict";
var d={};
d._graphics=null;
d._render_=function(render)
{
this.__updateTransform__();
this._checkScaleCorrection();
var bitmapData=this._graphics._getBitmapData(this._scaleCorrection);
if(bitmapData)
{
render.drawBitmapData(
bitmapData,
this._graphics._getMap(),
this._graphics._getDisplayBounds(),
this._transform._concatenatedMatrix,
this._transform._concatenatedColorTransform,
this._blendMode,
this._concatenatedFilters
);
}
}
d.get_graphics=function()
{
return this._graphics;
};
d.Shape=function()
{
this._graphics=new flash.display.Graphics();
this.DisplayObject_constructor();
flash.linkage(this,flash.display.Shape);
};
d._checkInteractiveEvent=function(data)
{
return this._graphics._checkTouch(data.localX,data.localY,this);
};
var s={};
s.__init__=function()
{
this.prototype.DisplayObject_constructor=this.__base__;
};
flash.addDescription("flash.display.Shape",d,"flash.display.DisplayObject",s,null);
}
());;
(function()
{
"use strict";
var d={};
d._doubleClickEnabled=false;
d._focusRect={};
d._mouseEnabled=true;
d._tabEnabled=false;
d._tabIndex=0;
d._mouseOver=false;
d.get_doubleClickEnabled=function()
{
return this._doubleClickEnabled;
};
d.set_doubleClickEnabled=function(enabled)
{
this._doubleClickEnabled=value;
return this._doubleClickEnabled;
};
d.get_focusRect=function()
{
return this._focusRect;
};
d.set_focusRect=function(focusRect)
{
this._focusRect=focusRect;
return this._focusRect;
};
d.get_mouseEnabled=function()
{
return this._mouseEnabled;
};
d.set_mouseEnabled=function(enabled)
{
this._mouseEnabled=enabled;
return this._mouseEnabled;
};
d.get_tabEnabled=function()
{
return this._tabEnabled;
};
d.set_tabEnabled=function(enabled)
{
this._tabEnabled=enabled;
return this._tabEnabled;
};
d.get_tabIndex=function()
{
return this._tabIndex;
};
d.set_tabIndex=function(index)
{
index=Math.floor(index);
this._tabIndex=index;
};
d.InteractiveObject=function()
{
this.DisplayObject_constructor();
};
d._updateInteractiveEvent=function(data,dispatch)
{
if(!this._visible)return null;
var point=this._checkInteractiveEvent(data);
if(this._mouseEnabled)
{
if(dispatch&&point)
{
this._dispatchInteractiveEvent(data,point.x,point.y,this);
}
if(!(this instanceof flash.display.DisplayObjectContainer))
{
this._updateMoveEvent(point,data,dispatch);
}
}
return point;
};
d._updateMoveEvent=function(point,data,dispatch)
{
if(dispatch&&data.type==flash.events.MouseEvent.MOUSE_MOVE)
{
var useCursor=(this._buttonMode&&this._useHandCursor)||this instanceof flash.display.SimpleButton;
if(point)
{
if(useCursor)
{
this.get_stage()._cursorStyle("pointer");
}
if(!this._mouseOver)
{
this._dispatchInteractiveEvent(data,point.x,point.y,this,flash.events.MouseEvent.MOUSE_OVER);
this._mouseOver=true;
}
}
else
{
if(useCursor)
{
this.get_stage()._cursorStyle("default");
}
this._updateOverEvent(data);
}
}
}
d._updateOverEvent=function(data)
{
if(this._mouseOver)
{
this._dispatchInteractiveEvent(data,0,0,this,flash.events.MouseEvent.MOUSE_OUT);
this._mouseOver=false;
}
}
var s={};
s.__init__=function()
{
this.prototype.DisplayObject_constructor=this.__base__;
this.prototype.DisplayObject__updateInteractiveEvent=this.__base__.prototype._updateInteractiveEvent;
}
flash.addDescription("flash.display.InteractiveObject",d,"flash.display.DisplayObject",s,null);
}
());;
(function()
{
"use strict";
var s={};
s.__init__=function()
{
this.ALWAYS="always";
this.AUTO="auto";
this.NEVER="never";
};
flash.addDescription("flash.display.PixelSnapping",null,null,s,null);
}
());;
(function()
{
"use strict";
var d={};
d.callbackTable=null;
d.get__interopAvailable=function()
{
};
d.AVM1Movie=function()
{
};
d._callAS2=function(functionName,args)
{
};
d._callAS3=function(functionName,data)
{
};
d._setCallAS3=function(closure)
{
};
d.addCallback=function(functionName,closure)
{
};
d.call=function(functionName)
{
};
var s={};
s.__init__=function()
{
this.prototype.DisplayObject_constructor=this.__base__;
};
flash.addDescription("flash.display.AVM1Movie",d,"flash.display.DisplayObject",s,null);
}
());;
(function()
{
"use strict";
var d={};
d.GraphicsPathCommand=function()
{
};
var s={};
s.__init__=function()
{
this.NO_OP=0;
this.MOVE_TO=1;
this.LINE_TO=2;
this.CURVE_TO=3;
this.WIDE_MOVE_TO=4;
this.WIDE_LINE_TO=5;
this.CUBIC_CURVE_TO=6;
};
flash.addDescription("flash.display.GraphicsPathCommand",d,null,s,null);
}
());;
(function()
{
"use strict";
var d={};
d._content=null;
d._contentLoaderInfo=null;
d._imageObj=null;
d._urlLoader;
d.BlobBuilder=window.MozBlobBuilder||window.WebKitBlobBuilder||window.BlobBuilder;
d._imagePath=null;
d._font=null;
d._defineSprite=null;
d._defineFont=null;
d._render_=function(render)
{
this.__updateTransform__();
if(this._content!=null)
{
this._content._render_(render);
}
}
d.get_content=function()
{
return this._content;
};
d.get_contentLoaderInfo=function()
{
return this._contentLoaderInfo;
};
d.Loader=function()
{
this.DisplayObjectContainer_constructor();
this._contentLoaderInfo=new flash.display.LoaderInfo();
};
d.close=function()
{
};
d.load=function(request,context)
{
if(context==undefined)context=null;
flash.trace("load",request.get_url());
if(request.get_extension()=="swf")
{
request.set_extension("xml");
}
this._contentLoaderInfo._url=request.get_url();
if(!this._contentLoaderInfo._url)
{
this._contentLoaderInfo.dispatchEvent(new flash.events.IOErrorEvent(flash.events.IOErrorEvent.IO_ERROR));
return;
}
var extension=request.get_extension().toLowerCase();
if(extension=="jpg"||extension=="png"||extension=="gif")
{
this._loadImage(request.get_url());
}
else
{
this._urlLoader=new flash.net.URLLoader();
this._urlLoader.dataFormat=flash.net.URLLoaderDataFormat.BINARY;
this._urlLoader.addEventListener(flash.events.Event.COMPLETE,flash.bindFunction(this,this._complete));
this._urlLoader.load(request);
}
};
d._arrayBufferToDataUri=function(arrayBuffer)
{
var base64='',
encodings='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',
bytes=new Uint8Array(arrayBuffer),byteLength=bytes.byteLength,
byteRemainder=byteLength%3,mainLength=byteLength-byteRemainder,
a,b,c,d,chunk;
for(var i=0;i<mainLength;i=i+3)
{
chunk=(bytes[i]<<16)|(bytes[i+1]<<8)|bytes[i+2];
a=(chunk&16515072)>>18;
b=(chunk&258048)>>12;
c=(chunk&4032)>>6;
d=chunk&63;
base64+=encodings[a]+encodings[b]+encodings[c]+encodings[d];
}
if(byteRemainder==1)
{
chunk=bytes[mainLength];
a=(chunk&252)>>2;
b=(chunk&3)<<4;
base64+=encodings[a]+encodings[b]+'==';
}
else if(byteRemainder==2)
{
chunk=(bytes[mainLength]<<8)|bytes[mainLength+1];
a=(chunk&16128)>>8;
b=(chunk&1008)>>4;
c=(chunk&15)<<2;
base64+=encodings[a]+encodings[b]+encodings[c]+'=';
}
return"data:image/jpg;base64,"+base64;
};
d._arayBufferToString=function(buffer)
{
var array=new Uint8Array(buffer);
var result="";
for(var i=0;i<array.length;i++)
{
result+=String.fromCharCode(array[i]);
}
return result;
};
d._progress=function(value)
{
this._contentLoaderInfo._bytesLoaded=Math.round(value*this._contentLoaderInfo.get_bytesTotal());
this._contentLoaderInfo.dispatchEvent(
new flash.events.ProgressEvent(
flash.events.ProgressEvent.PROGRESS,
false,
false,
this._contentLoaderInfo.get_bytesLoaded(),
this._contentLoaderInfo.get_bytesTotal()
)
);
}
d._complete=function(e)
{
flash.trace("_complete");
this._urlLoader.removeEventListener(flash.events.Event.COMPLETE,flash.bindFunction(this,this._complete));
this._progress(0.1);
var data=this._urlLoader.data;
if(data instanceof ArrayBuffer)
{
data=this._arayBufferToString(data);
}
if(this._ifSWF(data))
{
this._parseSWF(data);
}
else
{
data=this._arrayBufferToDataUri(this._urlLoader.data);
this._loadImage(data);
}
};
d._loadImage=function(source)
{
this._imageObj=new Image();
this._imageObj.onload=flash.bindFunction(this,this._addBitmapObject);
this._imageObj.src=source;
};
d._ifSWF=function(data)
{
return data.indexOf("<SWFData")!=-1;
}
d._getFolder=function()
{
var parts=this._contentLoaderInfo._url.split("/");
parts.pop();
if(parts.length)
{
return parts.join("/")+"/";
}
else
{
return"";
}
};
d._parseSWF=function(data)
{
flash.swf.Tag._baseId=this._urlLoader._request.get_name()+"_";
var xml=new flash.xml.XMLDocument();
xml.ignoreWhite=true;
xml.parseXML(data);
if(xml.firstChild.nodeName=="parsererror")
{
console.error("Parse XML Error: "+String(xml));
}
var attributes=xml.firstChild.get_attributes();
this._contentLoaderInfo._frameRate=Number(attributes.frameRate);
this._contentLoaderInfo._width=Number(attributes.width);
this._contentLoaderInfo._height=Number(attributes.height);
if(attributes.border)
{
flash.swf.DefineShape._border=Number(attributes.border);
}
else
{
flash.swf.DefineShape._border=2;
}
var domain=flash.system.ApplicationDomain._currentDomain=this._contentLoaderInfo._applicationDomain;
this._defineSprite=new flash.swf.DefineSprite();
this._defineSprite.id=flash.swf.Tag._baseId+"0";
this._defineSprite.fromXML(xml.firstChild);
flash.embed();
domain._setDefine(this._defineSprite);
domain._initAudio(this._getFolder());
flash.trace("swf images = "+domain._images);
this._loadSWFImage();
};
d._loadSWFImage=function()
{
this._progress(0.1+0.9*flash.system.ApplicationDomain.get_currentDomain()._getloadInagesProgress());
this._imagePath=flash.system.ApplicationDomain.get_currentDomain()._getImageForLoad();
if(this._imagePath)
{
var path=this._getFolder()+this._imagePath+"?rnd="+Math.random();
var request=new flash.net.URLRequest(path);
var loader=new flash.display.Loader();
loader.get_contentLoaderInfo().addEventListener(flash.events.Event.COMPLETE,flash.bindFunction(this,this._loadSWFImageComplete));
loader.load(request);
}
else
{
this._loadSWFFont();
}
}
d._loadSWFImageComplete=function(e)
{
var bitmap=e._target._content.get_bitmapData();
this._contentLoaderInfo._applicationDomain._setImage(this._imagePath,bitmap);
this._loadSWFImage();
}
d._loadSWFFont=function()
{
this._font=flash.system.ApplicationDomain.get_currentDomain()._getFontForLoad();
if(this._font)
{
var loader=new flash.text.CSSFontLoader(this._font);
loader.addEventListener(flash.events.Event.COMPLETE,flash.bindFunction(this,this._loadSWFFontComplete));
}
else
{
this.addEventListener(flash.events.Event.ENTER_FRAME,flash.bindFunction(this,this._loadSWFContentComplete));
}
}
d._loadSWFFontComplete=function(e)
{
this._font._loaded=true;
this._loadSWFFont();
}
d._loadSWFContentComplete=function(e)
{
flash.embed();
this.removeEventListener(flash.events.Event.ENTER_FRAME,flash.bindFunction(this,this._loadSWFContentComplete));
this._content=this._defineSprite.createDisplayObject();
this.DisplayObjectContainer_addChildAt(this._content,0);
this._contentLoaderInfo.set_content(this._content);
}
d._addBitmapObject=function()
{
var bitmapData=new flash.display.BitmapData(this._imageObj.width,this._imageObj.height,true,0x00000000);
var bitmapdata_Context=bitmapData._virtualcanvas.getContext('2d');
bitmapdata_Context.drawImage(this._imageObj,0,0);
try
{
bitmapData._initData();
}
catch(e)
{
this._contentLoaderInfo.dispatchEvent(new flash.events.SecurityErrorEvent(flash.events.SecurityErrorEvent.SECURITY_ERROR));
}
this._contentLoaderInfo._width=this._imageObj.width;
this._contentLoaderInfo._height=this._imageObj.height;
this._content=new flash.display.Bitmap(bitmapData);
this.DisplayObjectContainer_addChildAt(this._content,0);
this._progress(1);
this._contentLoaderInfo.set_content(this._content);
flash.trace("image loaded");
};
d.loadBytes=function(bytes,context)
{
if(context==undefined)context=null;
};
d.unload=function()
{
};
d.addChild=function(child)
{
throw new Error(flash.errors.IllegalOperationError,2069);
};
d.addChildAt=function(child,index)
{
throw new Error(flash.errors.IllegalOperationError,2069);
};
d.removeChild=function(child)
{
};
d.removeChildAt=function(index)
{
throw new Error(flash.errors.IllegalOperationError,2069);
};
d.setChildIndex=function(child,index)
{
throw new Error(flash.errors.IllegalOperationError,2069);
};
var s={};
s.__init__=function()
{
this.prototype.DisplayObjectContainer_constructor=this.__base__;
this.prototype.DisplayObjectContainer_addChildAt=this.__base__.prototype.addChildAt;
};
flash.addDescription("flash.display.Loader",d,"flash.display.DisplayObjectContainer",s,null);
}
());;
(function()
{
"use strict";
var d={};
d.bitmapData=null;
d.matrix=null;
d.repeat=false;
d.smooth=false;
d.GraphicsBitmapFill=function(param1,param2,param3,param4)
{
if(param1==undefined)param1=null;
if(param2==undefined)param2=null;
if(param3==undefined)param3=true;
if(param4==undefined)param4=false;
this.bitmapData=param1;
this.matrix=param2;
this.repeat=param3;
this.smooth=param4;
};
flash.addDescription("flash.display.GraphicsBitmapFill",d,null,null,["flash.display.IGraphicsFill","flash.display.IGraphicsData"]);
}
());;
(function()
{
"use strict";
var s={};
s.__init__=function()
{
this.BEST="best";
this.HIGH="high";
this.LOW="low";
this.MEDIUM="medium";
};
flash.addDescription("flash.display.StageQuality",null,null,s,null);
}
());;
(function()
{
"use strict";
var s={};
s.__init__=function()
{
this.ADVANCED="advanced";
this.NORMAL="normal";
};
flash.addDescription("flash.text.AntiAliasType",null,null,s,null);
}
());;
(function()
{
"use strict";
var s={};
s.__init__=function()
{
this.CENTER="center";
this.LEFT="left";
this.NONE="none";
this.RIGHT="right";
};
flash.addDescription("flash.text.TextFieldAutoSize",null,null,s,null);
}
());;
(function()
{
"use strict";
var d={};
d._fontName="";
d._fontType="";
d._fontStyle="";
d._glyphs="";
d._path="";
d._id="";
d._loaded=false;
d.get_fontName=function()
{
return this._fontName;
};
d.get_fontStyle=function()
{
return this._fontStyle;
};
d.get_fontType=function()
{
return this._fontType;
};
d.Font=function()
{
flash.system.ApplicationDomain.get_currentDomain()._embedFonts.push(this)
};
d.hasGlyphs=function(str)
{
};
var s={};
s.enumerateFonts=function(enumerateDeviceFonts)
{
return flash.system.ApplicationDomain.get_currentDomain()._embedFonts
};
s.registerFont=function(font)
{
};
flash.addDescription("flash.text.Font",d,null,s,null);
}
());;
(function()
{
"use strict";
var d={};
d.get_charCount=function()
{
return 0;
};
d.TextSnapshot=function()
{
return;
};
d.findText=function(beginIndex,textToFind,caseSensitive)
{
beginIndex=Math.floor(beginIndex);
return 0;
};
d.getSelected=function(beginIndex,endIndex)
{
beginIndex=Math.floor(beginIndex);
endIndex=Math.floor(endIndex);
return false;
};
d.getSelectedText=function(includeLineEndings)
{
if(includeLineEndings==undefined)includeLineEndings=false;
return null;
};
d.getText=function(beginIndex,endIndex,includeLineEndings)
{
beginIndex=Math.floor(beginIndex);
endIndex=Math.floor(endIndex);
if(includeLineEndings==undefined)includeLineEndings=false;
return null;
};
d.getTextRunInfo=function(beginIndex,endIndex)
{
beginIndex=Math.floor(beginIndex);
endIndex=Math.floor(endIndex);
return null;
};
d.hitTestTextNearPos=function(x,y,maxDistance)
{
if(maxDistance==undefined)maxDistance=0;
return 0;
};
d.setSelectColor=function(hexColor)
{
if(hexColor==undefined)hexColor=16776960;
hexColor=Math.floor(hexColor);
};
d.setSelected=function(beginIndex,endIndex,select)
{
beginIndex=Math.floor(beginIndex);
endIndex=Math.floor(endIndex);
};
flash.addDescription("flash.text.TextSnapshot",d,null,null,null);
}
());;
(function()
{
"use strict";
var s={};
s.__init__=function()
{
this.DYNAMIC="dynamic";
this.INPUT="input";
};
flash.addDescription("flash.text.TextFieldType",null,null,s,null);
}
());;
(function()
{
"use strict";
var d={};
d.ascent=0;
d.descent=0;
d.height=0;
d.textFieldHeight=0;
d.textFieldWidth=0;
d.width=0;
d.TextExtent=function(width,height,textFieldWidth,textFieldHeight,ascent,descent)
{
this.width=width;
this.height=height;
this.textFieldWidth=textFieldWidth;
this.textFieldHeight=textFieldHeight;
this.ascent=ascent;
this.descent=descent;
return;
};
flash.addDescription("flash.text.TextExtent",d,null,null,null);
}
());;
(function()
{
"use strict";
var s={};
s.__init__=function()
{
this.CENTER="center";
this.JUSTIFY="justify";
this.LEFT="left";
this.RIGHT="right";
};
flash.addDescription("flash.text.TextFormatAlign",null,null,s,null);
}
());;
(function()
{
"use strict";
var s={};
s.__init__=function()
{
this.BLOCK="block";
this.INLINE="inline";
};
flash.addDescription("flash.text.TextFormatDisplay",null,null,s,null);
}
());;
(function()
{
"use strict";
var d={};
d._css=null;
d.get__styles=function()
{
};
d.set__styles=function(styles)
{
};
d.get_styleNames=function()
{
var _loc_1=null;
var _loc_2=null;
_loc_1=[];
for(_loc_2 in this._css)
{
_loc_1.push(_loc_2);
}
return _loc_1;
};
d.StyleSheet=function()
{
this.EventDispatcher_constructor();
this._css=
{};
this.set__styles(
{}
);
return;
};
d._copy=function(o)
{
var _loc_2=null;
var _loc_3=null;
if(typeof(o)!="object")
{
return null;
}
_loc_2=
{};
for(_loc_3 in o)
{
_loc_2[_loc_3]=o[_loc_3];
}
return _loc_2;
};
d._parseCSSFontFamily=function(fontFamily)
{
};
d._parseCSSInternal=function(cssText)
{
};
d._parseColor=function(color)
{
};
d._update=function()
{
};
d.clear=function()
{
this._css=
{};
this.set__styles(
{}
);
this._update();
return;
};
d.doTransform=function(n)
{
var _loc_2=null;
_loc_2=this.transform(this._css[n]);
this.get__styles()[n]=_loc_2;
return;
};
d.getStyle=function(styleName)
{
return this._copy(this._css[styleName.toLowerCase()]);
};
d.parseCSS=function(CSSText)
{
var _loc_2=null;
var _loc_3=null;
_loc_2=this._parseCSSInternal(CSSText);
if(typeof(_loc_2)=="null")
{
return;
}
for(_loc_3 in _loc_2)
{
this._css[_loc_3]=this._copy(_loc_2[_loc_3]);
this.doTransform(_loc_3);
}
this._update();
return;
};
d.setStyle=function(styleName,styleObject)
{
var _loc_3=null;
_loc_3=styleName.toLowerCase();
this._css[_loc_3]=this._copy(styleObject);
this.doTransform(_loc_3);
this._update();
return;
};
d.transform=function(formatObject)
{
var _loc_2=null;
var _loc_3=undefined;
if(formatObject==null)
{
return null;
}
_loc_2=new flash.text.TextFormat();
_loc_3=formatObject.textAlign;
if(_loc_3)
{
_loc_2.set_align(_loc_3);
}
_loc_3=formatObject.fontSize;
if(_loc_3)
{
_loc_3=parseInt(_loc_3);
if(_loc_3>0)
{
_loc_2.set_size(_loc_3);
}
}
_loc_3=formatObject.textDecoration;
if(_loc_3=="none")
{
_loc_2.set_underline(false);
}
else if(_loc_3=="underline")
{
_loc_2.set_underline(true);
}
_loc_3=formatObject.marginLeft;
if(_loc_3)
{
_loc_2.set_leftMargin(parseInt(_loc_3));
}
_loc_3=formatObject.marginRight;
if(_loc_3)
{
_loc_2.set_rightMargin(parseInt(_loc_3));
}
_loc_3=formatObject.leading;
if(_loc_3)
{
_loc_2.set_leading(parseInt(_loc_3));
}
_loc_3=formatObject.kerning;
if(_loc_3=="true")
{
_loc_2.set_kerning(1);
}
else if(_loc_3=="false")
{
_loc_2.set_kerning(0);
}
else
{
_loc_2.set_kerning(parseInt(_loc_3));
}
_loc_3=formatObject.letterSpacing;
if(_loc_3)
{
_loc_2.set_letterSpacing(parseFloat(_loc_3));
}
_loc_3=formatObject.fontFamily;
if(_loc_3)
{
_loc_2.set_font(this._parseCSSFontFamily(_loc_3));
}
_loc_3=formatObject.display;
if(_loc_3)
{
_loc_2.set_display(_loc_3);
}
_loc_3=formatObject.fontWeight;
if(_loc_3=="bold")
{
_loc_2.set_bold(true);
}
else if(_loc_3=="normal")
{
_loc_2.set_bold(false);
}
_loc_3=formatObject.fontStyle;
if(_loc_3=="italic")
{
_loc_2.set_italic(true);
}
else if(_loc_3=="normal")
{
_loc_2.set_italic(false);
}
_loc_3=formatObject.textIndent;
if(_loc_3)
{
_loc_2.set_indent(parseInt(_loc_3));
}
_loc_3=formatObject.color;
if(_loc_3)
{
_loc_3=this._parseColor(_loc_3);
if(_loc_3!=null)
{
_loc_2.set_color(_loc_3);
}
}
return _loc_2;
};
var s={};
s.__init__=function()
{
this.prototype.EventDispatcher_constructor=this.__base__;
};
flash.addDescription("flash.text.StyleSheet",d,"flash.events.EventDispatcher",s,null);
}
());;
(function()
{
"use strict";
var s={};
s.__init__=function()
{
this.CRT="crt";
this.DEFAULT="default";
this.LCD="lcd";
};
flash.addDescription("flash.text.TextDisplayMode",null,null,s,null);
}
());;
(function()
{
"use strict";
var d={};
d._textureInfo=null;
d._alwaysShowSelection=false;
d._antiAliasType="";
d._autoSize="";
d._background=false;
d._backgroundColor=0;
d._border=false;
d._borderColor=0;
d._condenseWhite=false;
d._displayAsPassword=false;
d._embedFonts=false;
d._gridFitType="";
d._htmlText='';
d._maxChars=0;
d._mouseWheelEnabled=true;
d._restrict=null;
d._scrollH=0;
d._scrollV=1;
d._selectable=true;
d._sharpness=0;
d._styleSheet=null;
d._textColor=0;
d._thickness=0;
d._type=null;
d._useRichTextClipboard=false;
d._wordWrap=false;
d._defaultTextFormat=null;
d._multiline=false;
d._bottomScrollV=1;
d._maxScrollH=0;
d._maxScrollV=0;
d._selectionBeginIndex=-1;
d._selectionEndIndex=-1;
d._caretIndex=0;
d._text='';
d._bitmapData=null;
d._textFormats=null;
d._formatedtext=null;
d._dataUpdated=false;
d._canvasUpdated=false;
d._textureRect=null;
d._bounds=null;
d._realBounds=null;
d._textWidth=0;
d._textHeight=0;
d._checkTouch_matrix=null;
d._checkTouch_point=null;
d._input=null;
d._linesMetrics=null;
d._lines=null;
d._checkInteractiveEvent=function(data)
{
var bounds;
if(this._autoSize==flash.text.TextFieldAutoSize.NONE)
{
bounds=this._bounds;
}
else
{
bounds=this._bounds.clone();
bounds.width=this.get_width();
bounds.height=this.get_height();
}
this._checkTouch_point.x=data.localX;
this._checkTouch_point.y=data.localY;
this._checkTouch_point=this.globalToLocal(this._checkTouch_point);
if(bounds.containsPoint(this._checkTouch_point))
{
return this._checkTouch_point;
}
return null;
};
d.get_displayAsPassword=function()
{
return this._displayAsPassword;
}
d.set_displayAsPassword=function(value)
{
this._displayAsPassword=value;
return value;
}
d.get_autoSize=function()
{
return this._autoSize;
}
d.set_autoSize=function(value)
{
if(this._autoSize==value)return;
this._autoSize=value;
this._updateData(true);
return value;
}
d.get_border=function()
{
return this._border;
}
d.set_border=function(value)
{
if(this._border==value)return;
this._border=value;
this._canvasUpdated=false;
return value;
}
d.get_borderColor=function()
{
return this._borderColor;
}
d.set_borderColor=function(value)
{
if(this._borderColor==value)return;
this._borderColor=value;
this._canvasUpdated=false;
return value;
}
d.get_background=function()
{
return this._background;
}
d.set_background=function(value)
{
if(this._background==value)return;
this._background=value;
this._canvasUpdated=false;
return value;
}
d.get_backgroundColor=function()
{
return this._backgroundColor;
}
d.set_backgroundColor=function(value)
{
if(this._backgroundColor==value)return;
this._backgroundColor=value;
this._canvasUpdated=false;
return value;
}
d.get_gridFitType=function()
{
return this._gridFitType;
}
d.set_gridFitType=function(value)
{
this._gridFitType=value;
return value;
}
d.get_embedFonts=function()
{
return this._embedFonts;
}
d.set_embedFonts=function(value)
{
this._embedFonts=true;
return value;
}
d.get_antiAliasType=function()
{
return this._antiAliasType;
}
d.set_antiAliasType=function(value)
{
this._antiAliasType=value;
return value;
}
d.get_restrict=function()
{
return this._restrict;
};
d.set_restrict=function(value)
{
this._restrict=value;
}
d.get_text=function()
{
return this._text;
};
d.set_text=function(value)
{
if(value==null||value==undefined)
{
throw new Error("Error #2007: Parameter text must be non-null.");
}
value=String(value);
this._clear();
this.appendText(value);
if(this._input&&this._input.value!=value)
{
this._input.value=value;
}
};
d.get_multiline=function()
{
return this._multiline;
};
d.set_multiline=function(value)
{
if(this._multiline==value)return;
this._updateData(true);
this._multiline=value;
};
d.get_caretIndex=function()
{
return 0;
};
d.get_bottomScrollV=function()
{
return 0;
};
d.get_defaultTextFormat=function()
{
return this._defaultTextFormat.clone();
};
d.set_defaultTextFormat=function(format)
{
if(format)format=format.clone();
this._textColor=format._color;
if(this.styleSheet==null)
{
this._defaultTextFormat=format;
}
else
{
console.error("This method cannot be used on a text field with a style sheet.");
}
this._updateData(true);
};
d.get_length=function()
{
return this._text.length;
};
d.get_maxScrollH=function()
{
return 0;
};
d.get_maxScrollV=function()
{
var lineHeight=this._getLineHeight();
var lines=Math.ceil(lineHeight>0?this._bounds.height/lineHeight:this.get_numLines());
var value=this.get_numLines()-lines;
return(value>0?value+2:1);
};
d.get_numLines=function()
{
return this._lines.length;
};
d.get_scrollH=function()
{
return 0;
};
d.set_scrollH=function(value)
{
return 0;
};
d.get_scrollV=function()
{
return this._scrollV;
};
d.set_scrollV=function(value)
{
if(value<1)
{
value=1;
}
else if(value>this.get_maxScrollV())
{
value=this.get_maxScrollV();
}
if(this._scrollV==value)return;
this._scrollV=value;
this._canvasUpdated=false;
};
d.get_selectable=function()
{
return this._selectable;
};
d.set_selectable=function(value)
{
this._selectable=value;
};
d.get_selectedText=function()
{
if(this._selectionBeginIndex!=-1&&this._selectionEndIndex!=-1)
{
return this._text.substring(this._selectionBeginIndex,this._selectionEndIndex);
}
return null;
};
d.get_selectionBeginIndex=function()
{
return this._selectionBeginIndex;
};
d.set_selectionBeginIndex=function(value)
{
this._selectionBeginIndex=value;
return this._selectionBeginIndex;
};
d.get_selectionEndIndex=function()
{
return this._selectionEndIndex;
};
d.set_selectionEndIndex=function(value)
{
this._selectionEndIndex=value;
return this._selectionEndIndex;
};
d.get_textColor=function()
{
return this._textColor;
};
d.set_textColor=function(value)
{
this._textColor=value;
for(var i in this._textFormats)
{
this._textFormats[i].set_color(value);
}
if(this._defaultTextFormat)
{
this._defaultTextFormat.set_color(value);
}
this._canvasUpdated=false;
};
d.get_textHeight=function()
{
return this._textHeight;
};
d.get_textWidth=function()
{
return this._textWidth;
};
d.get_thickness=function()
{
return this._thickness;
};
d.set_thickness=function(value)
{
this._thickness=value;
return this._thickness;
};
d.get_type=function()
{
return this._type;
};
d.set_type=function(value)
{
this._type=value;
return this._type;
};
d.get_useRichTextClipboard=function()
{
return this._useRichTextClipboard;
};
d.set_useRichTextClipboard=function(value)
{
this._useRichTextClipboard=value;
return this._useRichTextClipboard;
};
d.get_wordWrap=function()
{
return this._wordWrap;
};
d.set_wordWrap=function(value)
{
if(this._wordWrap==value)return;
this._wordWrap=value;
this._updateData(true);
return this._wordWrap;
};
d.get_width=function()
{
return this._textureRect.width/this._scaleCorrection;
}
d.get_height=function()
{
return this._textureRect.height/this._scaleCorrection;
}
d.set_width=function(value)
{
if(value)
{
this._bounds.width=value;
}
this._updateData(true);
return this.get_width();
}
d.set_height=function(value)
{
if(value)
{
this._bounds.height=value;
}
this._updateData(true);
return this.get_height();
}
d.TextField=function()
{
this.InteractiveObject_constructor();
this._checkTouch_point=new flash.geom.Point();
this._checkTouch_matrix=new flash.geom.Matrix();
this._antiAliasType=flash.text.AntiAliasType.NORMAL;
this._autoSize=flash.text.TextFieldAutoSize.NONE;
this._type=flash.text.TextFieldType.DYNAMIC;
this._backgroundColor=0xFFFFFF;
this._gridFitType=flash.text.GridFitType.PIXEL;
this._defaultTextFormat=new flash.text.TextFormat("Times New Roman",12,0x000000,false,false,false,"","","left",0,0,0,0);
this._textureRect=new flash.geom.Rectangle(0,0,100,100);
this._bounds=new flash.geom.Rectangle(0,0,100,100);
this._realBounds=new flash.geom.Rectangle(0,0,100,100);
this._linesMetrics=[];
this._lines=[];
this._clear();
};
d._clear=function()
{
this._text="";
this._formatedtext=[];
this._linesMetrics=[];
}
d._render_=function(render)
{
this.__updateTransform__();
var matrix=this._transform._concatenatedMatrix;
if(this._type==flash.text.TextFieldType.DYNAMIC)
{
this._updateData();
this._updateCanvas();
render.drawBitmapData(
this._bitmapData,
this._textureRect,
this._realBounds,
matrix,
this._transform._concatenatedColorTransform,
this._blendMode,
this._concatenatedFilters,
true
);
}
else if(this._type==flash.text.TextFieldType.INPUT)
{
this._upateInput(matrix);
}
};
d._getLineHeight=function()
{
return this._linesMetrics&&this._linesMetrics.length?this._linesMetrics[0].height:0;
}
d._upateInput=function(matrix)
{
var stage=this.get_stage();
if(!stage)return;
if(!this._input)
{
this._input=document.createElement("input");
this._input.type=this._displayAsPassword?"password":"text";
this._input.value=this.get_text();
this._input.style.position="absolute";
this._input.style.border="none";
this._input.style.borderWidth="0px";
this._input.style.outline="none";
this._input.style.direction=this._defaultTextFormat.get_align()=="right"?"rtl":"ltr";
if(flash.getInternetExplorerVersion()==-1)
{
this._input.style.background="none";
}
var that=this;
this._input.onfocus=function(e)
{
that.dispatchEvent(new flash.events.FocusEvent(flash.events.FocusEvent.FOCUS_IN));
}
this._input.onblur=function(e)
{
that.dispatchEvent(new flash.events.FocusEvent(flash.events.FocusEvent.FOCUS_OUT));
flash.minimize();
that.setSelection(-1,-1);
}
this._input.onclick=function(e)
{
that.dispatchEvent(new flash.events.MouseEvent(flash.events.MouseEvent.CLICK,true,false,0,0,that));
}
this._input.onmousedown=function(e)
{
that.dispatchEvent(new flash.events.MouseEvent(flash.events.MouseEvent.MOUSE_DOWN,true,false,0,0,that));
}
this._input.onmouseup=function(e)
{
that.dispatchEvent(new flash.events.MouseEvent(flash.events.MouseEvent.MOUSE_UP,true,false,0,0,that));
}
this._input.onkeydown=function(e)
{
that.setSelection(-1,-1);
that.dispatchEvent(new flash.events.KeyboardEvent(flash.events.KeyboardEvent.KEY_DOWN,true,false,e.charCode,e.keyCode));
}
this._input.onkeyup=function(e)
{
that.dispatchEvent(new flash.events.KeyboardEvent(flash.events.KeyboardEvent.KEY_UP,true,false,e.charCode,e.keyCode));
}
}
if(this.get_visible())
{
var textFormat=this.get_defaultTextFormat();
var stageMatrix=stage._render._baseMatrix;
var ratio=flash.getPixelRatio();
var scale=1/ratio;
var left=scale*(stageMatrix.tx+stageMatrix.a*matrix.tx+this._bounds.x*stageMatrix.a*matrix.a);
var top=scale*(stageMatrix.ty+stageMatrix.d*matrix.ty+this._bounds.y*stageMatrix.d*matrix.d);
var width=scale*this._bounds.width*stageMatrix.a*matrix.a;
var size=scale*textFormat.get_size()*stageMatrix.a*matrix.a;
this._setStyleProperty(this._input,"left",left+"px");
this._setStyleProperty(this._input,"top",top+"px");
this._setStyleProperty(this._input,"width",width+"px");
this._setStyleProperty(this._input,"fontSize",size+"px");
this._setStyleProperty(this._input,"fontFamily",textFormat.get_font());
this._setStyleProperty(this._input,"textAlign",textFormat.get_align());
this._setStyleProperty(this._input,"color",flash.numberToColor(textFormat.get_color()));
if(this._input.value!=this.get_text())
{
this._checkRestrict();
this.set_text(this._input.value);
}
if(this._selectionBeginIndex!=-1&&this._selectionEndIndex!=-1)
{
this._input.setSelectionRange(this._selectionBeginIndex,this._selectionEndIndex);
}
flash.text.TextField.__addInput__(this._input);
}
}
d._setStyleProperty=function(object,property,value)
{
if(object.style[property]!=value)
{
object.style[property]=value;
}
};
d._checkRestrict=function()
{
if(this._input&&this._restrict)
{
var source=this._input.value;
var target="";
for(var i=0;i<source.length;i++)
{
var c=source[i];
if(this._restrict.indexOf(c)!=-1)
{
target+=c;
}
}
this._input.value=target;
}
}
d._updateData=function(force)
{
if(this._checkScaleCorrection())
{
this._dataUpdated=false;
}
if(force)
{
this._dataUpdated=false;
}
if(!this._dataUpdated)
{
this._dataUpdated=true;
if(!this._formatedtext.length)
{
this._textureRect.width=this._bounds.width*this._scaleCorrection;
this._textureRect.height=this._bounds.height*this._scaleCorrection;
this._realBounds.x=this._bounds.x;
this._realBounds.y=this._bounds.y;
this._realBounds.width=this.get_width();
this._realBounds.height=this.get_height();
this._canvasUpdated=false;
this._lines=[];
return;
}
var formatedtext=this._getFormattedLetters(this._formatedtext);
var w=this._bounds.width;
var h=this._bounds.height;
var lineIndex=0;
var i=formatedtext.length-1;
var lineWidth=0;
var lineHeight=0;
var text="";
var currentFormat=null;
var currentDefineFont=null;
var letters=[];
var nextLetter=null;
var color=0;
var size=0;
var fontName='';
var ascent=0;
var descent=0;
var leading=0;
var format=null;
for(var i=0;i<formatedtext.length;i++)
{
if(typeof formatedtext[i]=="string")
{
var letter=formatedtext[i];
if(color!=currentFormat._color)
{
color=currentFormat._color;
}
if(size!=currentFormat._size)
{
size=currentFormat._size;
}
if(fontName!=currentFormat._font&&currentFormat._font!="")
{
fontName=currentFormat._font;
}
nextLetter=typeof formatedtext[i+1]=="string"?formatedtext[i+1]:formatedtext[i+2];
var advance=0;
var step=0;
advance=flash.swf.DefineFont.__getCharsAdvance(letter,nextLetter,fontName);
step=advance*size/1024;
letters.push({
letter:letter,
size:size,
advance:step,
color:color,
fontName:fontName,
ascent:ascent*size,
descent:descent*size,
leading:leading,
format:currentFormat
});
}
else
{
currentFormat=formatedtext[i];
currentDefineFont=currentFormat._definefont;
if(!currentDefineFont)
{
var findedFont=flash.system.ApplicationDomain.get_currentDomain()._getFont(currentFormat._font);
if(findedFont)
{
currentDefineFont=findedFont._definefont;
}
}
if(currentDefineFont)
{
ascent=(currentDefineFont.ascent)/1024;
descent=(currentDefineFont.descent)/1024;
leading=(currentDefineFont.leading)/1024;
}
}
}
var lines=this._getLines(letters);
if(this._wordWrap)
{
for(var i=0;i<lines.length;i++)
{
lines[i]=this._getWords(lines[i][0]);
}
lines=this._wrapWords(lines);
}
var cw=0;
var ch=0;
var textBounds=this._getTextBounds(lines);
var lineHeight=this._getLineHeight();
if(this._autoSize==flash.text.TextFieldAutoSize.NONE)
{
cw=this._bounds.width;
ch=this._bounds.height>lineHeight?this._bounds.height:lineHeight;
}
else
{
cw=textBounds.width;
ch=textBounds.height;
}
this._textureRect.width=Number(cw)*this._scaleCorrection;
this._textureRect.height=Number(ch)*this._scaleCorrection;
this._lines=lines;
this._realBounds.x=this._bounds.x;
this._realBounds.y=this._bounds.y;
this._realBounds.width=this.get_width();
this._realBounds.height=this.get_height();
this._canvasUpdated=false;
}
};
d._updateCanvas=function()
{
if(!this._canvasUpdated)
{
this._canvasUpdated=true;
var textureWidth=flash.getTextureSize(this._textureRect.width);
var textureHeight=flash.getTextureSize(this._textureRect.height);
if(!this._bitmapData)
{
this._bitmapData=new flash.display.BitmapData(textureWidth,textureHeight,true,0);
}
else
{
this._bitmapData._setSize(textureWidth,textureHeight);
}
var context=this._bitmapData._context2d;
var scroll=this._scrollV-1;
for(var i=scroll;i<this._lines.length;i++)
{
this._renderLine(this._lines[i],i-scroll,context);
}
}
}
d._renderLine=function(line,index,context)
{
if(!line.length)return;
var lineletters=[];
var lineLength=line.length;
var wordLength=0;
var wordI=0;
var charI=0;
var linesMetrics=this._linesMetrics;
var lineMetrics=this._linesMetrics[index];
line=this._correctRightToLeft(line);
while(wordI<lineLength)
{
wordLength=line[wordI].length;
charI=0;
while(charI<wordLength)
{
lineletters.push(line[wordI][charI]);
charI++;
}
wordI++;
}
var x=0;
var space=0;
var lineletterslength=lineletters.length;
var lineMetricswidth=lineMetrics.width;
if(!lineletterslength)return;
while(lineletters[lineletterslength-1].letter==" ")
{
lineMetricswidth-=lineletters[lineletterslength-1].advance;
lineletterslength--;
}
if(this._autoSize==flash.text.TextFieldAutoSize.NONE)
{
if(lineletters[0].format._align=="right")
{
x=this._bounds.width-lineMetricswidth;
}
if(lineletters[0].format._align=="center")
{
x=(this._bounds.width-lineMetricswidth)/2;
}
if(lineletters[0].format._align=="justify")
{
if(lineMetrics!=linesMetrics[linesMetrics.length-1])
{
if(this._bounds.width*0.8<lineMetricswidth)
{
space=(this._bounds.width-lineMetricswidth)/lineletters.length;
}
}
}
}
else
{
x=0;
}
var y=0;
for(var i=0;i<index;i++)
{
y+=linesMetrics[i].height;
}
var charsCount=lineletters.length;
var c=0;
var currentformat=null;
var size=0;
var font="";
var color=0;
var letter="";
x=x*this._scaleCorrection;
y=y*this._scaleCorrection;
space=space*this._scaleCorrection;
while(c<charsCount)
{
letter=lineletters[c];
if(letter.fontName!=font||letter.size!=size||letter.color!=color)
{
var size=letter.size*this._scaleCorrection;
var font=letter.fontName;
var color=letter.color;
context.textBaseline="top";
context.font=flash.text.TextFormat._formatFont(font,size);
context.fillStyle=flash.numberToHex(color);
}
context.fillText(letter.letter,x,y);
x+=letter.advance*this._scaleCorrection+space;
c++;
}
}
d._correctRightToLeft=function(source)
{
var blocks=[];
var block;
var rightWords=0;
for(var i in source)
{
var word=source[i];
var rightToLeft=false;
if(word.length)
{
var letter=word[0];
var code=letter.letter.charCodeAt(0);
if(code>0x590&&code<0x5FF)
{
word.reverse();
while(word[0].letter==" ")
{
word.push(word.shift());
}
var last=word[word.length-1];
if(last.letter!=" ")
{
var space={};
for(var j in last)
{
space[j]=last[j];
}
space.letter=" ";
word.push(space);
}
this._updateAdvancedInWord(word);
rightWords++;
rightToLeft=true;
}
}
if(!block||block.rightToLeft!=rightToLeft)
{
block={words:[],rightToLeft:rightToLeft};
blocks.push(block);
}
block.words.push(word);
}
if(rightWords)
{
blocks.reverse();
}
var target=[];
for(i in blocks)
{
block=blocks[i];
if(block.rightToLeft)
{
block.words.reverse();
}
for(var j in block.words)
{
word=block.words[j];
target.push(word);
}
}
return target;
}
d._updateAdvancedInWord=function(word)
{
for(var i=0;i<word.length;i++)
{
var current=word[i];
var font=current.format._definefont;
var size=current.format._size;
var j=i+1;
var next=j<word.length?word[j]:null;
current.advance=0;
if(next)
{
var pairs=font.kerningsPairs[current.letter];
if(pairs)
{
current.advance=pairs[next.letter]?pairs[next.letter]:0;
}
else
{
current.advance=0;
}
if(font.chars[current.letter])
{
current.advance=((current.advance+font.chars[current.letter])*size)/1024;
}
}
else
{
current.advance=(font.chars[current.letter]*size)/1024;
}
}
}
d._calculateTextBounds=function()
{
return new flash.geom.Rectangle(
this._bounds.x,
this._bounds.y,
this.get_width(),
this.get_height()
);
}
d._getTextBounds=function(lines)
{
var width=0;
var height=0;
var textHeight=0;
var linesLength=lines.length;
var lineLength=0;
var wordLength=0;
var line=[];
var word=[];
var lineWidth=0;
var biggestCharSize=0;
var lineHeight=0;
while(linesLength>0)
{
linesLength--;
line=lines[linesLength];
lineLength=line.length;
while(lineLength>0)
{
lineLength--;
word=line[lineLength];
wordLength=word.length;
while(wordLength>0)
{
wordLength--;
lineWidth+=word[wordLength].advance;
lineHeight=word[wordLength].ascent+word[wordLength].leading+word[wordLength].descent
if(lineHeight==0)
{
lineHeight=word[wordLength].size;
}
if(biggestCharSize<lineHeight)
{
biggestCharSize=lineHeight;
}
}
}
if(lineWidth>width)
{
width=new Number(lineWidth);
}
this._linesMetrics.push({height:biggestCharSize,width:lineWidth});
height+=biggestCharSize;
lineWidth=0;
}
this._linesMetrics.reverse()
this._textWidth=width;
this._textHeight=biggestCharSize;
return{width:width,height:height};
}
d._getWordWidth=function(word)
{
var wl=word.length;
var width=0;
while(wl)
{
wl--;
width+=word[wl].advance;
}
if(!width)width=1;
return width;
}
d._wrapWords=function(lines)
{
var wLines=[];
var w=this._bounds.width;
var h=this._bounds.heigth;
var linesLength=lines.length;
var line=[];
var word=[];
var textWidth=0;
var wordWidth=0;
var l=[];
var lLength=0;
for(var i=0;i<linesLength;i++)
{
textWidth=0;
wordWidth=0;
l=lines[i];
lLength=l.length;
var i1=0;
while(i1<lLength)
{
word=l[i1];
wordWidth=this._getWordWidth(word);
if(textWidth+wordWidth<=w)
{
textWidth+=wordWidth;
line.push(word);
i1++;
}
else
{
wLines.push(line);
var line=[];
if(wordWidth>this._bounds.width)
{
var splittedWord=[];
var newWordWidth=0;
var splitIndex=word.length-1;
var newWordAdvance=0;
while(wordWidth>this._bounds.width)
{
wordWidth-=word[splitIndex].advance;
}
wLines.push([word.splice(0,splitIndex)])
}
textWidth=0;
}
if(i1==lLength)
{
wLines.push(line);
var line=[];
textWidth=0;
}
}
}
return wLines;
}
d._getWords=function(line)
{
var word=null;
var words=[];
for(var i=0;i<line.length;i++)
{
var letter=line[i];
if(!word)
{
word=[];
words.push(word);
}
word.push(letter);
if(letter.letter==" ")
{
word=null;
}
}
return words;
}
d._getLines=function(letters)
{
var lettersLength=letters.length;
var lines=[];
var line=[];
for(var i=0;i<lettersLength;i++)
{
var object=letters[i];
if(object.letter=="\n"||object.letter=="\r")
{
lines.push([line]);
line=[];
}
else
{
line.push(object);
}
}
lines.push([line]);
return lines;
}
d._getFormattedLetters=function(text)
{
var textLength=text.length;
var context=this._context2d;
var formatedLetters=[];
var currentFormat=null;
var currentFormatLength=0;
var format=[];
var mixedformat=null;
var formatLength=0;
var formatsCounter=0;
var newformat=false;
currentFormat=text[0].textformats;
currentFormatLength=currentFormat.length;
format=text[0].textformats;
formatLength=format.length;
mixedformat=this._getMixedFormat(format,formatLength);
formatedLetters.push(mixedformat);
formatedLetters.push(text[0].character);
for(var i=1;i<textLength;i++)
{
newformat=false;
if(currentFormatLength==formatLength)
{
while(currentFormatLength)
{
if(currentFormat[currentFormatLength]!=format[currentFormatLength])
{
newformat=true;
break;
}
currentFormatLength--;
}
}
if(newformat==true)
{
mixedformat=this._getMixedFormat(format,formatLength);
formatedLetters.push(mixedformat);
}
formatedLetters.push(text[i].character);
}
return formatedLetters;
}
d._getMixedFormat=function(format,formatLength)
{
var mixedFormat=new flash.text.TextFormat();
for(var i=0;i<formatLength;i++)
{
if(format[i]._font!=null)mixedFormat._font=format[i]._font;
if(format[i]._definefont!=null)mixedFormat._definefont=format[i]._definefont;
if(format[i]._size!=null)mixedFormat._size=format[i]._size;
if(format[i]._color!=null)mixedFormat._color=format[i]._color;
if(format[i]._bold!=null)mixedFormat._bold=format[i]._bold;
if(format[i]._italic!=null)mixedFormat._italic=format[i]._italic;
if(format[i]._underline!=null)mixedFormat._underline=format[i]._underline;
if(format[i]._url!=null)mixedFormat._url=format[i]._url;
if(format[i]._target!=null)mixedFormat._target=format[i]._target;
if(format[i]._align!=null)mixedFormat._align=format[i]._align;
if(format[i]._leftMargin!=null)mixedFormat._leftMargin=format[i]._leftMargin;
if(format[i]._rightMargin!=null)mixedFormat._rightMargin=format[i]._rightMargin;
if(format[i]._indent!=null)mixedFormat._indent=format[i]._indent;
if(format[i]._leading!=null)mixedFormat._leading=format[i]._leading;
}
return mixedFormat;
}
d.appendText=function(newText)
{
this._text+=newText;
for(var i in newText)
{
this._formatedtext.push({character:newText[i],textformats:[this._defaultTextFormat]});
}
this._updateData(true);
}
d.setTextFormat=function(format,beginIndex,endIndex)
{
if(format)format=format.clone();
this._textColor=format._color;
if(!beginIndex)var beginIndex=-1;
if(!endIndex)var endIndex=-1;
if(this.styleSheet!=null)
{
console.error("This method cannot be used on a text field with a style sheet.");
return;
}
if(beginIndex>this._formatedtext.length||
beginIndex<-1||
endIndex<-1||
endIndex>this._formatedtext.length)
{
console.error("The beginIndex or endIndex specified is out of range.");
return;
}
if(this._formatedtext.length==0)
{
return;
}
if(beginIndex==-1)
{
beginIndex=0;
endIndex=this._formatedtext.length;
}
if(endIndex==-1)
{
endIndex=beginIndex+1;
}
for(var i=beginIndex;i<endIndex;i++)
{
this._formatedtext[i].textformats.push(format);
}
this._updateData(true);
}
d.copyRichText=function()
{
return null;
};
d.getCharBoundaries=function(charIndex)
{
return null;
};
d.getCharIndexAtPoint=function(x,y)
{
return-1;
};
d.getFirstCharInParagraph=function(charIndex)
{
};
d.getImageReference=function(id)
{
};
d.getLineIndexAtPoint=function(x,y)
{
};
d.getLineIndexOfChar=function(charIndex)
{
};
d.getLineLength=function(lineIndex)
{
};
d.getLineMetrics=function(lineIndex)
{
};
d.getLineOffset=function(lineIndex)
{
};
d.getLineText=function(lineIndex)
{
};
d.getParagraphLength=function(charIndex)
{
};
d.getRawText=function()
{
};
d.getTextFormat=function(beginIndex,endIndex)
{
return this._defaultTextFormat;
};
d.getTextRuns=function(beginIndex,endIndex)
{
};
d.getXMLText=function(beginIndex,endIndex)
{
};
d.insertXMLText=function(beginIndex,endIndex,richText,pasting)
{
};
d.pasteRichText=function(richText)
{
return true;
};
d.replaceSelectedText=function(value)
{
};
d.replaceText=function(beginIndex,endIndex,newText)
{
};
d.setSelection=function(beginIndex,endIndex)
{
this._selectionBeginIndex=beginIndex;
this._selectionEndIndex=endIndex;
};
var s={};
s.__init__=function()
{
this.prototype.InteractiveObject_constructor=this.__base__;
this.richTextFields=["font","size","color","bold","italic","underline","url","target","align","leftMargin","rightMargin","indent","leading","blockIndent","kerning","letterSpacing","display"];
this._oldInputs=[];
this._inputs=[];
};
s.__addInput__=function(input)
{
if(this._inputs.indexOf(input)==-1)
{
this._inputs.push(input);
}
}
s.__clear__=function()
{
this._oldInputs.length=0;
if(this._inputs.length)
{
while(this._inputs.length)
{
this._oldInputs.push(this._inputs.pop());
}
}
}
s.__update__=function()
{
var i;
var input;
for(i in this._oldInputs)
{
input=this._oldInputs[i];
if(this._inputs.indexOf(input)==-1&&input.parentNode)
{
document.body.removeChild(input);
}
}
for(i in this._inputs)
{
input=this._inputs[i];
if(!input.parentNode)
{
document.body.appendChild(input);
}
}
}
s.__blur__=function()
{
var i;
var input;
for(i in this._oldInputs)
{
input=this._oldInputs[i];
input.blur();
}
for(i in this._inputs)
{
input=this._inputs[i];
input.blur();
}
}
flash.addDescription("flash.text.TextField",d,"flash.display.InteractiveObject",s,null);
}
());;
(function()
{
"use strict";
var s={};
s.__init__=function()
{
this.DARK_COLOR="dark";
this.LIGHT_COLOR="light";
};
flash.addDescription("flash.text.TextColorType",null,null,s,null);
}
());;
(function()
{
"use strict";
var s={};
s.__init__=function()
{
this.NONE="none";
this.PIXEL="pixel";
this.SUBPIXEL="subpixel";
};
flash.addDescription("flash.text.GridFitType",null,null,s,null);
}
());;
(function()
{
"use strict";
var d={};
d.ascent=0;
d.descent=0;
d.height=0;
d.leading=0;
d.width=0;
d.x=0;
d.TextLineMetrics=function(x,width,height,ascent,descent,leading)
{
this.x=x;
this.width=width;
this.height=height;
this.ascent=ascent;
this.descent=descent;
this.leading=leading;
return;
};
flash.addDescription("flash.text.TextLineMetrics",d,null,null,null);
}
());;
(function()
{
"use strict";
var d={};
d.beginIndex=0;
d.endIndex=0;
d.textFormat=null;
d.TextRun=function(beginIndex,endIndex,textFormat)
{
beginIndex=Math.floor(beginIndex);
endIndex=Math.floor(endIndex);
this.beginIndex=beginIndex;
this.endIndex=endIndex;
this.textFormat=textFormat;
return;
};
flash.addDescription("flash.text.TextRun",d,null,null,null);
}
());;
(function()
{
"use strict";
var d={};
d._virtualcanvas=null;
d._context2d=null;
d._data=null;
d._testChars="";
d._fontName="";
d._timer=null;
d.CSSFontLoader=function(font)
{
this.EventDispatcher_constructor();
this._testChars="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
;
var name=font._fontName;
var data=[];
data.push('\t@font-face {');
data.push('\t\tfont-family:"'+name+'";');
data.push('\t\tsrc: url("fonts/'+name+'.eot");');
data.push('\t\tsrc: url("fonts/'+name+'.eot?#iefix") format("embedded-opentype"),');
data.push('\t\turl("fonts/'+name+'.ttf") format("truetype"),');
data.push('\t\turl("fonts/'+name+'.svg#'+name+'") format("svg");');
data.push('\t\tfont-weight: normal;');
data.push('\t\tfont-style: normal;');
data.push('\t}');
var css=data.join("\n");
var head=document.getElementsByTagName('head')[0];
var s=document.createElement('style');
s.setAttribute('type','text/css');
if(s.styleSheet)
{
s.styleSheet.cssText=css.toString();
}
else
{
s.appendChild(document.createTextNode(css));
}
head.appendChild(s);
this._fontName=font._fontName;
flash.trace("load font start: "+this._fontName);
this.loadFont(font._fontName);
}
d.loadFont=function(name)
{
if(this._virtualcanvas==null)
{
this._virtualcanvas=document.createElement('canvas');
this._virtualcanvas.width=32;
this._virtualcanvas.heigth=32;
this._context2d=this._virtualcanvas.getContext('2d');
this._context2d.textBaseline="top";
this._context2d.textAlign="left";
this._timer=new flash.utils.Timer(100);
this._timer.addEventListener("timer",flash.bindFunction(this,this._checkFont));
}
this._fontName=name;
var context=this._context2d;
context.clearRect(0,0,32,32);
context.font="20px";
context.textBaseline="top";
context.fillText(this._testChars,0,0);
this._data=context.getImageData(0,0,32,32);
this._timer.start();
}
d._checkFont=function()
{
var context=this._context2d;
context.clearRect(0,0,32,32);
context.font="20px "+this._fontName;
context.textBaseline="top";
context.fillText(this._testChars,0,0);
var current=context.getImageData(0,0,32,32);
var currentData=current.data;
var testData=this._data.data;
var i=currentData.length;
while(currentData)
{
if(currentData[i]!=testData[i])
{
flash.trace(currentData[i],testData[i],i);
this.dispatchEvent(new flash.events.Event(flash.events.Event.COMPLETE,false,false));
this._timer.removeEventListener("timer",flash.bindFunction(this,this._checkFont));
this._timer.stop();
flash.trace("load font complete: "+this._fontName)
break;
}
i--;
}
}
var s={};
s.__init__=function()
{
this.prototype.EventDispatcher_constructor=this.__base__;
};
flash.addDescription("flash.text.CSSFontLoader",d,"flash.events.EventDispatcher",s,null);
}
());;
(function()
{
"use strict";
var d={};
d._align=null;
d._blockIndent=null;
d._bold=null;
d._bullet=null;
d._color=null;
d._display=null;
d._font=null;
d._indent=null;
d._italic=null;
d._kerning=null;
d._leading=null;
d._leftMargin=null;
d._letterSpacing=null;
d._rightMargin=null;
d._size=null;
d._tabStops=null;
d._target=null;
d._underline=null;
d._url=null;
d._definefont=null;
d.get_align=function()
{
return this._align;
};
d.set_align=function(value)
{
this._align=value;
return value;
};
d.get_blockIndent=function()
{
return this._blockIndent;
};
d.set_blockIndent=function(value)
{
this._blockIndent=value;
return value;
};
d.get_bold=function()
{
return this._bold;
};
d.set_bold=function(value)
{
this._bold=value;
return value;
};
d.get_bullet=function()
{
return this._bullet;
};
d.set_bullet=function(value)
{
this._bullet=value;
return value;
};
d.get_color=function()
{
return this._color;
};
d.set_color=function(value)
{
this._color=value;
return value;
};
d.get_display=function()
{
return this._display;
};
d.set_display=function(value)
{
this._display=value;
return value;
};
d.get_font=function()
{
return this._font;
};
d.set_font=function(value)
{
if(flash.text.TextFormat._embedFonts[value])
{
value=flash.text.TextFormat._embedFonts[value];
}
this._font=value;
return value;
};
d.get_indent=function()
{
return this._indent;
};
d.set_indent=function(value)
{
this._indent=value;
return value;
};
d.get_italic=function()
{
return this._italic;
};
d.set_italic=function(value)
{
this._italic=value;
return value;
};
d.get_kerning=function()
{
return this._kerning;
};
d.set_kerning=function(value)
{
this._kerning=value;
return value;
};
d.get_leading=function()
{
return this._leading;
};
d.set_leading=function(value)
{
this._leading=value;
return value;
};
d.get_leftMargin=function()
{
return this._leftMargin;
};
d.set_leftMargin=function(value)
{
this._leftMargin=value;
return value;
};
d.get_letterSpacing=function()
{
return this._letterSpacing;
};
d.set_letterSpacing=function(value)
{
this._letterSpacing=value;
return value;
};
d.get_rightMargin=function()
{
return this._rightMargin;
};
d.set_rightMargin=function(value)
{
this._rightMargin=value;
return value;
};
d.get_size=function()
{
return this._size;
};
d.set_size=function(value)
{
this._size=Number(value);
return value;
};
d.get_tabStops=function()
{
return this._tabStops;
};
d.set_tabStops=function(value)
{
this._tabStops=value;
return value;
};
d.get_target=function()
{
return this._target;
};
d.set_target=function(value)
{
this._target=value;
return value;
};
d.get_underline=function()
{
return this._underline;
};
d.set_underline=function(value)
{
this._underline=value;
return value;
};
d.get_url=function()
{
return this._url;
};
d.set_url=function(value)
{
this._url=value;
return value;
};
d.TextFormat=function(font,size,color,bold,italic,underline,url,target,align,leftMargin,rightMargin,indent,leading)
{
if(font==undefined)font=null;
if(size==undefined)size=null;
if(color==undefined)color=null;
if(bold==undefined)bold=null;
if(italic==undefined)italic=null;
if(underline==undefined)underline=null;
if(url==undefined)url=null;
if(target==undefined)target=null;
if(align==undefined)align=null;
if(leftMargin==undefined)leftMargin=null;
if(rightMargin==undefined)rightMargin=null;
if(indent==undefined)indent=null;
if(leading==undefined)leading=null;
if(font!=null)
{
this.set_font(font);
}
if(size!=null)
{
this.set_size(size);
}
if(color!=null)
{
this.set_color(color);
}
if(bold!=null)
{
this.set_bold(bold);
}
if(italic!=null)
{
this.set_italic(italic);
}
if(underline!=null)
{
this.set_underline(underline);
}
if(url!=null)
{
this.set_url(url);
}
if(target!=null)
{
this.set_target(target);
}
if(align!=null)
{
this.set_align(align);
}
if(leftMargin!=null)
{
this.set_leftMargin(leftMargin);
}
if(rightMargin!=null)
{
this.set_rightMargin(rightMargin);
}
if(indent!=null)
{
this.set_indent(indent);
}
if(leading!=null)
{
this.set_leading(leading);
}
};
d.clone=function()
{
return new flash.text.TextFormat(this._font,
this._size,
this._color,
this._bold,
this._italic,
this._underline,
this._url,
this._target,
this._align,
this._leftMargin,
this._rightMargin,
this._indent,
this._leading);
}
d.toString=function()
{
return"[object TextFormat(font: "+this._font+", size: "+this._size+", color: "+this._color+")]";
};
var s={};
s._formatFont=function(name,size)
{
var font="";
if(name.indexOf(" Bold")!=-1)
{
name=name.replace(" Bold","");
font+="bold ";
}
if(name.indexOf(" Italic")!=-1)
{
name=name.replace(" Italic","");
font+="italic ";
}
font+=size+"px "+name;
return font;
}
s.__init__=function()
{
this._embedFonts={};
};
flash.addDescription("flash.text.TextFormat",d,null,s,null);
}
());;
(function()
{
"use strict";
var d={};
d._textRecords=null;
d._bitmapData=null;
d._textureRect=null;
d._bounds=null;
d._matrix=null;
d._checkTouch_point=null;
d._canvasUpdated=false;
d._render_=function(render)
{
this.__updateTransform__();
this._updateCanvas();
render.drawBitmapData(
this._bitmapData,
this._textureRect,
this._bounds,
this._transform._concatenatedMatrix,
this._transform._concatenatedColorTransform,
this._blendMode,
this._concatenatedFilters
);
};
d.get_text=function()
{
var text="";
if(this._textRecords)
{
for(var i in this._textRecords)
{
text+=this._textRecords[i].text;
}
}
return text;
};
d._updateCanvas=function()
{
if(this._checkScaleCorrection())
{
this._canvasUpdated=false;
}
if(this._canvasUpdated)return;
this._canvasUpdated=true;
var textureWidth=flash.getTextureSize(this._bounds.width*this._scaleCorrection);
var textureHeight=flash.getTextureSize(this._bounds.height*this._scaleCorrection);
if(this._bitmapData&&this._bitmapData.width==textureWidth&&this._bitmapData.height==textureHeight)
{
this._bitmapData.fillRect(0,0,this._bitmapData.width,this._bitmapData.height,0);
}
else
{
this._bitmapData=new flash.display.BitmapData(textureWidth,textureHeight,true,0);
}
this._textureRect=this._bounds.clone();
this._textureRect.x=this._textureRect.y=0;
this._textureRect.width=this._bounds.width*this._scaleCorrection;
this._textureRect.height=this._bounds.height*this._scaleCorrection;
var context=this._bitmapData._context2d;
if(this._matrix)
{
var m=this._matrix;
context.setTransform(
m.a*this._scaleCorrection,
m.b,
m.c,
m.d*this._scaleCorrection,
m.tx*this._scaleCorrection,
m.ty*this._scaleCorrection
);
}
else
{
context.setTransform(
this._scaleCorrection,
0,
0,
this._scaleCorrection,
0,
0
);
}
var fontName="";
var color=0;
var fontSize=0;
var x=0;
var y=0;
var xShift=this._bounds.x;
var yShift=this._bounds.y;
for(var i=0;i<this._textRecords.length;i++)
{
var record=this._textRecords[i];
var text=record.text.split("");
var glyphEntrys=record.glyphEntrys;
if(record.fontSize!=undefined)
{
fontSize=Number(record.fontSize);
}
if(record.fontName!=undefined)
{
fontName=record.fontName;
}
if(record.color!=undefined)
{
color=Number(record.color);
}
context.font=flash.text.TextFormat._formatFont(fontName,fontSize);
context.fillStyle=flash.numberToHex(color);
if(record.x!=undefined)
{
x=Number(record.x);
}
else
{
if(record.y!=undefined)
{
x=0;
}
}
if(record.y!=undefined)
{
y=Number(record.y);
}
else
{
if(record.x!=undefined)
{
x=0;
y=record.x;
}
}
for(var j=0;j<text.length;j++)
{
context.fillText(
text[j],
x-xShift,
y-yShift
);
x+=glyphEntrys[j];
}
}
};
d._checkInteractiveEvent=function(data)
{
if(!this._checkTouch_point)
{
this._checkTouch_point=new flash.geom.Point();
}
this._checkTouch_point.x=data.localX;
this._checkTouch_point.y=data.localY;
this._checkTouch_point=this.globalToLocal(this._checkTouch_point);
if(this._bounds.containsPoint(this._checkTouch_point))
{
return this._checkTouch_point;
}
else
{
return null;
}
};
d.StaticText=function()
{
this.DisplayObject_constructor();
};
var s={};
s.__init__=function()
{
this.prototype.DisplayObject_constructor=this.__base__;
};
flash.addDescription("flash.text.StaticText",d,"flash.display.DisplayObject",s,null);
}
());;
(function()
{
"use strict";
var s={};
s.__init__=function()
{
this.DEVICE="device";
this.EMBEDDED="embedded";
};
flash.addDescription("flash.text.FontType",null,null,s,null);
}
());;
(function()
{
"use strict";
var s={};
s.__init__=function()
{
this.BOLD="bold";
this.BOLD_ITALIC="boldItalic";
this.ITALIC="italic";
this.REGULAR="regular";
};
flash.addDescription("flash.text.FontStyle",null,null,s,null);
}
());;
(function()
{
"use strict";
var d={};
d.fontSize=0;
d.insideCutoff=0;
d.outsideCutoff=0;
d.CSMSettings=function(fontSize,insideCutoff,outsideCutoff)
{
this.fontSize=fontSize;
this.insideCutoff=insideCutoff;
this.outsideCutoff=outsideCutoff;
};
flash.addDescription("flash.text.CSMSettings",d,null,null,null);
}
());;
(function()
{
"use strict";
var d={};
d.TextRenderer=function()
{
return;
};
var s={};
s.get_antiAliasType=function()
{
};
s.set_antiAliasType=function(value)
{
};
s.get_displayMode=function()
{
};
s.set_displayMode=function(value)
{
};
s.get_maxLevel=function()
{
};
s.set_maxLevel=function(value)
{
};
s.setAdvancedAntiAliasingTable=function(fontName,fontStyle,colorType,advancedAntiAliasingTable)
{
};
flash.addDescription("flash.text.TextRenderer",d,null,s,null);
}
());;
(function()
{
"use strict";
var d={};
d.ExternalInterface=function()
{
return;
};
var s={};
s.__init__=function()
{
this.marshallExceptions=false;
};
s.get_activeX=function()
{
};
s.get_available=function()
{
};
s.get_objectID=function()
{
};
s.addCallback=function(functionName,closure)
{
};
s.call=function(functionName)
{
var args=Array.prototype.slice.call(arguments,1);
if(window[functionName])
{
window[functionName].apply(null,args);
}
};
flash.addDescription("flash.external.ExternalInterface",d,null,s,null);
}
());;
(function()
{
"use strict";
var d={};
d.MemoryError=function(message,id)
{
if(message==undefined)message="";
if(id==undefined)id=0;
id=Math.floor(id);
this.Error_constructor(message,id);
};
var s={};
s.__init__=function()
{
this.prototype.Error_constructor=this.__base__;
};
flash.addDescription("flash.errors.MemoryError",d,"Error",s,null);
}
());;
(function()
{
"use strict";
var d={};
d.EOFError=function(message,id)
{
if(message==undefined)message="";
if(id==undefined)id=0;
id=Math.floor(id);
this.IOError_constructor(message,id);
};
var s={};
s.__init__=function()
{
this.prototype.IOError_constructor=this.__base__;
};
flash.addDescription("flash.errors.EOFError",d,"flash.errors.IOError",s,null);
}
());;
(function()
{
"use strict";
var d={};
d.IOError=function(message,id)
{
if(message==undefined)message="";
if(id==undefined)id=0;
id=Math.floor(id);
this.Error_constructor(message,id);
};
var s={};
s.__init__=function()
{
this.prototype.Error_constructor=this.__base__;
};
flash.addDescription("flash.errors.IOError",d,"Error",s,null);
}
());;
(function()
{
"use strict";
var d={};
d.InvalidSWFError=function(message,id)
{
if(message==undefined)message="";
if(id==undefined)id=0;
id=Math.floor(id);
this.Error_constructor(message,id);
};
var s={};
s.__init__=function()
{
this.prototype.Error_constructor=this.__base__;
};
flash.addDescription("flash.errors.InvalidSWFError",d,"Error",s,null);
}
());;
(function()
{
"use strict";
var d={};
d.StackOverflowError=function(message,id)
{
if(message==undefined)message="";
if(id==undefined)id=0;
id=Math.floor(id);
this.Error_constructor(message,id);
};
var s={};
s.__init__=function()
{
this.prototype.Error_constructor=this.__base__;
};
flash.addDescription("flash.errors.StackOverflowError",d,"Error",s,null);
}
());;
(function()
{
"use strict";
var d={};
d.ScriptTimeoutError=function(message,id)
{
if(message==undefined)message="";
if(id==undefined)id=0;
id=Math.floor(id);
this.Error_constructor(message,id);
};
var s={};
s.__init__=function()
{
this.prototype.Error_constructor=this.__base__;
};
flash.addDescription("flash.errors.ScriptTimeoutError",d,"Error",s,null);
}
());;
(function()
{
"use strict";
var d={};
d.IllegalOperationError=function(message,id)
{
if(message==undefined)message="";
if(id==undefined)id=0;
id=Math.floor(id);
this.Error_constructor(message,id);
};
var s={};
s.__init__=function()
{
this.prototype.Error_constructor=this.__base__;
};
flash.addDescription("flash.errors.IllegalOperationError",d,"Error",s,null);
}
());;
(function()
{
"use strict";
var d={};
d.m_contextMenuOwner=null;
d.m_mouseTarget=null;
d.get_contextMenuOwner=function()
{
return this.m_contextMenuOwner;
};
d.set_contextMenuOwner=function(value)
{
this.m_contextMenuOwner=value;
return;
};
d.get_mouseTarget=function()
{
return this.m_mouseTarget;
};
d.set_mouseTarget=function(value)
{
this.m_mouseTarget=value;
return;
};
d.ContextMenuEvent=function(type,bubbles,cancelable,mouseTarget,contextMenuOwner)
{
if(bubbles==undefined)bubbles=false;
if(cancelable==undefined)cancelable=false;
if(mouseTarget==undefined)mouseTarget=null;
if(contextMenuOwner==undefined)contextMenuOwner=null;
this.Event_constructor(type,bubbles,cancelable);
this.m_mouseTarget=mouseTarget;
this.m_contextMenuOwner=contextMenuOwner;
return;
};
d.clone=function()
{
return new flash.events.ContextMenuEvent(this.get_type(),this.get_bubbles(),this.get_cancelable(),this.m_mouseTarget,this.m_contextMenuOwner);
};
d.toString=function()
{
return this.formatToString("ContextMenuEvent","type","bubbles","cancelable","eventPhase","mouseTarget","contextMenuOwner");
};
var s={};
s.__init__=function()
{
this.prototype.Event_constructor=this.__base__;
this.MENU_ITEM_SELECT="menuItemSelect";
this.MENU_SELECT="menuSelect";
};
flash.addDescription("flash.events.ContextMenuEvent",d,"flash.events.Event",s,null);
}
());;
(function()
{
"use strict";
var d={};
d.ErrorEvent=function(type,bubbles,cancelable,text)
{
if(bubbles==undefined)bubbles=false;
if(cancelable==undefined)cancelable=false;
if(text==undefined)text="";
this.TextEvent_constructor(type,bubbles,cancelable,text);
return;
};
d.clone=function()
{
return new flash.events.ErrorEvent(this.get_type(),this.get_bubbles(),this.get_cancelable(),this.get_text());
};
d.toString=function()
{
return this.formatToString("ErrorEvent","type","bubbles","cancelable","eventPhase","text");
};
var s={};
s.__init__=function()
{
this.prototype.TextEvent_constructor=this.__base__;
this.ERROR="error";
};
flash.addDescription("flash.events.ErrorEvent",d,"flash.events.TextEvent",s,null);
}
());;
(function()
{
"use strict";
var d={};
d._target=null;
d._type=null;
d._bubbles=false;
d._cancelable=false;
d.get_bubbles=function()
{
return this._bubbles;
};
d.get_cancelable=function()
{
return this._cancelable;
};
d.get_currentTarget=function()
{
return this._target;
};
d.get_eventPhase=function()
{
return 0;
};
d.get_target=function()
{
return this._target;
};
d.get_type=function()
{
return this._type;
};
d.Event=function(type,bubbles,cancelable)
{
if(bubbles==undefined)bubbles=false;
if(cancelable==undefined)cancelable=false;
this._type=type;
this._bubbles=bubbles;
this._cancelable=cancelable;
};
d.clone=function()
{
return new flash.events.Event(this.get_type(),this.get_bubbles(),this.get_cancelable());
};
d.formatToString=function(className)
{
var args=Array.prototype.slice.call(arguments,1);
var data="";
data+="object "+className+"(";
for(var t0 in args)
{
var argument=args[t0];
data+=" "+argument+": "+this.getProperty(argument)+",";
}
data=data.substring(0,data.length-1)+" ";
data+=")";
return data;
};
d.isDefaultPrevented=function()
{
return false;
};
d.preventDefault=function()
{
};
d.stopImmediatePropagation=function()
{
};
d.stopPropagation=function()
{
};
d.toString=function()
{
return this.formatToString("Event","type","bubbles","cancelable","eventPhase");
};
var s={};
s.__init__=function()
{
this.ACTIVATE="activate";
this.ADDED="added";
this.ADDED_TO_STAGE="addedToStage";
this.CANCEL="cancel";
this.CHANGE="change";
this.CHANNEL_MESSAGE="channelMessage";
this.CHANNEL_STATE="channelState";
this.CLEAR="clear";
this.CLOSE="close";
this.COMPLETE="complete";
this.CONNECT="connect";
this.CONTEXT3D_CREATE="context3DCreate";
this.COPY="copy";
this.CUT="cut";
this.DEACTIVATE="deactivate";
this.ENTER_FRAME="enterFrame";
this.EXIT_FRAME="exitFrame";
this.FRAME_CONSTRUCTED="frameConstructed";
this.FRAME_LABEL="frameLabel";
this.FULLSCREEN="fullScreen";
this.ID3="id3";
this.INIT="init";
this.MOUSE_LEAVE="mouseLeave";
this.OPEN="open";
this.PASTE="paste";
this.REMOVED="removed";
this.REMOVED_FROM_STAGE="removedFromStage";
this.RENDER="render";
this.RESIZE="resize";
this.SCROLL="scroll";
this.SELECT="select";
this.SELECT_ALL="selectAll";
this.SOUND_COMPLETE="soundComplete";
this.SUSPEND="suspend";
this.TAB_CHILDREN_CHANGE="tabChildrenChange";
this.TAB_ENABLED_CHANGE="tabEnabledChange";
this.TAB_INDEX_CHANGE="tabIndexChange";
this.TEXTURE_READY="textureReady";
this.TEXT_INTERACTION_MODE_CHANGE="textInteractionModeChange";
this.UNLOAD="unload";
this.VIDEO_FRAME="videoFrame";
this.WORKER_STATE="workerState";
};
flash.addDescription("flash.events.Event",d,null,s,null);
}
());;
(function()
{
"use strict";
var d={};
d.m_status=0;
d.get_status=function()
{
return this.m_status;
};
d.HTTPStatusEvent=function(type,bubbles,cancelable,status)
{
if(bubbles==undefined)bubbles=false;
if(cancelable==undefined)cancelable=false;
if(status==undefined)status=0;
status=Math.floor(status);
this.Event_constructor(type,bubbles,cancelable);
this.m_status=status;
return;
};
d.clone=function()
{
return new flash.events.HTTPStatusEvent(this.get_type(),this.get_bubbles(),this.get_cancelable(),this.get_status());
};
d.toString=function()
{
return this.formatToString("HTTPStatusEvent","type","bubbles","cancelable","eventPhase","status");
};
var s={};
s.__init__=function()
{
this.prototype.Event_constructor=this.__base__;
this.HTTP_STATUS="httpStatus";
};
flash.addDescription("flash.events.HTTPStatusEvent",d,"flash.events.Event",s,null);
}
());;
(function()
{
"use strict";
var d={};
d.m_altKey=false;
d.m_charCode=0;
d.m_ctrlKey=false;
d.m_keyCode=0;
d.m_keyLocation=0;
d.m_shiftKey=false;
d.get_altKey=function()
{
return this.m_altKey;
};
d.set_altKey=function(value)
{
this.m_altKey=value;
return;
};
d.get_charCode=function()
{
return this.m_charCode;
};
d.set_charCode=function(value)
{
value=Math.floor(value);
this.m_charCode=value;
return;
};
d.get_ctrlKey=function()
{
return this.m_ctrlKey;
};
d.set_ctrlKey=function(value)
{
this.m_ctrlKey=value;
return;
};
d.get_keyCode=function()
{
return this.m_keyCode;
};
d.set_keyCode=function(value)
{
value=Math.floor(value);
this.m_keyCode=value;
return;
};
d.get_keyLocation=function()
{
return this.m_keyLocation;
};
d.set_keyLocation=function(value)
{
value=Math.floor(value);
this.m_keyLocation=value;
return;
};
d.get_shiftKey=function()
{
return this.m_shiftKey;
};
d.set_shiftKey=function(value)
{
this.m_shiftKey=value;
return;
};
d.KeyboardEvent=function(type,bubbles,cancelable,charCode,keyCode,keyLocation,ctrlKey,altKey,shiftKey)
{
if(bubbles==undefined)bubbles=true;
if(cancelable==undefined)cancelable=false;
if(charCode==undefined)charCode=0;
charCode=Math.floor(charCode);
if(keyCode==undefined)keyCode=0;
keyCode=Math.floor(keyCode);
if(keyLocation==undefined)keyLocation=0;
keyLocation=Math.floor(keyLocation);
if(ctrlKey==undefined)ctrlKey=false;
if(altKey==undefined)altKey=false;
if(shiftKey==undefined)shiftKey=false;
this.Event_constructor(type,bubbles,cancelable);
this.m_charCode=charCode;
this.m_keyCode=keyCode;
this.m_keyLocation=keyLocation;
this.m_ctrlKey=ctrlKey;
this.m_altKey=altKey;
this.m_shiftKey=shiftKey;
return;
};
d.clone=function()
{
return new flash.events.KeyboardEvent(this.get_type(),this.get_bubbles(),this.get_cancelable(),this.m_charCode,this.m_keyCode,this.m_keyLocation,this.m_ctrlKey,this.m_altKey,this.m_shiftKey);
};
d.toString=function()
{
return this.formatToString("KeyboardEvent","type","bubbles","cancelable","eventPhase","charCode","keyCode","keyLocation","ctrlKey","altKey","shiftKey");
};
d.updateAfterEvent=function()
{
};
var s={};
s.__init__=function()
{
this.prototype.Event_constructor=this.__base__;
this.KEY_DOWN="keyDown";
this.KEY_UP="keyUp";
};
flash.addDescription("flash.events.KeyboardEvent",d,"flash.events.Event",s,null);
}
());;
(function()
{
"use strict";
var d={};
d._target=null,
d._listeners=null;
d.EventDispatcher=function(target)
{
if(target==undefined)target=null;
this._target=target;
this._listeners=[];
};
d.addEventListener=function(type,listener,useCapture,priority,useWeakReference)
{
if(!type)
{
throw new Error("Error: 'type' must not be 'null'");
}
if(!listener)
{
throw new Error("Error: 'listener' must not be 'null'");
}
if(useCapture==undefined)useCapture=false;
if(priority==undefined)priority=0;
priority=Math.floor(priority);
if(useWeakReference==undefined)useWeakReference=false;
this._listeners.push({
type:type,
listener:listener,
useCapture:useCapture,
priority:priority,
useWeakReference:useWeakReference
});
};
d.dispatchEvent=function(event)
{
if(event.get_target())
{
return this._dispatchEventFunction(event.clone());
}
else
{
return this._dispatchEventFunction(event);
}
};
d._dispatchEventFunction=function(event)
{
var complete=false;
var eventType=event.get_type();
for(var i in this._listeners)
{
var object=this._listeners[i];
if(object.type==eventType)
{
event._target=this;
object.listener(event);
complete=true;
}
}
return complete;
};
d.hasEventListener=function(type)
{
for(var i in this._listeners)
{
var object=this._listeners[i];
if(object.type==type)
{
return true;
}
}
return false;
};
d.removeEventListener=function(type,listener,useCapture)
{
if(useCapture==undefined)useCapture=false;
for(var i in this._listeners)
{
var object=this._listeners[i];
if(object.type==type&&
flash.equalsFunction(object.listener,listener)&&
object.useCapture==useCapture)
{
this._listeners.splice(i,1);
return;
}
}
};
d.willTrigger=function(type)
{
return false;
};
flash.addDescription("flash.events.EventDispatcher",d,null,null,["flash.events.IEventDispatcher"]);
}
());;
(function()
{
"use strict";
var d={};
d.IEventDispatcher=function()
{
};
d.addEventListener=function(type,listener,useCapture,priority,useWeakReference)
{
};
d.dispatchEvent=function(event)
{
};
d.hasEventListener=function(type)
{
};
d.removeEventListener=function(type,listener,useCapture)
{
};
d.willTrigger=function(type)
{
};
flash.addDescription("flash.events.IEventDispatcher",d,null,null,null);
}
());;
(function()
{
"use strict";
var d={};
d.m_fullScreen=false;
d.get_fullScreen=function()
{
return this.m_fullScreen;
};
d.FullScreenEvent=function(type,bubbles,cancelable,fullScreen)
{
if(bubbles==undefined)bubbles=false;
if(cancelable==undefined)cancelable=false;
if(fullScreen==undefined)fullScreen=false;
this.ActivityEvent_constructor(type,bubbles,cancelable);
this.m_fullScreen=fullScreen;
return;
};
d.clone=function()
{
return new flash.events.FullScreenEvent(this.get_type(),this.get_bubbles(),this.get_cancelable(),this.get_fullScreen());
};
d.toString=function()
{
return this.formatToString("FullScreenEvent","type","bubbles","cancelable","eventPhase","fullScreen");
};
var s={};
s.__init__=function()
{
this.prototype.ActivityEvent_constructor=this.__base__;
this.FULL_SCREEN="fullScreen";
};
flash.addDescription("flash.events.FullScreenEvent",d,"flash.events.ActivityEvent",s,null);
}
());;
(function()
{
"use strict";
var s={};
s.__init__=function()
{
this.AT_TARGET=2;
this.BUBBLING_PHASE=3;
this.CAPTURING_PHASE=1;
};
flash.addDescription("flash.events.EventPhase",null,null,s,null);
}
());;
(function()
{
"use strict";
var d={};
d.m_text=null;
d.get_text=function()
{
return this.m_text;
};
d.set_text=function(value)
{
this.m_text=value;
return;
};
d.TextEvent=function(type,bubbles,cancelable,text)
{
if(bubbles==undefined)bubbles=false;
if(cancelable==undefined)cancelable=false;
if(text==undefined)text="";
this.Event_constructor(type,bubbles,cancelable);
this.m_text=text;
return;
};
d.clone=function()
{
return new flash.events.TextEvent(this.get_type(),this.get_bubbles(),this.get_cancelable(),this.m_text);
};
d.toString=function()
{
return this.formatToString("TextEvent","type","bubbles","cancelable","eventPhase","text");
};
var s={};
s.__init__=function()
{
this.prototype.Event_constructor=this.__base__;
this.LINK="link";
this.TEXT_INPUT="textInput";
};
flash.addDescription("flash.events.TextEvent",d,"flash.events.Event",s,null);
}
());;
(function()
{
"use strict";
var d={};
d.m_altKey=false;
d.m_ctrlKey=false;
d.m_isPrimaryTouchPoint=false;
d.m_isRelatedObjectInaccessible=false;
d.m_pressure=0;
d.m_relatedObject=null;
d.m_shiftKey=false;
d.m_sizeX=0;
d.m_sizeY=0;
d.m_touchPointID=0;
d.get_altKey=function()
{
return this.m_altKey;
};
d.set_altKey=function(param1)
{
this.m_altKey=param1;
return;
};
d.get_ctrlKey=function()
{
return this.m_ctrlKey;
};
d.set_ctrlKey=function(param1)
{
this.m_ctrlKey=param1;
return;
};
d.get_isPrimaryTouchPoint=function()
{
return this.m_isPrimaryTouchPoint;
};
d.set_isPrimaryTouchPoint=function(param1)
{
this.m_isPrimaryTouchPoint=param1;
return;
};
d.get_isRelatedObjectInaccessible=function()
{
return this.m_isRelatedObjectInaccessible;
};
d.set_isRelatedObjectInaccessible=function(param1)
{
this.m_isRelatedObjectInaccessible=param1;
return;
};
d.get_localX=function()
{
};
d.set_localX=function(param1)
{
};
d.get_localY=function()
{
};
d.set_localY=function(param1)
{
};
d.get_pressure=function()
{
return this.m_pressure;
};
d.set_pressure=function(param1)
{
this.m_pressure=param1;
return;
};
d.get_relatedObject=function()
{
return this.m_relatedObject;
};
d.set_relatedObject=function(param1)
{
this.m_relatedObject=param1;
return;
};
d.get_target=function()
{
return this.get_relatedObject()?this.get_relatedObject():this.get_target();
};
d.get_shiftKey=function()
{
return this.m_shiftKey;
};
d.set_shiftKey=function(param1)
{
this.m_shiftKey=param1;
return;
};
d.get_sizeX=function()
{
return this.m_sizeX;
};
d.set_sizeX=function(param1)
{
this.m_sizeX=param1;
return;
};
d.get_sizeY=function()
{
return this.m_sizeY;
};
d.set_sizeY=function(param1)
{
this.m_sizeY=param1;
return;
};
d.get_stageX=function()
{
if(!isNaN(this.get_localX()))
{
isNaN(this.get_localX());
}
if(isNaN(this.get_localY()))
{
return Number.NaN;
}
return this.getStageX();
};
d.get_stageY=function()
{
if(!isNaN(this.get_localX()))
{
isNaN(this.get_localX());
}
if(isNaN(this.get_localY()))
{
return Number.NaN;
}
return this.getStageY();
};
d.get_touchPointID=function()
{
return this.m_touchPointID;
};
d.set_touchPointID=function(param1)
{
param1=Math.floor(param1);
this.m_touchPointID=param1;
return;
};
d.TouchEvent=function(param1,param2,param3,param4,param5,param6,param7,param8,param9,param10,param11,param12,param13,param14)
{
if(param2==undefined)param2=true;
if(param3==undefined)param3=false;
if(param4==undefined)param4=0;
param4=Math.floor(param4);
if(param5==undefined)param5=false;
if(param6==undefined)param6=NaN;
if(param7==undefined)param7=NaN;
if(param8==undefined)param8=NaN;
if(param9==undefined)param9=NaN;
if(param10==undefined)param10=NaN;
if(param11==undefined)param11=null;
if(param12==undefined)param12=false;
if(param13==undefined)param13=false;
if(param14==undefined)param14=false;
this.Event_constructor(param1,param2,param3);
this.m_touchPointID=param4;
this.m_isPrimaryTouchPoint=param5;
this.set_localX(param6);
this.set_localY(param7);
this.m_sizeX=param8;
this.m_sizeY=param9;
this.m_pressure=param10;
this.m_relatedObject=param11;
this.m_ctrlKey=param12;
this.m_altKey=param13;
this.m_shiftKey=param14;
return;
};
d.clone=function()
{
return new flash.events.TouchEvent(this.get_type(),this.get_bubbles(),this.get_cancelable(),this.m_touchPointID,this.m_isPrimaryTouchPoint,this.get_localX(),this.get_localY(),this.m_sizeX,this.m_sizeY,this.m_pressure,this.m_relatedObject,this.m_ctrlKey,this.m_altKey,this.m_shiftKey);
};
d.getStageX=function()
{
};
d.getStageY=function()
{
};
d.toString=function()
{
return this.formatToString("TouchEvent","type","bubbles","cancelable","eventPhase","touchPointID","isPrimaryTouchPoint","localX","localY","stageX","stageY","sizeX","sizeY","pressure","relatedObject","ctrlKey","altKey","shiftKey");
};
d.updateAfterEvent=function()
{
};
var s={};
s.__init__=function()
{
this.prototype.Event_constructor=this.__base__;
this.PROXIMITY_BEGIN="proximityBegin";
this.PROXIMITY_END="proximityEnd";
this.PROXIMITY_MOVE="proximityMove";
this.PROXIMITY_OUT="proximityOut";
this.PROXIMITY_OVER="proximityOver";
this.PROXIMITY_ROLL_OUT="proximityRollOut";
this.PROXIMITY_ROLL_OVER="proximityRollOver";
this.TOUCH_BEGIN="touchBegin";
this.TOUCH_END="touchEnd";
this.TOUCH_MOVE="touchMove";
this.TOUCH_OUT="touchOut";
this.TOUCH_OVER="touchOver";
this.TOUCH_ROLL_OUT="touchRollOut";
this.TOUCH_ROLL_OVER="touchRollOver";
this.TOUCH_TAP="touchTap";
};
flash.addDescription("flash.events.TouchEvent",d,"flash.events.Event",s,null);
}
());;
(function()
{
"use strict";
var d={};
d.TimerEvent=function(type,bubbles,cancelable)
{
if(bubbles==undefined)bubbles=false;
if(cancelable==undefined)cancelable=false;
this.Event_constructor(type,bubbles,cancelable);
};
d.clone=function()
{
return new flash.events.TimerEvent(this.get_type(),this.get_bubbles(),this.get_cancelable());
};
d.toString=function()
{
return this.formatToString("TimerEvent","type","bubbles","cancelable","eventPhase");
};
d.updateAfterEvent=function()
{
};
var s={};
s.__init__=function()
{
this.prototype.Event_constructor=this.__base__;
this.TIMER="timer";
this.TIMER_COMPLETE="timerComplete";
};
flash.addDescription("flash.events.TimerEvent",d,"flash.events.Event",s,null);
}
());;
(function()
{
"use strict";
var d={};
d.m_activating=false;
d.get_activating=function()
{
return this.m_activating;
};
d.set_activating=function(value)
{
this.m_activating=value;
return;
};
d.ActivityEvent=function(type,bubbles,cancelable,activating)
{
if(bubbles==undefined)bubbles=false;
if(cancelable==undefined)cancelable=false;
if(activating==undefined)activating=false;
this.Event_constructor(type,bubbles,cancelable);
this.m_activating=activating;
return;
};
d.clone=function()
{
return new flash.events.ActivityEvent(this.get_type(),this.get_bubbles(),this.get_cancelable(),this.get_activating());
};
d.toString=function()
{
return this.formatToString("ActivityEvent","type","bubbles","cancelable","eventPhase","activating");
};
var s={};
s.__init__=function()
{
this.prototype.Event_constructor=this.__base__;
this.ACTIVITY="activity";
};
flash.addDescription("flash.events.ActivityEvent",d,"flash.events.Event",s,null);
}
());;
(function()
{
"use strict";
var d={};
d.data=null;
d.header=null;
d.NetFilterEvent=function(type,bubbles,cancelable,header,data)
{
if(bubbles==undefined)bubbles=false;
if(cancelable==undefined)cancelable=false;
if(header==undefined)header=null;
if(data==undefined)data=null;
this.Event_constructor(type,bubbles,cancelable);
this.data=data;
this.header=header;
return;
};
d.clone=function()
{
return new flash.events.NetFilterEvent(this.get_type(),this.get_bubbles(),this.get_cancelable(),this.header,this.data);
};
d.toString=function()
{
return this.formatToString("NetTransformEvent","type","bubbles","cancelable","eventPhase","header","data");
};
var s={};
s.__init__=function()
{
this.prototype.Event_constructor=this.__base__;
};
flash.addDescription("flash.events.NetFilterEvent",d,"flash.events.Event",s,null);
}
());;
(function()
{
"use strict";
var d={};
d.error=null;
d.AsyncErrorEvent=function(type,bubbles,cancelable,text,error)
{
if(bubbles==undefined)bubbles=false;
if(cancelable==undefined)cancelable=false;
if(text==undefined)text="";
if(error==undefined)error=null;
this.error=error;
this.ErrorEvent_constructor(type,bubbles,cancelable,text);
return;
};
d.clone=function()
{
return new flash.events.AsyncErrorEvent(this.get_type(),this.get_bubbles(),this.get_cancelable(),this.error);
};
d.toString=function()
{
return this.formatToString("AsyncErrorEvent","type","bubbles","cancelable","eventPhase","text","error");
};
var s={};
s.__init__=function()
{
this.prototype.ErrorEvent_constructor=this.__base__;
this.ASYNC_ERROR="asyncError";
};
flash.addDescription("flash.events.AsyncErrorEvent",d,"flash.events.ErrorEvent",s,null);
}
());;
(function()
{
"use strict";
var d={};
d.IMEEvent=function(type,bubbles,cancelable,text)
{
if(bubbles==undefined)bubbles=false;
if(cancelable==undefined)cancelable=false;
if(text==undefined)text="";
this.TextEvent_constructor(type,bubbles,cancelable,text);
return;
};
d.clone=function()
{
return new flash.events.IMEEvent(this.get_type(),this.get_bubbles(),this.get_cancelable(),this.get_text());
};
d.toString=function()
{
return this.formatToString("IMEEvent","type","bubbles","cancelable","eventPhase","text");
};
var s={};
s.__init__=function()
{
this.prototype.TextEvent_constructor=this.__base__;
this.IME_COMPOSITION="imeComposition";
};
flash.addDescription("flash.events.IMEEvent",d,"flash.events.TextEvent",s,null);
}
());;
(function()
{
"use strict";
var d={};
d.get_data=function()
{
return this.TextEvent_get_text();
};
d.set_data=function(value)
{
this.TextEvent_set_text(value);
return;
};
d.DataEvent=function(type,bubbles,cancelable,data)
{
if(bubbles==undefined)bubbles=false;
if(cancelable==undefined)cancelable=false;
if(data==undefined)data="";
this.TextEvent_constructor(type,bubbles,cancelable,data);
return;
};
d.clone=function()
{
return new flash.events.DataEvent(this.get_type(),this.get_bubbles(),this.get_cancelable(),this.get_data());
};
d.toString=function()
{
return this.formatToString("DataEvent","type","bubbles","cancelable","eventPhase","data");
};
var s={};
s.__init__=function()
{
this.prototype.TextEvent_get_text=this.__base__.prototype.get_text;
this.prototype.TextEvent_set_text=this.__base__.prototype.set_text;
this.prototype.TextEvent_constructor=this.__base__;
this.DATA="data";
this.UPLOAD_COMPLETE_DATA="uploadCompleteData";
};
flash.addDescription("flash.events.DataEvent",d,"flash.events.TextEvent",s,null);
}
());;
(function()
{
"use strict";
var d={};
d.IOErrorEvent=function(type,bubbles,cancelable,text)
{
if(bubbles==undefined)bubbles=false;
if(cancelable==undefined)cancelable=false;
if(text==undefined)text="";
this.ErrorEvent_constructor(type,bubbles,cancelable,text);
return;
};
d.clone=function()
{
return new flash.events.IOErrorEvent(this.get_type(),this.get_bubbles(),this.get_cancelable(),this.get_text());
};
d.toString=function()
{
return this.formatToString("IOErrorEvent","type","bubbles","cancelable","eventPhase","text");
};
var s={};
s.__init__=function()
{
this.prototype.ErrorEvent_constructor=this.__base__;
this.DISK_ERROR="diskError";
this.IO_ERROR="ioError";
this.NETWORK_ERROR="networkError";
this.VERIFY_ERROR="verifyError";
};
flash.addDescription("flash.events.IOErrorEvent",d,"flash.events.ErrorEvent",s,null);
}
());;
(function()
{
"use strict";
var d={};
d.SecurityErrorEvent=function(type,bubbles,cancelable,text)
{
if(bubbles==undefined)bubbles=false;
if(cancelable==undefined)cancelable=false;
if(text==undefined)text="";
this.ErrorEvent_constructor(type,bubbles,cancelable,text);
return;
};
d.clone=function()
{
return new flash.events.SecurityErrorEvent(this.get_type(),this.get_bubbles(),this.get_cancelable(),this.get_text());
};
d.toString=function()
{
return this.formatToString("SecurityErrorEvent","type","bubbles","cancelable","eventPhase","text");
};
var s={};
s.__init__=function()
{
this.prototype.ErrorEvent_constructor=this.__base__;
this.SECURITY_ERROR="securityError";
};
flash.addDescription("flash.events.SecurityErrorEvent",d,"flash.events.ErrorEvent",s,null);
}
());;
(function()
{
"use strict";
var d={};
d.m_code=null;
d.m_level=null;
d.get_code=function()
{
return this.m_code;
};
d.set_code=function(value)
{
this.m_code=value;
return;
};
d.get_level=function()
{
return this.m_level;
};
d.set_level=function(value)
{
this.m_level=value;
return;
};
d.StatusEvent=function(type,bubbles,cancelable,code,level)
{
if(bubbles==undefined)bubbles=false;
if(cancelable==undefined)cancelable=false;
if(code==undefined)code="";
if(level==undefined)level="";
this.Event_constructor(type,bubbles,cancelable);
this.m_code=code;
this.m_level=level;
return;
};
d.clone=function()
{
return new flash.events.StatusEvent(this.get_type(),this.get_bubbles(),this.get_cancelable(),this.m_code,this.m_level);
};
d.toString=function()
{
return this.formatToString("StatusEvent","type","bubbles","cancelable","eventPhase","code","level");
};
var s={};
s.__init__=function()
{
this.prototype.Event_constructor=this.__base__;
this.STATUS="status";
};
flash.addDescription("flash.events.StatusEvent",d,"flash.events.Event",s,null);
}
());;
(function()
{
"use strict";
var d={};
d.m_changeList=null;
d.get_changeList=function()
{
return this.m_changeList;
};
d.set_changeList=function(value)
{
this.m_changeList=value;
return;
};
d.SyncEvent=function(type,bubbles,cancelable,changeList)
{
if(bubbles==undefined)bubbles=false;
if(cancelable==undefined)cancelable=false;
if(changeList==undefined)changeList=null;
this.Event_constructor(type,bubbles,cancelable);
this.m_changeList=changeList;
return;
};
d.clone=function()
{
return new flash.events.SyncEvent(this.get_type(),this.get_bubbles(),this.get_cancelable(),this.m_changeList);
};
d.toString=function()
{
return this.formatToString("SyncEvent","type","bubbles","cancelable","eventPhase","changeList");
};
var s={};
s.__init__=function()
{
this.prototype.Event_constructor=this.__base__;
this.SYNC="sync";
};
flash.addDescription("flash.events.SyncEvent",d,"flash.events.Event",s,null);
}
());;
(function()
{
"use strict";
var d={};
d.m_bytesLoaded=0;
d.m_bytesTotal=0;
d.get_bytesLoaded=function()
{
return this.m_bytesLoaded;
};
d.set_bytesLoaded=function(value)
{
value=Math.floor(value);
this.m_bytesLoaded=value;
return;
};
d.get_bytesTotal=function()
{
return this.m_bytesTotal;
};
d.set_bytesTotal=function(value)
{
value=Math.floor(value);
this.m_bytesTotal=value;
return;
};
d.ProgressEvent=function(type,bubbles,cancelable,bytesLoaded,bytesTotal)
{
if(bubbles==undefined)bubbles=false;
if(cancelable==undefined)cancelable=false;
if(bytesLoaded==undefined)bytesLoaded=0;
bytesLoaded=Math.floor(bytesLoaded);
if(bytesTotal==undefined)bytesTotal=0;
bytesTotal=Math.floor(bytesTotal);
this.Event_constructor(type,bubbles,cancelable);
this.m_bytesLoaded=bytesLoaded;
this.m_bytesTotal=bytesTotal;
return;
};
d.clone=function()
{
return new flash.events.ProgressEvent(this.get_type(),this.get_bubbles(),this.get_cancelable(),this.m_bytesLoaded,this.m_bytesTotal);
};
d.toString=function()
{
return this.formatToString("ProgressEvent","type","bubbles","cancelable","eventPhase","bytesLoaded","bytesTotal");
};
var s={};
s.__init__=function()
{
this.prototype.Event_constructor=this.__base__;
this.PROGRESS="progress";
this.SOCKET_DATA="socketData";
};
flash.addDescription("flash.events.ProgressEvent",d,"flash.events.Event",s,null);
}
());;
(function()
{
"use strict";
var d={};
d.m_keyCode=0;
d.m_relatedObject=null;
d.m_shiftKey=false;
d.get_keyCode=function()
{
return this.m_keyCode;
};
d.set_keyCode=function(value)
{
value=Math.floor(value);
this.m_keyCode=value;
return;
};
d.get_relatedObject=function()
{
return this.m_relatedObject;
};
d.set_relatedObject=function(value)
{
this.m_relatedObject=value;
return;
};
d.get_shiftKey=function()
{
return this.m_shiftKey;
};
d.set_shiftKey=function(value)
{
this.m_shiftKey=value;
return;
};
d.FocusEvent=function(type,bubbles,cancelable,relatedObject,shiftKey,keyCode)
{
if(bubbles==undefined)bubbles=true;
if(cancelable==undefined)cancelable=false;
if(relatedObject==undefined)relatedObject=null;
if(shiftKey==undefined)shiftKey=false;
if(keyCode==undefined)keyCode=0;
keyCode=Math.floor(keyCode);
this.Event_constructor(type,bubbles,cancelable);
this.m_relatedObject=relatedObject;
this.m_shiftKey=shiftKey;
this.m_keyCode=keyCode;
return;
};
d.clone=function()
{
return new flash.events.FocusEvent(this.get_type(),this.get_bubbles(),this.get_cancelable(),this.m_relatedObject,this.m_shiftKey,this.m_keyCode);
};
d.toString=function()
{
return this.formatToString("FocusEvent","type","bubbles","cancelable","eventPhase","relatedObject","shiftKey","keyCode");
};
var s={};
s.__init__=function()
{
this.prototype.Event_constructor=this.__base__;
this.FOCUS_IN="focusIn";
this.FOCUS_OUT="focusOut";
this.KEY_FOCUS_CHANGE="keyFocusChange";
this.MOUSE_FOCUS_CHANGE="mouseFocusChange";
};
flash.addDescription("flash.events.FocusEvent",d,"flash.events.Event",s,null);
}
());;
(function()
{
"use strict";
var d={};
d.m_info=null;
d.get_info=function()
{
return this.m_info;
};
d.set_info=function(value)
{
this.m_info=value;
return;
};
d.NetStatusEvent=function(type,bubbles,cancelable,info)
{
if(bubbles==undefined)bubbles=false;
if(cancelable==undefined)cancelable=false;
if(info==undefined)info=null;
this.Event_constructor(type,bubbles,cancelable);
this.m_info=info;
return;
};
d.clone=function()
{
return new flash.events.NetStatusEvent(this.get_type(),this.get_bubbles(),this.get_cancelable(),this.m_info);
};
d.toString=function()
{
return this.formatToString("NetStatusEvent","type","bubbles","cancelable","eventPhase","info");
};
var s={};
s.__init__=function()
{
this.prototype.Event_constructor=this.__base__;
this.NET_STATUS="netStatus";
};
flash.addDescription("flash.events.NetStatusEvent",d,"flash.events.Event",s,null);
}
());;
(function()
{
"use strict";
var d={};
d.m_altKey=false;
d.m_buttonDown=false;
d.m_ctrlKey=false;
d.m_delta=0;
d.m_localX=0;
d.m_localY=0;
d.m_stageX=0;
d.m_stageY=0;
d.m_relatedObject=null;
d.m_shiftKey=false;
d.get_altKey=function()
{
return this.m_altKey;
};
d.set_altKey=function(value)
{
this.m_altKey=value;
return value;
};
d.get_buttonDown=function()
{
return this.m_buttonDown;
};
d.set_buttonDown=function(value)
{
this.m_buttonDown=value;
return value;
};
d.get_ctrlKey=function()
{
return this.m_ctrlKey;
};
d.set_ctrlKey=function(value)
{
this.m_ctrlKey=value;
return value;
};
d.get_delta=function()
{
return this.m_delta;
};
d.set_delta=function(value)
{
value=Math.floor(value);
this.m_delta=value;
return value;
};
d.get_localX=function()
{
return this.m_localX;
};
d.set_localX=function(value)
{
this.m_localX=value;
return value;
};
d.get_localY=function()
{
return this.m_localY;
};
d.set_localY=function(value)
{
this.m_localY=value;
return value;
};
d.get_relatedObject=function()
{
return this.m_relatedObject;
};
d.set_relatedObject=function(value)
{
this.m_relatedObject=value;
return value;
};
d.get_target=function()
{
return this.get_relatedObject()?this.get_relatedObject():this.get_target();
};
d.get_shiftKey=function()
{
return this.m_shiftKey;
};
d.set_shiftKey=function(value)
{
this.m_shiftKey=value;
return value;
};
d.get_stageX=function()
{
return this.m_stageX;
};
d.set_stageX=function(value)
{
this.m_stageX=value;
return value;
};
d.get_stageY=function()
{
return this.m_stageY;
};
d.set_stageY=function(value)
{
this.m_stageY=value;
return value;
};
d.MouseEvent=function(type,bubbles,cancelable,localX,localY,relatedObject,ctrlKey,altKey,shiftKey,buttonDown,delta)
{
if(bubbles==undefined)bubbles=true;
if(cancelable==undefined)cancelable=false;
if(localX==undefined)localX=0;
if(localY==undefined)localY=0;
if(relatedObject==undefined)relatedObject=null;
if(ctrlKey==undefined)ctrlKey=false;
if(altKey==undefined)altKey=false;
if(shiftKey==undefined)shiftKey=false;
if(buttonDown==undefined)buttonDown=false;
if(delta==undefined)delta=0;
delta=Math.floor(delta);
this.Event_constructor(type,bubbles,cancelable);
this.m_localX=localX;
this.m_localY=localY;
this.m_relatedObject=relatedObject;
this.m_ctrlKey=ctrlKey;
this.m_altKey=altKey;
this.m_shiftKey=shiftKey;
this.m_buttonDown=buttonDown;
this.m_delta=delta;
};
d.clone=function()
{
var copy=new flash.events.MouseEvent(
this.get_type(),
this.get_bubbles(),
this.get_cancelable(),
this.m_localX,
this.m_localY,
this.m_relatedObject,
this.m_ctrlKey,
this.m_altKey,
this.m_shiftKey,
this.m_buttonDown,
this.m_delta
);
copy.m_stageX=this.m_stageX;
copy.m_stageY=this.m_stageY;
return copy;
};
d.toString=function()
{
return this.formatToString("MouseEvent","type","bubbles","cancelable","eventPhase","localX","localY","stageX","stageY","relatedObject","ctrlKey","altKey","shiftKey","delta");
};
d.updateAfterEvent=function()
{
};
var s={};
s.__init__=function()
{
this.prototype.Event_constructor=this.__base__;
this.CLICK="click";
this.DOUBLE_CLICK="doubleClick";
this.MOUSE_DOWN="mouseDown";
this.MOUSE_MOVE="mouseMove";
this.MOUSE_OUT="mouseOut";
this.MOUSE_OVER="mouseOver";
this.MOUSE_UP="mouseUp";
this.MOUSE_WHEEL="mouseWheel";
this.ROLL_OUT="rollOut";
this.ROLL_OVER="rollOver";
};
flash.addDescription("flash.events.MouseEvent",d,"flash.events.Event",s,null);
}
());;
(function()
{
"use strict";
var d={};
d.description=null;
d.forceSimple=false;
d.name=null;
d.noAutoLabeling=false;
d.shortcut=null;
d.silent=false;
d.AccessibilityProperties=function()
{
this.name="";
this.description="";
this.shortcut="";
this.silent=false;
this.forceSimple=false;
this.noAutoLabeling=false;
};
flash.addDescription("flash.accessibility.AccessibilityProperties",d,null,null,null);
}
());;
(function()
{
"use strict";
var d={};
d.Accessibility=function()
{
return;
};
var s={};
s.get_active=function()
{
return false;
};
s.sendEvent=function(source,childID,eventType,nonHTML)
{
childID=Math.floor(childID);
eventType=Math.floor(eventType);
if(nonHTML==undefined)nonHTML=false;
};
s.updateProperties=function()
{
};
flash.addDescription("flash.accessibility.Accessibility",d,null,s,null);
}
());;
(function()
{
"use strict";
var d={};
d.errno=0;
d.stub=false;
d.AccessibilityImplementation=function()
{
this.stub=false;
this.errno=0;
return;
};
d.accDoDefaultAction=function(childID)
{
childID=Math.floor(childID);
return;
};
d.accLocation=function(childID)
{
childID=Math.floor(childID);
return null;
};
d.accSelect=function(operation,childID)
{
operation=Math.floor(operation);
childID=Math.floor(childID);
return;
};
d.getChildIDArray=function()
{
return null;
};
d.get_accDefaultAction=function(childID)
{
childID=Math.floor(childID);
return null;
};
d.get_accFocus=function()
{
return 0;
};
d.get_accName=function(childID)
{
childID=Math.floor(childID);
return null;
};
d.get_accRole=function(childID)
{
childID=Math.floor(childID);
throw new Error(2143);
return 0;
};
d.get_accSelection=function()
{
return null;
};
d.get_accState=function(childID)
{
childID=Math.floor(childID);
throw new Error(2144);
return 0;
};
d.get_accValue=function(childID)
{
childID=Math.floor(childID);
return null;
};
d.isLabeledBy=function(labelBounds)
{
return false;
};
flash.addDescription("flash.accessibility.AccessibilityImplementation",d,null,null,null);
}
());;(function()
{
"use strict";
var d={};
d.name=null;
d.FrameLabel=function()
{
this.Tag_constructor();
}
d.fromXML=function(node)
{
this.Tag_fromXML(node);
this.name=node.get_attributes().name;
}
var s={};
s.__init__=function()
{
this.prototype.Tag_constructor=this.__base__;
this.prototype.Tag_fromXML=this.__base__.prototype.fromXML;
}
flash.addDescription("flash.swf.FrameLabel",d,"flash.swf.Tag",s,null);
}
());;(function()
{
"use strict";
var d={};
d.id=null;
d.depth=-1;
d.RemoveObject=function()
{
this.Tag_constructor();
}
d.fromXML=function(node)
{
this.Tag_fromXML(node);
var attributes=node.get_attributes();
if(attributes.depth)this.depth=Number(attributes.depth);
}
var s={};
s.__init__=function()
{
this.prototype.Tag_constructor=this.__base__;
this.prototype.Tag_fromXML=this.__base__.prototype.fromXML;
}
flash.addDescription("flash.swf.RemoveObject",d,"flash.swf.Tag",s,null);
}
());;(function()
{
"use strict";
var d={};
d.End=function()
{
this.Tag_constructor();
}
var s={};
s.__init__=function()
{
this.prototype.Tag_constructor=this.__base__;
}
flash.addDescription("flash.swf.End",d,"flash.swf.Tag",s,null);
}
());;(function()
{
"use strict";
var d={};
d.id=null;
d.bounds=null;
d.matrix=null;
d._textRecords=null;
d._lastRecord=null;
d.DefineText=function()
{
this.Tag_constructor();
}
d.fromXML=function(node)
{
this.Tag_fromXML(node);
var childNodes=node.get_childNodes();
this._textRecords=[];
var recordCounter=0;
for(var i=0;i<childNodes.length;i++)
{
var child=childNodes[i];
if(child.nodeName=="Rectangle")
{
this.bounds=this.parseRectangle(child);
this.bounds.inflate(2,2);
}
if(child.nodeName=="Matrix")
{
this.matrix=this.parseMatrix(child);
}
if(child.nodeName=="TextRecord")
{
this._defineText(child,recordCounter);
recordCounter++;
}
}
}
d._defineText=function(node,recordCounter)
{
var attributes=node.get_attributes();
var childNodes=node.get_childNodes();
var width=0;
var height=0;
var glyphEntrys=[];
var glyphEntryAttr=null;
for(var i=0;i<childNodes.length;i++)
{
var child=childNodes[i];
if(child.nodeName=="GlyphEntry")
{
glyphEntryAttr=child.get_attributes();
glyphEntrys.push((Number(glyphEntryAttr.advance))/20);
}
}
var record={
x:attributes.x,
y:attributes.y,
text:unescape(attributes.text),
glyphEntrys:glyphEntrys,
fontId:flash.swf.Tag._baseId+attributes.fontId,
fontName:attributes.font,
fontSize:attributes.height,
color:attributes.color
};
this._textRecords.push(record);
}
d.createDisplayObject=function()
{
var textField=new flash.text.StaticText();
textField._textRecords=this._textRecords;
textField._bounds=this.bounds;
if(this.matrix)
{
textField._matrix=this.matrix;
}
return textField;
}
var s={};
s.__init__=function()
{
this.prototype.Tag_constructor=this.__base__;
this.prototype.Tag_fromXML=this.__base__.prototype.fromXML;
}
flash.addDescription("flash.swf.DefineText",d,"flash.swf.Tag",s,null);
}
());;(function()
{
"use strict";
var d={};
d.id=null;
d.data=null;
d.DefineBinaryData=function()
{
this.Tag_constructor();
this.baseClass=flash.utils.ByteArray;
}
d.fromXML=function(node)
{
this.Tag_fromXML(node);
var attributes=node.get_attributes();
this.data=attributes.data;
};
d.linkage=function(byteArray)
{
if(this.data)
{
byteArray._data=flash.decode64(this.data);
}
};
var s={};
s.__init__=function()
{
this.prototype.Tag_constructor=this.__base__;
this.prototype.Tag_fromXML=this.__base__.prototype.fromXML;
}
flash.addDescription("flash.swf.DefineBinaryData",d,"flash.swf.Tag",s,null);
}
());;(function()
{
"use strict";
var d={};
d.data=null;
d.SymbolClass=function()
{
this.Tag_constructor();
};
d.fromXML=function(node)
{
this.Tag_fromXML(node);
this.data={};
var childNodes=node.get_childNodes();
for(var i=0;i<childNodes.length;i++)
{
var child=childNodes[i];
if(child.nodeName=="SymbolData")
{
var attributes=child.get_attributes();
this.data[attributes.name]=flash.swf.Tag._baseId+attributes.id;
}
}
};
d.getClassName=function(id)
{
for(var name in this.data)
{
if(this.data[name]==id)
{
return name;
}
}
return null;
};
d.getDefineId=function(name,weak)
{
if(weak)
{
for(var key in this.data)
{
if(key.indexOf(name)!=-1)
{
return this.data[key];
}
}
}
else
{
return this.data[name];
}
};
d.setIdToClasses=function()
{
for(var name in this.data)
{
var id=this.data[name];
var ClassObject=flash.utils.getDefinitionByName(name);
if(!ClassObject)
{
var define=flash.system.ApplicationDomain.get_currentDomain()._getDefine(id);
if(define)
{
ClassObject=flash.createExtendsClass(name,define.baseClass);
}
}
if(ClassObject)
{
ClassObject.__linkageId=id;
}
else
{
throw new Error("Class for linkage not found '"+name+"'");
}
}
};
var s={};
s.__init__=function()
{
this.prototype.Tag_constructor=this.__base__;
this.prototype.Tag_fromXML=this.__base__.prototype.fromXML;
}
flash.addDescription("flash.swf.SymbolClass",d,"flash.swf.Tag",s,null);
}
());;(function()
{
"use strict";
var d={};
d.id=null;
d.atlas=null;
d.bounds=null;
d.realBounds=null;
d.map=null;
d.color=-1;
d.bitmap=null;
d.DefineShape=function()
{
this.Tag_constructor();
this.baseClass=flash.display.Shape;
}
d.fromXML=function(node)
{
this.Tag_fromXML(node);
var attributes=node.get_attributes();
if(attributes.atlas)
{
this.atlas=attributes.atlas;
}
if(attributes.color)
{
this.color=Number(attributes.color);
}
var childNodes=node.get_childNodes();
for(var i=0;i<childNodes.length;i++)
{
var child=childNodes[i];
attributes=child.get_attributes();
if(child.nodeName=="Rectangle")
{
if(attributes.name=="bounds")
{
this.bounds=this.parseRectangle(child);
}
else if(attributes.name=="map")
{
this.map=this.parseRectangle(child);
}
}
}
this.realBounds=this.bounds.clone();
if(this.color==-1)
{
var border=flash.swf.DefineShape._border;
this.realBounds.inflate(-border,-border);
}
};
d.setImages=function(domain)
{
if(this.atlas)
{
domain._setImage(this.atlas,null);
}
};
d.createDisplayObject=function()
{
var shape=new flash.display.Shape();
this.linkage(shape);
return shape;
};
d.linkage=function(shape)
{
if(!this.bitmap)
{
if(this.color!=-1)
{
this.bitmap=new flash.display.BitmapData(1,1,true,this.color);
}
else if(this.atlas)
{
this.bitmap=flash.system.ApplicationDomain.get_currentDomain()._getImage(this.atlas);
}
}
if(this.bitmap)
{
if(!this.map)
{
this.map=new flash.geom.Rectangle(0,0,this.bitmap.get_width(),this.bitmap.get_height());
}
shape.get_graphics()._textureInfo=this;
}
};
var s={};
s.__init__=function()
{
this.prototype.Tag_constructor=this.__base__;
this.prototype.Tag_fromXML=this.__base__.prototype.fromXML;
this._border=2;
}
flash.addDescription("flash.swf.DefineShape",d,"flash.swf.Tag",s,null);
}
());;(function()
{
"use strict";
var d={};
d.id=null;
d.atlas=null;
d.bounds=null;
d.map=null;
d.color=0;
d.text="";
d.htmlText="";
d.html=false;
d.multiline=false;
d.textType="";
d.variable="";
d.wordWrap=false;
d.textFormat;
d.DefineEditText=function()
{
this.Tag_constructor();
}
d.fromXML=function(node)
{
this.Tag_fromXML(node);
var attributes=node.get_attributes();
if(attributes.atlas)
{
this.atlas=attributes.atlas;
}
this.textFormat=new flash.text.TextFormat(
attributes.fontName,
attributes.fontSize?Number(attributes.fontSize):Number(attributes.height),
Number(attributes.color),
attributes.bold=="true",
attributes.italic,
attributes.underline,
attributes.url,
attributes.target,
attributes.align,
attributes.leftMargin,
attributes.rightMargin,
attributes.indent,
attributes.leading
);
this.textFormat._definefont=flash.system.ApplicationDomain.get_currentDomain()._getDefine(
flash.swf.Tag._baseId+attributes.fontId
);
this.html=attributes.html=="true";
this.multiline=attributes.multiline=="true";
this.textType=attributes.type;
this.variable=attributes.variable;
this.wordWrap=attributes.wordWrap=="true";
var symbols=attributes.text;
symbols=symbols.replace(new RegExp("uFFA0",'g'),"u0020");
this.text=unescape(symbols);
var childNodes=node.get_childNodes();
for(var i=0;i<childNodes.length;i++)
{
var child=childNodes[i];
if(child.nodeName=="Rectangle")
{
this.bounds=this.parseRectangle(child);
}
}
}
d.createDisplayObject=function()
{
var textField=new flash.text.TextField();
textField._bounds.x=this.bounds.x;
textField._bounds.y=this.bounds.y;
textField.set_width(this.bounds.width);
textField.set_height(this.bounds.height);
textField.set_type(this.textType);
textField.set_multiline(this.multiline);
textField.set_wordWrap(this.wordWrap);
textField.set_defaultTextFormat(this.textFormat);
if(this.html)
{
textField.set_htmlText(this.text);
}
else
{
textField.set_text(this.text);
}
return textField;
}
var s={};
s.__init__=function()
{
this.prototype.Tag_constructor=this.__base__;
this.prototype.Tag_fromXML=this.__base__.prototype.fromXML;
}
flash.addDescription("flash.swf.DefineEditText",d,"flash.swf.Tag",s,null);
}
());;(function()
{
"use strict";
var d={};
d.id=null;
d.atlas=null;
d.DefineBits=function()
{
this.Tag_constructor();
this.baseClass=flash.display.Bitmap;
}
d.linkage=function(bitmap)
{
if(!this.bitmap)
{
this.bitmap=flash.system.ApplicationDomain.get_currentDomain()._getImage(this.atlas);
}
bitmap.set_bitmapData(this.bitmap);
};
d.setImages=function(domain)
{
if(this.atlas)
{
domain._setImage(this.atlas,null);
}
};
var s={};
s.__init__=function()
{
this.prototype.Tag_constructor=this.__base__;
this.prototype.Tag_fromXML=this.__base__.prototype.fromXML;
}
flash.addDescription("flash.swf.DefineBits",d,"flash.swf.Tag",s,null);
}
());;(function()
{
"use strict";
var d={};
d.ShowFrame=function()
{
this.Tag_constructor();
}
var s={};
s.__init__=function()
{
this.prototype.Tag_constructor=this.__base__;
}
flash.addDescription("flash.swf.ShowFrame",d,"flash.swf.Tag",s,null);
}
());;(function()
{
"use strict";
var d={};
d.scenes=null;
d.labels=null;
d.DefineScene=function()
{
this.Tag_constructor();
}
d.fromXML=function(node)
{
this.Tag_fromXML(node);
this.scenes=[];
this.labels=[];
var nodes=node.get_childNodes();
for(var i=0;i<nodes.length;i++)
{
var child=nodes[i];
var attributes=child.get_attributes();
if(child.nodeName=="Scene")
{
this.scenes.push(
{
offset:Number(attributes.offset),
name:attributes.name
}
);
}
else if(child.nodeName=="FrameLabel")
{
this.labels.push(
{
frame:Number(attributes.frame),
name:attributes.name
}
);
}
}
}
var s={};
s.__init__=function()
{
this.prototype.Tag_constructor=this.__base__;
this.prototype.Tag_fromXML=this.__base__.prototype.fromXML;
}
flash.addDescription("flash.swf.DefineScene",d,"flash.swf.Tag",s,null);
}
());;(function()
{
"use strict";
var d={};
d.id=null;
d.depth=-1;
d.mask=-1
d.matrix=null;
d.colorTransform=null;
d.filters=null;
d.name=null;
d.PlaceObject=function()
{
this.Tag_constructor();
}
d.fromXML=function(node)
{
this.Tag_fromXML(node);
var attributes=node.get_attributes();
if(attributes.depth)this.depth=Number(attributes.depth);
if(attributes.name)this.name=String(attributes.name);
if(attributes.mask)this.mask=Number(attributes.mask);
var childNodes=node.get_childNodes();
for(var i=0;i<childNodes.length;i++)
{
var child=childNodes[i];
switch(child.nodeName)
{
case"Matrix":
this.matrix=this.parseMatrix(child);
break;
case"ColorTransform":
this.colorTransform=this.parseColorTransform(child);
break;
case"BlurFilter":
this._createFilters();
this.filters.push(this.parseBlurFilter(child));
break;
case"GlowFilter":
this._createFilters();
this.filters.push(this.parseGlowFilter(child));
break;
case"DropShadowFilter":
this._createFilters();
this.filters.push(this.parseDropShadowFilter(child));
break;
}
}
};
d._createFilters=function()
{
if(!this.filters)this.filters=[];
}
d.parseBlurFilter=function(node)
{
var attributes=node.get_attributes();
return new flash.filters.BlurFilter(
Number(attributes.blurX),
Number(attributes.blurY),
Number(attributes.quality)
);
};
d.parseGlowFilter=function(node)
{
var attributes=node.get_attributes();
return new flash.filters.GlowFilter(
Number(attributes.color),
Number(attributes.alpha),
Number(attributes.blurX),
Number(attributes.blurY),
Number(attributes.strength),
Number(attributes.quality),
attributes.inner=="true",
attributes.knockout=="true"
);
};
d.parseDropShadowFilter=function(node)
{
var attributes=node.get_attributes();
return new flash.filters.DropShadowFilter(
Number(attributes.distance),
Number(attributes.angle),
Number(attributes.color),
Number(attributes.alpha),
Number(attributes.blurX),
Number(attributes.blurY),
Number(attributes.strength),
Number(attributes.quality),
attributes.inner=="true",
attributes.knockout=="true",
attributes.hideObject=="true"
);
};
d.initDefaults=function()
{
if(!this.matrix)
{
this.matrix=new flash.geom.Matrix();
}
if(!this.colorTransform)
{
this.colorTransform=new flash.geom.ColorTransform();
}
if(!this.filters)
{
this.filters=[];
}
}
var s={};
s.__init__=function()
{
this.prototype.Tag_constructor=this.__base__;
this.prototype.Tag_fromXML=this.__base__.prototype.fromXML;
}
flash.addDescription("flash.swf.PlaceObject",d,"flash.swf.Tag",s,null);
}
());;(function()
{
"use strict";
var d={};
d.id=null;
d.frames=0;
d.tags=null;
d.DefineSprite=function()
{
this.Tag_constructor();
this.baseClass=flash.display.MovieClip;
}
d.fromXML=function(node)
{
this.Tag_fromXML(node);
var attributes=node.get_attributes();
if(attributes.frames)this.frames=Number(attributes.frames);
var domain=flash.system.ApplicationDomain.get_currentDomain();
var childNodes=node.get_childNodes();
this.tags=new Array();
for(var i=0;i<childNodes.length;i++)
{
var child=childNodes[i];
var TagClass=null;
var isDefine=false;
var isSymbol=false;
var hasImage=false;
var hasFont=false;
switch(child.nodeName)
{
case"ShowFrame":
TagClass=flash.swf.ShowFrame;
break;
case"End":
TagClass=flash.swf.End;
break;
case"DefineShape":
case"DefineShape2":
case"DefineShape3":
case"DefineShape4":
TagClass=flash.swf.DefineShape;
isDefine=true;
hasImage=true;
break;
case"DefineText":
case"DefineText2":
TagClass=flash.swf.DefineText;
isDefine=true;
break;
case"DefineSound":
TagClass=flash.swf.DefineSound;
isDefine=true;
break;
case"DefineEditText":
TagClass=flash.swf.DefineEditText;
isDefine=true;
break;
case"DefineSprite":
TagClass=flash.swf.DefineSprite;
isDefine=true;
break;
case"PlaceObject":
case"PlaceObject2":
case"PlaceObject3":
TagClass=flash.swf.PlaceObject;
break;
case"RemoveObject":
case"RemoveObject2":
TagClass=flash.swf.RemoveObject;
break;
case"SymbolClass":
TagClass=flash.swf.SymbolClass;
isSymbol=true;
break;
case"DefineScene":
TagClass=flash.swf.DefineScene;
break;
case"FrameLabel":
TagClass=flash.swf.FrameLabel;
break;
case"DefineButton":
case"DefineButton2":
TagClass=flash.swf.DefineButton;
isDefine=true;
break;
case"DefineBinaryData":
TagClass=flash.swf.DefineBinaryData;
isDefine=true;
break;
case"DefineBits":
case"DefineBitsJPEG2":
case"DefineBitsJPEG3":
case"DefineBitsJPEG4":
case"DefineBitsLossless":
case"DefineBitsLossless2":
TagClass=flash.swf.DefineBits;
isDefine=true;
break;
case"DefineFont":
case"DefineFont1":
case"DefineFont2":
case"DefineFont3":
TagClass=flash.swf.DefineFont;
isDefine=true;
hasFont=true;
break;
}
if(TagClass)
{
var tag=new TagClass();
tag.fromXML(child);
this.tags.push(tag);
if(isDefine)
{
domain._setDefine(tag);
}
if(isSymbol)
{
domain._addLinkage(tag);
}
if(hasImage)
{
tag.setImages(domain);
}
if(hasFont)
{
tag.setFonts(domain);
}
}
}
}
d.createDisplayObject=function()
{
var DisplayObjectClass;
if(this.id)
{
var symbolClass=flash.system.ApplicationDomain.get_currentDomain()._getLinkage(this.id);
if(symbolClass)
{
var className=symbolClass.getClassName(this.id);
if(className)
{
DisplayObjectClass=flash.utils.getDefinitionByName(className);
if(!DisplayObjectClass)
{
throw new Error("Class '"+className+"' could not be found");
}
}
}
}
if(DisplayObjectClass)
{
DisplayObjectClass.prototype.get_stage=function()
{
return flash.display.Stage.__current__;
}
return new DisplayObjectClass();
}
else
{
var movieClip=new flash.display.MovieClip();
movieClip.get_stage=function()
{
return flash.display.Stage.__current__;
}
this.linkage(movieClip);
return movieClip;
}
}
d.linkage=function(movieClip)
{
var frames=[];
var frame={};
frame.places=[];
frame.labels=[];
frame.index=1;
var i;
var j;
var defineScene;
for(i=0;i<this.tags.length;i++)
{
var tag=this.tags[i];
if(tag instanceof flash.swf.ShowFrame)
{
var places=frame.places.slice(0);
var index=frame.index+1;
frames.push(frame);
frame=new Object();
frame.places=places;
frame.labels=new Array();
frame.index=index;
}
else if(tag instanceof flash.swf.End)
{
}
else if(tag instanceof flash.swf.PlaceObject)
{
frame.places[tag.depth]=tag;
}
else if(tag instanceof flash.swf.RemoveObject)
{
frame.places[tag.depth]=null;
}
else if(tag instanceof flash.swf.DefineScene)
{
defineScene=tag;
}
else if(tag instanceof flash.swf.FrameLabel)
{
frame.labels.push(tag.name);
}
}
if(frames.length)
{
var first=frames[0];
for(j in first.places)
{
first.places[j].initDefaults();
}
movieClip.__constructChildren__(first,true,true,true);
if(movieClip instanceof flash.display.MovieClip)
{
movieClip._updatedFrame=movieClip._currentFrame;
}
movieClip.__updateNames__();
}
if(movieClip instanceof flash.display.MovieClip)
{
if(defineScene)
{
d.initScenes(movieClip,defineScene);
}
movieClip._frames=frames;
if(frames.length<=1)
{
movieClip.stop();
}
}
}
d.initScenes=function(movieClip,defineScene)
{
var scenes=movieClip.get_scenes();
for(var i=0;i<defineScene.scenes.length;i++)
{
var sceneObject=defineScene.scenes[i];
var numFrames;
if(i+1<defineScene.scenes.length)
{
var next=defineScene.scenes[i+1];
numFrames=next.offset-sceneObject.offset;
}
else
{
numFrames=movieClip.get_totalFrames()-sceneObject.offset;
}
var labels=[];
for(var j=0;j<defineScene.labels.length;j++)
{
var labelObject=defineScene.labels[j];
if(sceneObject.offset<=labelObject.frame&&labelObject.frame<sceneObject.offset+numFrames)
{
var frameLabel=new flash.display.FrameLabel(
labelObject.name,
labelObject.frame-sceneObject.offset+1
);
labels.push(frameLabel);
}
}
var scene=new flash.display.Scene(
sceneObject.name,
labels,
numFrames
);
scene._offset=sceneObject.offset;
scenes.push(scene);
}
}
var s={};
s.__init__=function()
{
this.prototype.Tag_constructor=this.__base__;
this.prototype.Tag_fromXML=this.__base__.prototype.fromXML;
}
flash.addDescription("flash.swf.DefineSprite",d,"flash.swf.Tag",s,null);
}
());;(function()
{
"use strict";
var d={};
d.baseClass=null;
d.Tag=function()
{
};
d.fromXML=function(node)
{
var attributes=node.get_attributes();
if(attributes.id)
{
this.id=flash.swf.Tag._baseId+attributes.id;
}
};
d.parseRectangle=function(node)
{
var rectangle=new flash.geom.Rectangle();
var attributes=node.get_attributes();
if(attributes.x)rectangle.x=Number(attributes.x);
if(attributes.y)rectangle.y=Number(attributes.y);
if(attributes.width)rectangle.width=Number(attributes.width);
if(attributes.height)rectangle.height=Number(attributes.height);
return rectangle;
};
d.parseMatrix=function(node)
{
var matrix=new flash.geom.Matrix();
var attributes=node.get_attributes();
if(attributes.a)matrix.a=Number(attributes.a);
if(attributes.b)matrix.b=Number(attributes.b);
if(attributes.c)matrix.c=Number(attributes.c);
if(attributes.d)matrix.d=Number(attributes.d);
if(attributes.tx)matrix.tx=Number(attributes.tx);
if(attributes.ty)matrix.ty=Number(attributes.ty);
return matrix;
};
d.parseColorTransform=function(node)
{
var colorTransform=new flash.geom.ColorTransform();
var attributes=node.get_attributes();
if(attributes.redMultiplier)colorTransform.redMultiplier=Number(attributes.redMultiplier);
if(attributes.greenMultiplier)colorTransform.greenMultiplier=Number(attributes.greenMultiplier);
if(attributes.blueMultiplier)colorTransform.blueMultiplier=Number(attributes.blueMultiplier);
if(attributes.alphaMultiplier)colorTransform.alphaMultiplier=Number(attributes.alphaMultiplier);
if(attributes.redOffset)colorTransform.redOffset=Number(attributes.redOffset);
if(attributes.greenOffset)colorTransform.greenOffset=Number(attributes.greenOffset);
if(attributes.blueOffset)colorTransform.blueOffset=Number(attributes.blueOffset);
if(attributes.alphaOffset)colorTransform.alphaOffset=Number(attributes.alphaOffset);
return colorTransform;
};
d.createDisplayObject=function()
{
return null;
};
var s={};
s.__init__=function()
{
this._baseId=null;
}
flash.addDescription("flash.swf.Tag",d,null,s,null);
}
());;(function()
{
"use strict";
var d={};
d.id=null;
d.records=null;
d.DefineButton=function()
{
this.Tag_constructor();
}
d.fromXML=function(node)
{
this.Tag_fromXML(node);
var attributes=node.get_attributes();
this.records=[];
var childNodes=node.get_childNodes();
for(var i=0;i<childNodes.length;i++)
{
var child=childNodes[i];
attributes=child.get_attributes();
if(child.nodeName=="ButtonRecord")
{
var record={};
record.id=flash.swf.Tag._baseId+attributes.id;
record.depth=Number(attributes.depth);
record.stateUp=attributes.stateUp=="true";
record.stateDown=attributes.stateDown=="true";
record.stateOver=attributes.stateOver=="true";
record.stateHitTest=attributes.stateHitTest=="true";
var subNodes=child.get_childNodes();
for(var j=0;j<subNodes.length;j++)
{
var sub=subNodes[j];
if(sub.nodeName=="Matrix")
{
record.matrix=this.parseMatrix(sub);
}
if(sub.nodeName=="ColorTransform")
{
record.colorTransform=this.parseColorTransform(sub);
}
}
this.records.push(record);
}
}
}
d.createDisplayObject=function()
{
var up=this.createState("stateUp");
var down=this.createState("stateDown");
var over=this.createState("stateOver");
var hitTest=this.createState("stateHitTest");
var button=new flash.display.SimpleButton(up,over,down,hitTest);
return button;
}
d.createState=function(name)
{
var sprite=new flash.display.Sprite();
var frame={};
frame.places=[];
for(var i=0;i<this.records.length;i++)
{
var record=this.records[i];
if(record[name])
{
frame.places[record.depth]=record;
}
}
sprite.__constructChildren__(frame,true,true,true);
sprite.__updateNames__();
return sprite;
}
var s={};
s.__init__=function()
{
this.prototype.Tag_constructor=this.__base__;
this.prototype.Tag_fromXML=this.__base__.prototype.fromXML;
}
flash.addDescription("flash.swf.DefineButton",d,"flash.swf.Tag",s,null);
}
());;(function()
{
"use strict";
var d={};
d.id=null;
d.ascent=0;
d.descent=0;
d.leading=0;
d.fontStyle="";
d.glyphs=""
d.name="";
d.path="";
d.font=null;
d.DefineFont=function()
{
this.Tag_constructor();
this.baseClass=flash.text.Font;
}
d.fromXML=function(node)
{
this.Tag_fromXML(node);
var attributes=node.get_attributes();
this.ascent=Number(attributes.ascent)/20;
this.descent=Number(attributes.descent)/20;
this.leading=Number(attributes.leading)/20;
this.name=attributes.name;
this.path=attributes.path;
var bold=attributes.bold=="true";
var italic=attributes.italic=="true";
this.fontStyle=flash.text.FontStyle.REGULAR;
if(bold&&italic)
{
this.fontStyle=flash.text.FontStyle.BOLD_ITALIC;
}
else if(bold)
{
this.fontStyle=flash.text.FontStyle.BOLD;
}
else if(italic)
{
this.fontStyle=flash.text.FontStyle.ITALIC;
}
this.font=new flash.text.Font();
this.font._fontName=this.name;
this.font._fontType="embedded";
this.font._fontStyle=this.fontStyle;
this.font._glyphs=this.glyphs;
this.font._path=this.path;
this.font._id=this.id;
this.font._definefont=this;
};
d.setFonts=function(domain)
{
if(this.font)
{
domain._setFont(this.font);
}
};
var s={};
s.__getCharWidth=function(char,font)
{
var key=font+"_"+char;
var width=this.__chars[key];
if(width==undefined)
{
var meashureData=this.__measureText(char,font);
this.__chars[key]=width=meashureData.width;
}
return width;
};
s.__measureText=function(text,font)
{
var context=this.__tempContext2d;
context.font=flash.text.TextFormat._formatFont(font,1024);
return context.measureText(text);
}
s.__getCharsAdvance=function(char1,char2,font)
{
var advance=0;
if(char1)
{
if(char2&&char2!="\n"&&char2!=" "&&char2!="\t")
{
var key=font+" "+char1;
var pair=this.__kerningsPairs[key];
if(!pair)
{
this.__kerningsPairs[key]=pair={};
}
advance=pair[char2];
if(advance==undefined)
{
var width1=this.__getCharWidth(char1,font);
var width2=this.__getCharWidth(char2,font);
var width=this.__getCharWidth(char1+char2,font);
pair[char2]=advance=width-width2;
}
}
else
{
advance=this.__getCharWidth(char1,font);
}
}
return advance;
};
s.__init__=function()
{
this.prototype.Tag_constructor=this.__base__;
this.prototype.Tag_fromXML=this.__base__.prototype.fromXML;
this.__kerningsPairs={};
this.__chars={};
var canvas=document.createElement('canvas');
this.__tempContext2d=canvas.getContext("2d");
}
flash.addDescription("flash.swf.DefineFont",d,"flash.swf.Tag",s,null);
}
());;(function()
{
"use strict";
var d={};
d.id=null;
d.path=null;
d.audio=null;
d.DefineSound=function()
{
this.Tag_constructor();
this.baseClass=flash.media.Sound;
}
d.fromXML=function(node)
{
this.Tag_fromXML(node);
var attributes=node.get_attributes();
this.path=String(attributes.path);
};
d.init=function(folder)
{
var path=folder+this.path;
if(!this._canPlayMP3())
{
path=path.replace(".mp3",".wav");
}
flash.trace("init audio",path);
this.audio=new Audio(path);
};
d._canPlayMP3=function()
{
var audio=document.createElement("audio");
return(typeof audio.canPlayType==="function"&&audio.canPlayType("audio/mpeg")!=="");
};
d.linkage=function(sound)
{
sound._audio=this.audio;
}
var s={};
s.__init__=function()
{
this.prototype.Tag_constructor=this.__base__;
this.prototype.Tag_fromXML=this.__base__.prototype.fromXML;
}
flash.addDescription("flash.swf.DefineSound",d,"flash.swf.Tag",s,null);
}
());;
(function()
{
"use strict";
var d={};
d.XMLList=function(value)
{
if(value==undefined)value=null;
};
d.__find__=function(callback)
{
var i=0;
while(this[i])
{
var xml=this[i];
try
{
if(callback(xml))
{
return xml;
}
}
catch(e)
{
}
i++;
}
return null;
};
d.addNamespace=function(ns)
{
};
d.appendChild=function(child)
{
};
d.attribute=function(arg)
{
};
d.attributes=function()
{
};
d.child=function(propertyName)
{
};
d.childIndex=function()
{
};
d.children=function()
{
};
d.comments=function()
{
};
d.contains=function(value)
{
};
d.copy=function()
{
};
d.descendants=function(name)
{
if(name==undefined)name="*";
};
d.elements=function(name)
{
if(name==undefined)name="*";
};
d.hasComplexContent=function()
{
};
d.hasSimpleContent=function()
{
};
d.inScopeNamespaces=function()
{
};
d.insertChildAfter=function(child1,child2)
{
};
d.insertChildBefore=function(child1,child2)
{
};
d.length=function()
{
};
d.localName=function()
{
};
d.name=function()
{
};
d.namespace=function(prefix)
{
if(prefix==undefined)prefix=null;
};
d.namespaceDeclarations=function()
{
};
d.nodeKind=function()
{
};
d.normalize=function()
{
};
d.parent=function()
{
};
d.prependChild=function(value)
{
};
d.processingInstructions=function(name)
{
if(name==undefined)name="*";
};
d.propertyIsEnumerable=function(P)
{
if(P==undefined)P=null;
};
d.removeNamespace=function(ns)
{
};
d.replace=function(propertyName,value)
{
};
d.setChildren=function(value)
{
};
d.setLocalName=function(name)
{
};
d.setName=function(name)
{
};
d.setNamespace=function(ns)
{
};
d.text=function()
{
};
d.toString=function()
{
var data="";
var i=0;
while(this[i])
{
data+=this[i].toString();
i++;
}
return data;
};
d.toXMLString=function()
{
var data="";
var i=0;
while(this[i])
{
data+=this[i].toXMLString();
i++;
}
return data;
};
d.valueOf=function()
{
};
flash.addDescription("XMLList",d,null,null,null,null);
}
());;
(function()
{
"use strict";
var d={};
d._volume=1;
d._pan=0;
d.get_leftToLeft=function()
{
return 0;
};
d.set_leftToLeft=function(leftToLeft)
{
};
d.get_leftToRight=function()
{
return 0;
};
d.set_leftToRight=function(leftToRight)
{
};
d.get_pan=function()
{
return this._pan;
};
d.set_pan=function(panning)
{
this._pan=panning;
return panning;
};
d.get_rightToLeft=function()
{
return 0;
};
d.set_rightToLeft=function(rightToLeft)
{
};
d.get_rightToRight=function()
{
return 0;
};
d.set_rightToRight=function(rightToRight)
{
};
d.get_volume=function()
{
return this._volume;
};
d.set_volume=function(volume)
{
this._volume=volume;
return volume;
};
d.SoundTransform=function(volume,panning)
{
if(volume==undefined)volume=1;
if(panning==undefined)panning=0;
this.set_volume(volume);
this.set_pan(panning);
};
flash.addDescription("flash.media.SoundTransform",d,null,null,null);
}
());;
(function()
{
"use strict";
var d={};
d.SoundMixer=function()
{
};
var s={};
s._soundTransform=null;
s.__init__=function()
{
this._soundTransform=new flash.media.SoundTransform();
}
s.get_bufferTime=function()
{
};
s.set_bufferTime=function(bufferTime)
{
};
s.get_soundTransform=function()
{
return this._soundTransform;
};
s.set_soundTransform=function(value)
{
this._soundTransform=value;
};
s.areSoundsInaccessible=function()
{
};
s.computeSpectrum=function(outputArray,FFTMode,stretchFactor)
{
};
s.stopAll=function()
{
};
flash.addDescription("flash.media.SoundMixer",d,null,s,null);
}
());;
(function()
{
"use strict";
var d={};
d._audio=null;
d._soundChannel=null;
d.get_bytesLoaded=function()
{
return 0;
};
d.get_bytesTotal=function()
{
return 0;
};
d.get_id3=function()
{
return null;
};
d.get_isBuffering=function()
{
return false;
};
d.get_length=function()
{
return 0;
};
d.get_url=function()
{
return null;
};
d.Sound=function(stream,context)
{
this.EventDispatcher_constructor();
if(stream==undefined)stream=null;
if(context==undefined)context=null;
this.load(stream,context);
this._soundChannel=new flash.media.SoundChannel();
flash.linkage(this,flash.media.Sound);
};
d.close=function()
{
};
d.load=function(stream,context)
{
if(context==undefined)context=null;
};
d.play=function(startTime,loops,sndTransform)
{
if(this._audio)
{
this._audio.play();
}
return this._soundChannel;
};
var s={};
s.__init__=function()
{
this.prototype.EventDispatcher_constructor=this.__base__;
}
flash.addDescription("flash.media.Sound",d,"flash.events.EventDispatcher",s,null);
}
());;
(function()
{
"use strict";
var d={};
d.album=null;
d.artist=null;
d.comment=null;
d.genre=null;
d.songName=null;
d.track=null;
d.year=null;
d.ID3Info=function()
{
return;
};
flash.addDescription("flash.media.ID3Info",d,null,null,null);
}
());;
(function()
{
"use strict";
var d={};
d.get_activityLevel=function()
{
};
d.get_gain=function()
{
};
d.set_gain=function(gain)
{
};
d.get_index=function()
{
};
d.get_muted=function()
{
};
d.get_name=function()
{
};
d.get_rate=function()
{
};
d.set_rate=function(rate)
{
};
d.get_silenceLevel=function()
{
};
d.get_silenceTimeout=function()
{
};
d.get_soundTransform=function()
{
};
d.set_soundTransform=function(sndTransform)
{
};
d.get_useEchoSuppression=function()
{
};
d.Microphone=function()
{
this.EventDispatcher_constructor();
return;
};
d.setLoopBack=function(state)
{
};
d.setSilenceLevel=function(silenceLevel,timeout)
{
};
d.setUseEchoSuppression=function(useEchoSuppression)
{
};
var s={};
s.__init__=function()
{
this.prototype.EventDispatcher_constructor=this.__base__;
}
s.get_names=function()
{
};
s.getMicrophone=function(index)
{
};
flash.addDescription("flash.media.Microphone",d,"flash.events.EventDispatcher",s,null);
}
());;
(function()
{
"use strict";
var d={};
d._leftPeak=0;
d._rightPeak=0;
d._position=0;
d._transform=null;
d._sound=null;
d.get_leftPeak=function()
{
return this._leftPeak;
};
d.get_position=function()
{
return this._position;
};
d.get_rightPeak=function()
{
return this._rightPeak;
};
d.get_soundTransform=function()
{
return this._transform;
};
d.set_soundTransform=function(value)
{
this._transform=value;
return value;
};
d.SoundChannel=function()
{
this.EventDispatcher_constructor();
};
d.stop=function()
{
};
var s={};
s.__init__=function()
{
this.prototype.EventDispatcher_constructor=this.__base__;
}
flash.addDescription("flash.media.SoundChannel",d,"flash.events.EventDispatcher",s,null);
}
());;
(function()
{
"use strict";
var d={};
d.get_deblocking=function()
{
};
d.set_deblocking=function(value)
{
};
d.get_smoothing=function()
{
};
d.set_smoothing=function(value)
{
};
d.get_videoHeight=function()
{
};
d.get_videoWidth=function()
{
};
d.Video=function(width,height)
{
this.DisplayObject_constructor();
};
d.attachCamera=function(camera)
{
};
d.attachNetStream=function(netStream)
{
};
d.clear=function()
{
};
var s={};
s.__init__=function()
{
this.prototype.DisplayObject_constructor=this.__base__;
}
flash.addDescription("flash.media.Video",d,"flash.display.DisplayObject",s,null);
}
());;
(function()
{
"use strict";
var d={};
d.bufferTime=1000;
d.checkPolicyFile=false;
d.SoundLoaderContext=function(bufferTime,checkPolicyFile)
{
if(bufferTime==undefined)bufferTime=1000;
if(checkPolicyFile==undefined)checkPolicyFile=false;
bufferTime=1000;
checkPolicyFile=false;
this.checkPolicyFile=checkPolicyFile;
this.bufferTime=bufferTime;
return;
};
flash.addDescription("flash.media.SoundLoaderContext",d,null,null,null);
}
());;
(function()
{
"use strict";
var d={};
d.get_activityLevel=function()
{
};
d.get_bandwidth=function()
{
};
d.get_currentFPS=function()
{
};
d.get_fps=function()
{
};
d.get_height=function()
{
};
d.get_index=function()
{
};
d.get_keyFrameInterval=function()
{
};
d.get_loopback=function()
{
};
d.get_motionLevel=function()
{
};
d.get_motionTimeout=function()
{
};
d.get_muted=function()
{
};
d.get_name=function()
{
};
d.get_quality=function()
{
};
d.get_width=function()
{
};
d.Camera=function()
{
this.EventDispatcher_constructor();
return;
};
d.setCursor=function(value)
{
};
d.setKeyFrameInterval=function(keyFrameInterval)
{
};
d.setLoopback=function(compress)
{
};
d.setMode=function(width,height,fps,favorArea)
{
};
d.setMotionLevel=function(motionLevel,timeout)
{
};
d.setQuality=function(bandwidth,quality)
{
};
var s={};
s.__init__=function()
{
this.prototype.EventDispatcher_constructor=this.__base__;
}
s.get_names=function()
{
};
s.getCamera=function(name)
{
};
flash.addDescription("flash.media.Camera",d,"flash.events.EventDispatcher",s,null);
}
());